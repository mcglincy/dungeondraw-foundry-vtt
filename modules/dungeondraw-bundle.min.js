const e="dungeon-draw",t="dungeonState",n="allowTrustedPlayer",i="3DCanvasEnabled",r="makeFoundryWalls",o="snapToGrid",a="themePainterTheme";class Settings{static register(){game.settings.register(e,n,{name:game.i18n.localize("DD.SettingAllowTrustedPlayers"),scope:"world",default:!0,type:Boolean,config:!0}),game.settings.register(e,i,{name:game.i18n.localize("DD.SettingSupport3DCanvas"),scope:"world",default:!0,type:Boolean,config:!0}),game.settings.register(e,o,{name:game.i18n.localize("DD.SettingSnapToGrid"),scope:"client",default:!0,type:Boolean,config:!0,onChange:e=>{canvas.dungeon.options.snapToGrid=e}}),game.settings.register(e,"releaseNotesVersion",{name:"Last version we showed release notes.",scope:"client",default:"",type:String,config:!1}),game.settings.register(e,"customThemes",{name:"Custom themes data.",scope:"client",default:"{}",type:String,config:!1}),game.settings.register(e,a,{name:"Theme painter theme key.",scope:"client",default:"module.cavern",type:String,config:!1}),game.settings.register(e,r,{name:game.i18n.localize("DD.SettingMakeFoundryWalls"),scope:"world",default:!0,type:Boolean,config:!0})}static threeDCanvasEnabled(){return game.settings.get(e,i)}static snapToGrid(){return game.settings.get(e,o)}static makeFoundryWalls(){return game.settings.get(e,r)}}const s=()=>{try{const t=game.settings.get(e,"customThemes"),n=JSON.parse(t);return Object.keys(n).forEach((e=>{n[e].config=foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},n[e].config)})),n}catch(e){return console.log(e),{}}},l=t=>{const n=JSON.stringify(t);game.settings.set(e,"customThemes",n)},c=()=>game.settings.get(e,a),h=t=>game.settings.set(e,a,t),u={default:{name:"Default",config:{doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8}},arcPavement:{name:"Arc Pavement",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#111111",floorTexture:"modules/dungeon-draw/assets/textures/Arc_Pavement_001_basecolor.jpg",invisibleWallThickness:10,wallColor:"#111111",wallThickness:12})},basicBlack:{name:"Basic Black",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#0D0D0D",doorFillOpacity:0,exteriorShadowOpacity:0,interiorShadowOpacity:0,invisibleWallColor:"#0D0D0D",floorColor:"#FFFFFF",sceneBackgroundColor:"#0D0D0D",sceneGridOpacity:1,secretDoorSColor:"#0D0D0D",wallColor:"#0D0D0D"})},cavern:{name:"Cavern",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#2B2D2F",invisibleWallThickness:10,floorTexture:"modules/dungeon-draw/assets/textures/Stylized_Stone_Floor_002_bw.jpg",wallColor:"#2B2D2F",wallThickness:12})},checkerboard:{name:"Checkerboard",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorFillColor:"#C2BFB0",floorTexture:"modules/dungeon-draw/assets/textures/sci_fi_texture_150_by_llexandro_d939vk9.png",invisibleWallFillColor:"#C2BFB0",invisibleWallThickness:8,secretDoorSColor:"#C2BFB0",wallThickness:10})},cobblestone:{name:"Cobblestone",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#222222",doorFillColor:"#FFFFFF",floorTexture:"modules/dungeon-draw/assets/textures/Cobblestone_001_COLOR.jpg",invisibleWallColor:"#222222",invisibleWallFillColor:"#FFFFFF",invisibleWallThickness:10,secretDoorSColor:"#FFFFFF",wallColor:"#222222",wallThickness:12})},dirt:{name:"Dirt",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#1a1714",doorFillColor:"#8d7862",floorTexture:"modules/dungeon-draw/assets/textures/Ground_Dirt_007_basecolor.jpg",invisibleWallColor:"#1a1714",invisibleWallFillColor:"#8d7862",invisibleWallThickness:8,secretDoorSColor:"#8d7862",wallColor:"#1a1714",wallThickness:10})},dungeonSquares:{name:"Dungeon Squares",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#111111",floorTexture:"modules/dungeon-draw/assets/textures/outdoor+stone+tiles+pavement.jpg",invisibleWallColor:"#111111",invisibleWallThickness:10,wallColor:"#111111",wallThickness:12})},grass:{name:"Grass",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#72471d",doorFillColor:"#eee8c1",floorTexture:"modules/dungeon-draw/assets/textures/Grass_001_COLOR.jpg",invisibleWallColor:"#72471d",invisibleWallFillColor:"#eee8c1",invisibleWallThickness:10,secretDoorSColor:"#eee8c1",wallColor:"#72471d",wallThickness:10})},groovyCarpet:{name:"Groovy Carpet",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#2B2D2F",floorTexture:"modules/dungeon-draw/assets/textures/Fabric_Rug_006_basecolor.jpg",invisibleWallColor:"#2B2D2F",invisibleWallThickness:10,wallColor:"#2B2D2F",wallThickness:12})},hexagon:{name:"Hexagons",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#282828",doorFillColor:"#D1BD8A",floorTexture:"modules/dungeon-draw/assets/textures/Rocks_Hexagons_002_basecolor.jpg",invisibleWallColor:"#282828",invisibleWallFillColor:"#D1BD8A",invisibleWallThickness:10,secretDoorSColor:"#D1BD8A",wallColor:"#282828",wallThickness:12})},marble:{name:"Marble",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#686882",floorTexture:"modules/dungeon-draw/assets/textures/Marble_Tiles_001_basecolor.jpg",invisibleWallColor:"#686882",wallColor:"#686882"})},metalGrid:{name:"Metal Grid",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#27251A",doorFillColor:"#AAAAAA",floorTexture:"modules/dungeon-draw/assets/textures/Sci-fi_Floor_002_basecolor.jpg",invisibleWallColor:"#27251A",invisibleWallFillColor:"#AAAAAA",secretDoorSColor:"#AAAAAA",wallColor:"#27251A"})},metalSquares:{name:"Metal Squares",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorFillColor:"#C0C0C0",floorTexture:"modules/dungeon-draw/assets/textures/sci_fi_texture_212_by_llexandro_dcuxgum.png",invisibleWallFillColor:"#C0C0C0",secretDoorSColor:"#C0C0C0"})},moldvayBlue:{name:"Moldvay Blue",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#3A9FF2",doorFillOpacity:0,doorThickness:35,exteriorShadowOpacity:0,floorColor:"#FFFFFF",interiorShadowOpacity:0,invisibleWallColor:"#3A9FF2",invisibleWallFillOpacity:0,sceneBackgroundColor:"#3A9FF2",sceneGridColor:"#3A9FF2",sceneGridOpacity:1,secretDoorSColor:"#3A9FF2",wallColor:"#3A9FF2"})},neonBlueprint:{name:"Neon Blueprint",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#3A9FF2",doorFillOpacity:0,doorThickness:35,exteriorShadowColor:"#18495E",floorColor:"#142A3B",interiorShadowColor:"#1B7FAB",invisibleWallColor:"#3A9FF2",invisibleWallFillOpacity:0,invisibleWallLineThickness:1,invisibleWallThickness:6,sceneBackgroundColor:"#171008",sceneGridColor:"#4C89A1",sceneGridOpacity:1,secretDoorSColor:"#3A9FF2",wallColor:"#63C9E6",wallThickness:4})},ruddyPaper:{name:"Ruddy Paper",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#913B55",doorFillColor:"#FADEE6",floorTexture:"modules/dungeon-draw/assets/textures/Paper_Recycled_001_COLOR.jpg",floorTextureTint:"#F9FAE6",exteriorShadowOpacity:0,interiorShadowOpacity:0,invisibleWallColor:"#913B55",invisibleWallFillColor:"#FADEE6",sceneBackgroundColor:"#EBD3BC",sceneGridColor:"#594026",sceneGridOpacity:1,secretDoorSColor:"#913B55",wallColor:"#9A6D54"})},water:{name:"Water",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#203246",floorTexture:"modules/dungeon-draw/assets/textures/Water_001_COLOR.jpg",invisibleWallColor:"#203246",invisibleWallLineThickness:1,invisibleWallThickness:4,wallColor:"#203246",wallThickness:5})},woodPlanks:{name:"Wood Planks",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#332211",floorTexture:"modules/dungeon-draw/assets/textures/Old_Wooden_Plank_Seamless_Texture_765.jpg",invisibleWallColor:"#332211",invisibleWallThickness:13,wallColor:"#332211",wallTexture:"modules/dungeon-draw/assets/textures/Bark_002_bw.jpg",wallTextureTint:"#7e5935",wallThickness:15})},xenomorph:{name:"Xenomorph",config:foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},{doorColor:"#8AF0F0",doorFillColor:"#255151",doorLineThickness:5,doorThickness:20,exteriorShadowColor:"#00838C",floorColor:"#255151",interiorShadowColor:"#00838C",invisibleWallColor:"#8AF0F0",invisibleWallFillColor:"#255151",invisibleWallLineThickness:1,invisibleWallThickness:6,sceneBackgroundColor:"#002222",sceneGridColor:"#ffffff",sceneGridOpacity:1,secretDoorSColor:"#8AF0F0",wallColor:"#8AF0F0",wallThickness:4})}};class ThemeSheet extends FormApplication{constructor(e){super(),this.themeKey=e}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"dd-theme-sheet",classes:["sheet"],template:"modules/dungeon-draw/templates/theme-sheet.html",width:480,height:Settings.threeDCanvasEnabled()?1160:1040,tabs:[{navSelector:".tabs",contentSelector:"form",initial:"position"}]})}get title(){return game.i18n.localize("DD.ThemeSheetTitle")}getData(){const e=s()[this.themeKey],t=Settings.threeDCanvasEnabled();return{config:e.config,themeName:e.name,threeDCanvasEnabled:t}}async _updateObject(e,t){const n=s(),i=t.themeName;delete t.themeName,n[this.themeKey]={name:i,config:t},l(n),await(canvas.dungeon.dungeon?.refresh())}}class ConfigSheet extends FormApplication{constructor(e="settings"){super(),this._tabs[0].active=e}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"dd-config-sheet",classes:["sheet"],template:"modules/dungeon-draw/templates/config-sheet.html",width:480,height:Settings.threeDCanvasEnabled()?1220:1100,tabs:[{navSelector:".tabs",contentSelector:"form",initial:"position"}]})}get title(){return game.i18n.localize("DD.ConfigSheetTitle")}getData(){let e=canvas.dungeon.dungeon?.state().config;e||(e={doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8});const t=s(),n=Object.keys(t).sort(),i=Object.keys(u).sort(),r=c(),o=Settings.threeDCanvasEnabled();return{config:e,customThemes:t,customThemeKeys:n,themes:u,themeKeys:i,themePainterThemeKey:r,threeDCanvasEnabled:o}}async _updateObject(e,t){delete t.customThemeName,delete t.themePainterTheme,canvas.dungeon.dungeon?.setConfig(t),game.user.isGM&&await canvas.scene.update({backgroundColor:t.sceneBackgroundColor,gridAlpha:t.sceneGridAlpha,gridColor:t.sceneGridColor})}async close(e){await super.close(e),this.preview&&(this.preview.removeChildren(),this.preview=null)}activateListeners(e){super.activateListeners(e),e.find('button[name="resetDefault"]').click(this._onResetDefaults.bind(this)),e.find(".dd-theme-name").click(this._onThemeNameClick.bind(this)),e.find(".dd-save-as-theme-button").click(this._onSaveAsThemeClick.bind(this)),e.find(".dd-theme-edit").click(this._onEditThemeClick.bind(this)),e.find(".dd-theme-copy").click(this._onCopyThemeClick.bind(this)),e.find(".dd-theme-delete").click(this._onDeleteThemeClick.bind(this)),e.find('select[name="themePainterThemeKey"]').change(this._onThemePainterThemeSelect.bind(this)),e.find(".dd-export-themes-button").click(this._onExportThemesClick.bind(this)),e.find(".dd-import-themes-button").click(this._onImportThemesClick.bind(this))}_onResetDefaults(e){e.preventDefault(),canvas.dungeon.dungeon?.setConfig({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8}),canvas.dungeon.dungeon.refresh(),this.render()}async _onThemeNameClick(e){e.preventDefault();const t=$(e.currentTarget).parent(".dd-theme-row"),n=t.data("theme");let i;if("custom"===t.data("themetype")){i=s()[n]}else i=u[n];const r={...i.config};await(canvas.dungeon.dungeon?.setConfig(r)),game.user.isGM&&await canvas.scene.update({backgroundColor:r.sceneBackgroundColor,gridAlpha:r.sceneGridAlpha,gridColor:r.sceneGridColor}),this.render()}async _onSaveAsThemeClick(e){e.preventDefault();const t=$(e.currentTarget).closest(".form-fields").children(".saveAsThemeName").val(),n=this._getSubmitData();delete n.saveAsThemeName,delete n.themePainterThemeKey;const i=s();i[t]={name:t,config:n},l(i),this._tabs[0].active="themes",this.render()}async _onEditThemeClick(e){e.preventDefault();const t=$(e.currentTarget).closest(".dd-theme-row").data("theme");new ThemeSheet(t).render(!0)}_onCopyThemeClick(e){e.preventDefault();const t=$(e.currentTarget).closest(".dd-theme-row").data("theme"),n=s(),i=n[t],r=JSON.parse(JSON.stringify(i));let o,a=1,c=!1;for(;!c;)o=`${i.name} (${a})`,o in n?a++:c=!0;r.name=o,n[o]=r,l(n),this.render()}_onDeleteThemeClick(e){e.preventDefault();const t=$(e.currentTarget).closest(".dd-theme-row").data("theme"),n=s();delete n[t],l(n),this.render()}_onExportThemesClick(e){e.preventDefault();const t=JSON.stringify(s(),null,2);saveDataToFile(t,"application/json","dd-custom-themes.json")}async _onImportThemesClick(e){e.preventDefault(),new Dialog({title:game.i18n.localize("DD.ImportCustomThemes"),content:await renderTemplate("modules/dungeon-draw/templates/import-data.html",{hint:game.i18n.localize("DD.ImportCustomThemesHint")}),buttons:{import:{icon:'<i class="fas fa-file-import"></i>',label:game.i18n.localize("DD.Import"),callback:e=>{const t=e.find("form")[0];if(!t.data.files.length)return ui.notifications.error("You did not upload a data file!");readTextFromFile(t.data.files[0]).then((e=>{const n=JSON.parse(e);if(t.wipe.checked)l(n);else{const e=s(),t=foundry.utils.mergeObject(e,n);l(t)}this.render()}))}},no:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("DD.Cancel")}},default:"import"},{width:400}).render(!0)}_onThemePainterThemeSelect(e){const t=$(e.currentTarget).val();h(t)}}class Exception extends Error{constructor(e){super(e),this.name=Object.keys({Exception:Exception})[0]}toString(){return this.message}}class IllegalArgumentException extends Exception{constructor(e){super(e),this.name=Object.keys({IllegalArgumentException:IllegalArgumentException})[0]}}class GeometryComponentFilter{filter(e){}}function d(){}function g(){}function m(){}class NumberUtil{static equalsWithTolerance(e,t,n){return Math.abs(e-t)<=n}}class Long{constructor(e,t){this.low=t||0,this.high=e||0}static toBinaryString(e){let t,n="";for(t=2147483648;t>0;t>>>=1)n+=(e.high&t)===t?"1":"0";for(t=2147483648;t>0;t>>>=1)n+=(e.low&t)===t?"1":"0";return n}}function p(){}function f(){}p.NaN=NaN,p.isNaN=e=>Number.isNaN(e),p.isInfinite=e=>!Number.isFinite(e),p.MAX_VALUE=Number.MAX_VALUE,p.POSITIVE_INFINITY=Number.POSITIVE_INFINITY,p.NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY,"function"==typeof Float64Array&&"function"==typeof Int32Array?function(){const e=2146435072,t=new Float64Array(1),n=new Int32Array(t.buffer);p.doubleToLongBits=function(i){t[0]=i;let r=0|n[0],o=0|n[1];return(o&e)===e&&1048575&o&&0!==r&&(r=0,o=2146959360),new Long(o,r)},p.longBitsToDouble=function(e){return n[0]=e.low,n[1]=e.high,t[0]}}():function(){const e=1023,t=Math.log2,n=Math.floor,i=Math.pow,r=function(){for(let e=53;e>0;e--){const r=i(2,e)-1;if(n(t(r))+1===e)return r}return 0}();p.doubleToLongBits=function(o){let a,s,l,c,h,u,d,g,m;if(o<0||1/o===Number.NEGATIVE_INFINITY?(u=1<<31,o=-o):u=0,0===o)return m=0,g=u,new Long(g,m);if(o===1/0)return m=0,g=2146435072|u,new Long(g,m);if(o!=o)return m=0,g=2146959360,new Long(g,m);if(c=0,m=0,a=n(o),a>1)if(a<=r)c=n(t(a)),c<=20?(m=0,g=a<<20-c&1048575):(l=c-20,s=i(2,l),m=a%s<<32-l,g=a/s&1048575);else for(l=a,m=0;s=l/2,l=n(s),0!==l;)c++,m>>>=1,m|=(1&g)<<31,g>>>=1,s!==l&&(g|=524288);if(d=c+e,h=0===a,a=o-a,c<52&&0!==a)for(l=0;;){if(s=2*a,s>=1?(a=s-1,h?(d--,h=!1):(l<<=1,l|=1,c++)):(a=s,h?0==--d&&(c++,h=!1):(l<<=1,c++)),20===c)g|=l,l=0;else if(52===c){m|=l;break}if(1===s){c<20?g|=l<<20-c:c<52&&(m|=l<<52-c);break}}return g|=d<<20,g|=u,new Long(g,m)},p.longBitsToDouble=function(t){let n,r,o,a;const s=t.high,l=t.low,c=s&1<<31?-1:1;for(o=((2146435072&s)>>20)-e,a=0,r=1<<19,n=1;n<=20;n++)s&r&&(a+=i(2,-n)),r>>>=1;for(r=1<<31,n=21;n<=52;n++)l&r&&(a+=i(2,-n)),r>>>=1;if(-1023===o){if(0===a)return 0*c;o=-1022}else{if(1024===o)return 0===a?c/0:NaN;a+=1}return c*a*i(2,o)}}();class RuntimeException extends Exception{constructor(e){super(e),this.name=Object.keys({RuntimeException:RuntimeException})[0]}}class AssertionFailedException extends RuntimeException{constructor(){super(),AssertionFailedException.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)RuntimeException.constructor_.call(this);else if(1===arguments.length){const e=arguments[0];RuntimeException.constructor_.call(this,e)}}}class Assert{static shouldNeverReachHere(){if(0===arguments.length)Assert.shouldNeverReachHere(null);else if(1===arguments.length){const e=arguments[0];throw new AssertionFailedException("Should never reach here"+(null!==e?": "+e:""))}}static isTrue(){if(1===arguments.length){const e=arguments[0];Assert.isTrue(e,null)}else if(2===arguments.length){const e=arguments[1];if(!arguments[0])throw null===e?new AssertionFailedException:new AssertionFailedException(e)}}static equals(){if(2===arguments.length){const e=arguments[0],t=arguments[1];Assert.equals(e,t,null)}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];if(!t.equals(e))throw new AssertionFailedException("Expected "+e+" but encountered "+t+(null!==n?": "+n:""))}}}const _=new ArrayBuffer(8),y=new Float64Array(_),C=new Int32Array(_);class Coordinate{constructor(){Coordinate.constructor_.apply(this,arguments)}static constructor_(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)Coordinate.constructor_.call(this,0,0);else if(1===arguments.length){const e=arguments[0];Coordinate.constructor_.call(this,e.x,e.y,e.getZ())}else if(2===arguments.length){const e=arguments[0],t=arguments[1];Coordinate.constructor_.call(this,e,t,Coordinate.NULL_ORDINATE)}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this.x=e,this.y=t,this.z=n}}static hashCode(e){return y[0]=e,C[0]^C[1]}getM(){return p.NaN}setOrdinate(e,t){switch(e){case Coordinate.X:this.x=t;break;case Coordinate.Y:this.y=t;break;case Coordinate.Z:this.setZ(t);break;default:throw new IllegalArgumentException("Invalid ordinate index: "+e)}}equals2D(){if(1===arguments.length){const e=arguments[0];return this.x===e.x&&this.y===e.y}if(2===arguments.length){const e=arguments[0],t=arguments[1];return!!NumberUtil.equalsWithTolerance(this.x,e.x,t)&&!!NumberUtil.equalsWithTolerance(this.y,e.y,t)}}setM(e){throw new IllegalArgumentException("Invalid ordinate index: "+Coordinate.M)}getZ(){return this.z}getOrdinate(e){switch(e){case Coordinate.X:return this.x;case Coordinate.Y:return this.y;case Coordinate.Z:return this.getZ()}throw new IllegalArgumentException("Invalid ordinate index: "+e)}equals3D(e){return this.x===e.x&&this.y===e.y&&(this.getZ()===e.getZ()||p.isNaN(this.getZ())&&p.isNaN(e.getZ()))}equals(e){return e instanceof Coordinate&&this.equals2D(e)}equalInZ(e,t){return NumberUtil.equalsWithTolerance(this.getZ(),e.getZ(),t)}setX(e){this.x=e}compareTo(e){const t=e;return this.x<t.x?-1:this.x>t.x?1:this.y<t.y?-1:this.y>t.y?1:0}getX(){return this.x}setZ(e){this.z=e}clone(){try{return null}catch(e){if(e instanceof CloneNotSupportedException)return Assert.shouldNeverReachHere("this shouldn't happen because this class is Cloneable"),null;throw e}}copy(){return new Coordinate(this)}toString(){return"("+this.x+", "+this.y+", "+this.getZ()+")"}distance3D(e){const t=this.x-e.x,n=this.y-e.y,i=this.getZ()-e.getZ();return Math.sqrt(t*t+n*n+i*i)}getY(){return this.y}setY(e){this.y=e}distance(e){const t=this.x-e.x,n=this.y-e.y;return Math.sqrt(t*t+n*n)}hashCode(){let e=17;return e=37*e+Coordinate.hashCode(this.x),e=37*e+Coordinate.hashCode(this.y),e}setCoordinate(e){this.x=e.x,this.y=e.y,this.z=e.getZ()}get interfaces_(){return[d,g,m]}}class DimensionalComparator{constructor(){DimensionalComparator.constructor_.apply(this,arguments)}static constructor_(){if(this._dimensionsToTest=2,0===arguments.length)DimensionalComparator.constructor_.call(this,2);else if(1===arguments.length){const e=arguments[0];if(2!==e&&3!==e)throw new IllegalArgumentException("only 2 or 3 dimensions may be specified");this._dimensionsToTest=e}}static compare(e,t){return e<t?-1:e>t?1:p.isNaN(e)?p.isNaN(t)?0:-1:p.isNaN(t)?1:0}compare(e,t){const n=DimensionalComparator.compare(e.x,t.x);if(0!==n)return n;const i=DimensionalComparator.compare(e.y,t.y);if(0!==i)return i;if(this._dimensionsToTest<=2)return 0;return DimensionalComparator.compare(e.getZ(),t.getZ())}get interfaces_(){return[f]}}Coordinate.DimensionalComparator=DimensionalComparator,Coordinate.NULL_ORDINATE=p.NaN,Coordinate.X=0,Coordinate.Y=1,Coordinate.Z=2,Coordinate.M=3;class Envelope{constructor(){Envelope.constructor_.apply(this,arguments)}static constructor_(){if(this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof Coordinate){const e=arguments[0];this.init(e.x,e.x,e.y,e.y)}else if(arguments[0]instanceof Envelope){const e=arguments[0];this.init(e)}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.init(e.x,t.x,e.y,t.y)}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];this.init(e,t,n,i)}}static intersects(){if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];return n.x>=(e.x<t.x?e.x:t.x)&&n.x<=(e.x>t.x?e.x:t.x)&&n.y>=(e.y<t.y?e.y:t.y)&&n.y<=(e.y>t.y?e.y:t.y)}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];let r=Math.min(n.x,i.x),o=Math.max(n.x,i.x),a=Math.min(e.x,t.x),s=Math.max(e.x,t.x);return!(a>o)&&(!(s<r)&&(r=Math.min(n.y,i.y),o=Math.max(n.y,i.y),a=Math.min(e.y,t.y),s=Math.max(e.y,t.y),!(a>o)&&!(s<r)))}}getArea(){return this.getWidth()*this.getHeight()}equals(e){if(!(e instanceof Envelope))return!1;const t=e;return this.isNull()?t.isNull():this._maxx===t.getMaxX()&&this._maxy===t.getMaxY()&&this._minx===t.getMinX()&&this._miny===t.getMinY()}intersection(e){if(this.isNull()||e.isNull()||!this.intersects(e))return new Envelope;const t=this._minx>e._minx?this._minx:e._minx,n=this._miny>e._miny?this._miny:e._miny,i=this._maxx<e._maxx?this._maxx:e._maxx,r=this._maxy<e._maxy?this._maxy:e._maxy;return new Envelope(t,i,n,r)}isNull(){return this._maxx<this._minx}getMaxX(){return this._maxx}covers(){if(1===arguments.length){if(arguments[0]instanceof Coordinate){const e=arguments[0];return this.covers(e.x,e.y)}if(arguments[0]instanceof Envelope){const e=arguments[0];return!this.isNull()&&!e.isNull()&&(e.getMinX()>=this._minx&&e.getMaxX()<=this._maxx&&e.getMinY()>=this._miny&&e.getMaxY()<=this._maxy)}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];return!this.isNull()&&(e>=this._minx&&e<=this._maxx&&t>=this._miny&&t<=this._maxy)}}intersects(){if(1===arguments.length){if(arguments[0]instanceof Envelope){const e=arguments[0];return!this.isNull()&&!e.isNull()&&!(e._minx>this._maxx||e._maxx<this._minx||e._miny>this._maxy||e._maxy<this._miny)}if(arguments[0]instanceof Coordinate){const e=arguments[0];return this.intersects(e.x,e.y)}}else if(2===arguments.length){if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){const e=arguments[0],t=arguments[1];if(this.isNull())return!1;if((e.x<t.x?e.x:t.x)>this._maxx)return!1;if((e.x>t.x?e.x:t.x)<this._minx)return!1;if((e.y<t.y?e.y:t.y)>this._maxy)return!1;return!((e.y>t.y?e.y:t.y)<this._miny)}if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1];return!this.isNull()&&!(e>this._maxx||e<this._minx||t>this._maxy||t<this._miny)}}}getMinY(){return this._miny}getDiameter(){if(this.isNull())return 0;const e=this.getWidth(),t=this.getHeight();return Math.sqrt(e*e+t*t)}getMinX(){return this._minx}expandToInclude(){if(1===arguments.length){if(arguments[0]instanceof Coordinate){const e=arguments[0];this.expandToInclude(e.x,e.y)}else if(arguments[0]instanceof Envelope){const e=arguments[0];if(e.isNull())return null;this.isNull()?(this._minx=e.getMinX(),this._maxx=e.getMaxX(),this._miny=e.getMinY(),this._maxy=e.getMaxY()):(e._minx<this._minx&&(this._minx=e._minx),e._maxx>this._maxx&&(this._maxx=e._maxx),e._miny<this._miny&&(this._miny=e._miny),e._maxy>this._maxy&&(this._maxy=e._maxy))}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.isNull()?(this._minx=e,this._maxx=e,this._miny=t,this._maxy=t):(e<this._minx&&(this._minx=e),e>this._maxx&&(this._maxx=e),t<this._miny&&(this._miny=t),t>this._maxy&&(this._maxy=t))}}minExtent(){if(this.isNull())return 0;const e=this.getWidth(),t=this.getHeight();return e<t?e:t}getWidth(){return this.isNull()?0:this._maxx-this._minx}compareTo(e){const t=e;return this.isNull()?t.isNull()?0:-1:t.isNull()?1:this._minx<t._minx?-1:this._minx>t._minx?1:this._miny<t._miny?-1:this._miny>t._miny?1:this._maxx<t._maxx?-1:this._maxx>t._maxx?1:this._maxy<t._maxy?-1:this._maxy>t._maxy?1:0}translate(e,t){if(this.isNull())return null;this.init(this.getMinX()+e,this.getMaxX()+e,this.getMinY()+t,this.getMaxY()+t)}copy(){return new Envelope(this)}toString(){return"Env["+this._minx+" : "+this._maxx+", "+this._miny+" : "+this._maxy+"]"}setToNull(){this._minx=0,this._maxx=-1,this._miny=0,this._maxy=-1}disjoint(e){return!(!this.isNull()&&!e.isNull())||(e._minx>this._maxx||e._maxx<this._minx||e._miny>this._maxy||e._maxy<this._miny)}getHeight(){return this.isNull()?0:this._maxy-this._miny}maxExtent(){if(this.isNull())return 0;const e=this.getWidth(),t=this.getHeight();return e>t?e:t}expandBy(){if(1===arguments.length){const e=arguments[0];this.expandBy(e,e)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];if(this.isNull())return null;this._minx-=e,this._maxx+=e,this._miny-=t,this._maxy+=t,(this._minx>this._maxx||this._miny>this._maxy)&&this.setToNull()}}contains(){if(1===arguments.length){if(arguments[0]instanceof Envelope){const e=arguments[0];return this.covers(e)}if(arguments[0]instanceof Coordinate){const e=arguments[0];return this.covers(e)}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];return this.covers(e,t)}}centre(){return this.isNull()?null:new Coordinate((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)}init(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof Coordinate){const e=arguments[0];this.init(e.x,e.x,e.y,e.y)}else if(arguments[0]instanceof Envelope){const e=arguments[0];this._minx=e._minx,this._maxx=e._maxx,this._miny=e._miny,this._maxy=e._maxy}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.init(e.x,t.x,e.y,t.y)}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];e<t?(this._minx=e,this._maxx=t):(this._minx=t,this._maxx=e),n<i?(this._miny=n,this._maxy=i):(this._miny=i,this._maxy=n)}}getMaxY(){return this._maxy}distance(e){if(this.intersects(e))return 0;let t=0;this._maxx<e._minx?t=e._minx-this._maxx:this._minx>e._maxx&&(t=this._minx-e._maxx);let n=0;return this._maxy<e._miny?n=e._miny-this._maxy:this._miny>e._maxy&&(n=this._miny-e._maxy),0===t?n:0===n?t:Math.sqrt(t*t+n*n)}hashCode(){let e=17;return e=37*e+Coordinate.hashCode(this._minx),e=37*e+Coordinate.hashCode(this._maxx),e=37*e+Coordinate.hashCode(this._miny),e=37*e+Coordinate.hashCode(this._maxy),e}get interfaces_(){return[d,m]}}class Geometry{constructor(){Geometry.constructor_.apply(this,arguments)}isGeometryCollection(){return this.getTypeCode()===Geometry.TYPECODE_GEOMETRYCOLLECTION}getFactory(){return this._factory}getGeometryN(e){return this}getArea(){return 0}isRectangle(){return!1}equalsExact(e){return this===e||this.equalsExact(e,0)}geometryChanged(){this.apply(Geometry.geometryChangedFilter)}geometryChangedAction(){this._envelope=null}equalsNorm(e){return null!==e&&this.norm().equalsExact(e.norm())}getLength(){return 0}getNumGeometries(){return 1}compareTo(){let e;if(1===arguments.length){const t=arguments[0];return e=t,this.getTypeCode()!==e.getTypeCode()?this.getTypeCode()-e.getTypeCode():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t)}if(2===arguments.length){const t=arguments[0],n=arguments[1];return e=t,this.getTypeCode()!==e.getTypeCode()?this.getTypeCode()-e.getTypeCode():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t,n)}}getUserData(){return this._userData}getSRID(){return this._SRID}getEnvelope(){return this.getFactory().toGeometry(this.getEnvelopeInternal())}checkNotGeometryCollection(e){if(e.getTypeCode()===Geometry.TYPECODE_GEOMETRYCOLLECTION)throw new IllegalArgumentException("This method does not support GeometryCollection arguments")}equal(e,t,n){return 0===n?e.equals(t):e.distance(t)<=n}norm(){const e=this.copy();return e.normalize(),e}reverse(){const e=this.reverseInternal();return null!=this.envelope&&(e.envelope=this.envelope.copy()),e.setSRID(this.getSRID()),e}copy(){const e=this.copyInternal();return e.envelope=null==this._envelope?null:this._envelope.copy(),e._SRID=this._SRID,e._userData=this._userData,e}getPrecisionModel(){return this._factory.getPrecisionModel()}getEnvelopeInternal(){return null===this._envelope&&(this._envelope=this.computeEnvelopeInternal()),new Envelope(this._envelope)}setSRID(e){this._SRID=e}setUserData(e){this._userData=e}compare(e,t){const n=e.iterator(),i=t.iterator();for(;n.hasNext()&&i.hasNext();){const e=n.next(),t=i.next(),r=e.compareTo(t);if(0!==r)return r}return n.hasNext()?1:i.hasNext()?-1:0}hashCode(){return this.getEnvelopeInternal().hashCode()}isEquivalentClass(e){return this.getClass()===e.getClass()}isGeometryCollectionOrDerived(){return this.getTypeCode()===Geometry.TYPECODE_GEOMETRYCOLLECTION||this.getTypeCode()===Geometry.TYPECODE_MULTIPOINT||this.getTypeCode()===Geometry.TYPECODE_MULTILINESTRING||this.getTypeCode()===Geometry.TYPECODE_MULTIPOLYGON}get interfaces_(){return[g,d,m]}getClass(){return Geometry}static hasNonEmptyElements(e){for(let t=0;t<e.length;t++)if(!e[t].isEmpty())return!0;return!1}static hasNullElements(e){for(let t=0;t<e.length;t++)if(null===e[t])return!0;return!1}}Geometry.constructor_=function(e){e&&(this._envelope=null,this._userData=null,this._factory=e,this._SRID=e.getSRID())},Geometry.TYPECODE_POINT=0,Geometry.TYPECODE_MULTIPOINT=1,Geometry.TYPECODE_LINESTRING=2,Geometry.TYPECODE_LINEARRING=3,Geometry.TYPECODE_MULTILINESTRING=4,Geometry.TYPECODE_POLYGON=5,Geometry.TYPECODE_MULTIPOLYGON=6,Geometry.TYPECODE_GEOMETRYCOLLECTION=7,Geometry.TYPENAME_POINT="Point",Geometry.TYPENAME_MULTIPOINT="MultiPoint",Geometry.TYPENAME_LINESTRING="LineString",Geometry.TYPENAME_LINEARRING="LinearRing",Geometry.TYPENAME_MULTILINESTRING="MultiLineString",Geometry.TYPENAME_POLYGON="Polygon",Geometry.TYPENAME_MULTIPOLYGON="MultiPolygon",Geometry.TYPENAME_GEOMETRYCOLLECTION="GeometryCollection",Geometry.geometryChangedFilter={get interfaces_(){return[GeometryComponentFilter]},filter(e){e.geometryChangedAction()}};class CoordinateFilter{filter(e){}}function b(e,t){return e.interfaces_&&e.interfaces_.indexOf(t)>-1}class Length{static ofLine(e){const t=e.size();if(t<=1)return 0;let n=0;const i=new Coordinate;e.getCoordinate(0,i);let r=i.x,o=i.y;for(let a=1;a<t;a++){e.getCoordinate(a,i);const t=i.x,s=i.y,l=t-r,c=s-o;n+=Math.sqrt(l*l+c*c),r=t,o=s}return n}}class Lineal{}class CoordinateSequence{getM(e){if(this.hasM()){const t=this.getDimension()-this.getMeasures();return this.getOrdinate(e,t)}return p.NaN}setOrdinate(e,t,n){}getZ(e){return this.hasZ()?this.getOrdinate(e,2):p.NaN}size(){}getOrdinate(e,t){}getCoordinate(){}getCoordinateCopy(e){}createCoordinate(){}getDimension(){}hasM(){return this.getMeasures()>0}getX(e){}hasZ(){return this.getDimension()-this.getMeasures()>2}getMeasures(){return 0}expandEnvelope(e){}copy(){}getY(e){}toCoordinateArray(){}get interfaces_(){return[g]}}CoordinateSequence.X=0,CoordinateSequence.Y=1,CoordinateSequence.Z=2,CoordinateSequence.M=3;class CoordinateSequences{static copyCoord(e,t,n,i){const r=Math.min(e.getDimension(),n.getDimension());for(let o=0;o<r;o++)n.setOrdinate(i,o,e.getOrdinate(t,o))}static isRing(e){const t=e.size();return 0===t||!(t<=3)&&(e.getOrdinate(0,CoordinateSequence.X)===e.getOrdinate(t-1,CoordinateSequence.X)&&e.getOrdinate(0,CoordinateSequence.Y)===e.getOrdinate(t-1,CoordinateSequence.Y))}static scroll(){if(2===arguments.length){if(b(arguments[0],CoordinateSequence)&&Number.isInteger(arguments[1])){const e=arguments[0],t=arguments[1];CoordinateSequences.scroll(e,t,CoordinateSequences.isRing(e))}else if(b(arguments[0],CoordinateSequence)&&arguments[1]instanceof Coordinate){const e=arguments[0],t=arguments[1],n=CoordinateSequences.indexOf(t,e);if(n<=0)return null;CoordinateSequences.scroll(e,n)}}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];if(t<=0)return null;const i=e.copy(),r=n?e.size()-1:e.size();for(let n=0;n<r;n++)for(let o=0;o<e.getDimension();o++)e.setOrdinate(n,o,i.getOrdinate((t+n)%r,o));if(n)for(let t=0;t<e.getDimension();t++)e.setOrdinate(r,t,e.getOrdinate(0,t))}}static isEqual(e,t){const n=e.size();if(n!==t.size())return!1;const i=Math.min(e.getDimension(),t.getDimension());for(let r=0;r<n;r++)for(let n=0;n<i;n++){const i=e.getOrdinate(r,n),o=t.getOrdinate(r,n);if(e.getOrdinate(r,n)!==t.getOrdinate(r,n)&&(!p.isNaN(i)||!p.isNaN(o)))return!1}return!0}static minCoordinateIndex(){if(1===arguments.length){const e=arguments[0];return CoordinateSequences.minCoordinateIndex(e,0,e.size()-1)}if(3===arguments.length){const e=arguments[0],t=arguments[2];let n=-1,i=null;for(let r=arguments[1];r<=t;r++){const t=e.getCoordinate(r);(null===i||i.compareTo(t)>0)&&(i=t,n=r)}return n}}static extend(e,t,n){const i=e.create(n,t.getDimension()),r=t.size();if(CoordinateSequences.copy(t,0,i,0,r),r>0)for(let e=r;e<n;e++)CoordinateSequences.copy(t,r-1,i,e,1);return i}static reverse(e){const t=e.size()-1,n=Math.trunc(t/2);for(let i=0;i<=n;i++)CoordinateSequences.swap(e,i,t-i)}static swap(e,t,n){if(t===n)return null;for(let i=0;i<e.getDimension();i++){const r=e.getOrdinate(t,i);e.setOrdinate(t,i,e.getOrdinate(n,i)),e.setOrdinate(n,i,r)}}static copy(e,t,n,i,r){for(let o=0;o<r;o++)CoordinateSequences.copyCoord(e,t+o,n,i+o)}static ensureValidRing(e,t){const n=t.size();if(0===n)return t;if(n<=3)return CoordinateSequences.createClosedRing(e,t,4);return t.getOrdinate(0,CoordinateSequence.X)===t.getOrdinate(n-1,CoordinateSequence.X)&&t.getOrdinate(0,CoordinateSequence.Y)===t.getOrdinate(n-1,CoordinateSequence.Y)?t:CoordinateSequences.createClosedRing(e,t,n+1)}static indexOf(e,t){for(let n=0;n<t.size();n++)if(e.x===t.getOrdinate(n,CoordinateSequence.X)&&e.y===t.getOrdinate(n,CoordinateSequence.Y))return n;return-1}static createClosedRing(e,t,n){const i=e.create(n,t.getDimension()),r=t.size();CoordinateSequences.copy(t,0,i,0,r);for(let e=r;e<n;e++)CoordinateSequences.copy(t,0,i,e,1);return i}static minCoordinate(e){let t=null;for(let n=0;n<e.size();n++){const i=e.getCoordinate(n);(null===t||t.compareTo(i)>0)&&(t=i)}return t}}class UnsupportedOperationException extends Exception{constructor(e){super(e),this.name=Object.keys({UnsupportedOperationException:UnsupportedOperationException})[0]}}class Character{static isWhitespace(e){return e<=32&&e>=0||127===e}static toUpperCase(e){return e.toUpperCase()}}class Dimension{static toDimensionSymbol(e){switch(e){case Dimension.FALSE:return Dimension.SYM_FALSE;case Dimension.TRUE:return Dimension.SYM_TRUE;case Dimension.DONTCARE:return Dimension.SYM_DONTCARE;case Dimension.P:return Dimension.SYM_P;case Dimension.L:return Dimension.SYM_L;case Dimension.A:return Dimension.SYM_A}throw new IllegalArgumentException("Unknown dimension value: "+e)}static toDimensionValue(e){switch(Character.toUpperCase(e)){case Dimension.SYM_FALSE:return Dimension.FALSE;case Dimension.SYM_TRUE:return Dimension.TRUE;case Dimension.SYM_DONTCARE:return Dimension.DONTCARE;case Dimension.SYM_P:return Dimension.P;case Dimension.SYM_L:return Dimension.L;case Dimension.SYM_A:return Dimension.A}throw new IllegalArgumentException("Unknown dimension symbol: "+e)}}Dimension.P=0,Dimension.L=1,Dimension.A=2,Dimension.FALSE=-1,Dimension.TRUE=-2,Dimension.DONTCARE=-3,Dimension.SYM_FALSE="F",Dimension.SYM_TRUE="T",Dimension.SYM_DONTCARE="*",Dimension.SYM_P="0",Dimension.SYM_L="1",Dimension.SYM_A="2";class GeometryFilter{filter(e){}}class CoordinateSequenceFilter{filter(e,t){}isDone(){}isGeometryChanged(){}}class LineString extends Geometry{constructor(){super(),LineString.constructor_.apply(this,arguments)}static constructor_(){if(this._points=null,0===arguments.length);else if(2===arguments.length){const e=arguments[0],t=arguments[1];Geometry.constructor_.call(this,t),this.init(e)}}computeEnvelopeInternal(){return this.isEmpty()?new Envelope:this._points.expandEnvelope(new Envelope)}isRing(){return this.isClosed()&&this.isSimple()}getCoordinates(){return this._points.toCoordinateArray()}copyInternal(){return new LineString(this._points.copy(),this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof Geometry){const e=arguments[0],t=arguments[1];if(!this.isEquivalentClass(e))return!1;const n=e;if(this._points.size()!==n._points.size())return!1;for(let e=0;e<this._points.size();e++)if(!this.equal(this._points.getCoordinate(e),n._points.getCoordinate(e),t))return!1;return!0}return super.equalsExact.apply(this,arguments)}normalize(){for(let e=0;e<Math.trunc(this._points.size()/2);e++){const t=this._points.size()-1-e;if(!this._points.getCoordinate(e).equals(this._points.getCoordinate(t))){if(this._points.getCoordinate(e).compareTo(this._points.getCoordinate(t))>0){const e=this._points.copy();CoordinateSequences.reverse(e),this._points=e}return null}}}getCoordinate(){return this.isEmpty()?null:this._points.getCoordinate(0)}getBoundaryDimension(){return this.isClosed()?Dimension.FALSE:0}isClosed(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))}reverseInternal(){const e=this._points.copy();return CoordinateSequences.reverse(e),this.getFactory().createLineString(e)}getEndPoint(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)}getTypeCode(){return Geometry.TYPECODE_LINESTRING}getDimension(){return 1}getLength(){return Length.ofLine(this._points)}getNumPoints(){return this._points.size()}compareToSameClass(){if(1===arguments.length){const e=arguments[0];let t=0,n=0;for(;t<this._points.size()&&n<e._points.size();){const i=this._points.getCoordinate(t).compareTo(e._points.getCoordinate(n));if(0!==i)return i;t++,n++}return t<this._points.size()?1:n<e._points.size()?-1:0}if(2===arguments.length){const e=arguments[0];return arguments[1].compare(this._points,e._points)}}apply(){if(b(arguments[0],CoordinateFilter)){const e=arguments[0];for(let t=0;t<this._points.size();t++)e.filter(this._points.getCoordinate(t))}else if(b(arguments[0],CoordinateSequenceFilter)){const e=arguments[0];if(0===this._points.size())return null;for(let t=0;t<this._points.size()&&(e.filter(this._points,t),!e.isDone());t++);e.isGeometryChanged()&&this.geometryChanged()}else if(b(arguments[0],GeometryFilter)){arguments[0].filter(this)}else if(b(arguments[0],GeometryComponentFilter)){arguments[0].filter(this)}}getBoundary(){throw new UnsupportedOperationException}isEquivalentClass(e){return e instanceof LineString}getCoordinateN(e){return this._points.getCoordinate(e)}getGeometryType(){return Geometry.TYPENAME_LINESTRING}getCoordinateSequence(){return this._points}isEmpty(){return 0===this._points.size()}init(e){if(null===e&&(e=this.getFactory().getCoordinateSequenceFactory().create([])),1===e.size())throw new IllegalArgumentException("Invalid number of points in LineString (found "+e.size()+" - must be 0 or >= 2)");this._points=e}isCoordinate(e){for(let t=0;t<this._points.size();t++)if(this._points.getCoordinate(t).equals(e))return!0;return!1}getStartPoint(){return this.isEmpty()?null:this.getPointN(0)}getPointN(e){return this.getFactory().createPoint(this._points.getCoordinate(e))}get interfaces_(){return[Lineal]}}class Collection{add(){}addAll(){}isEmpty(){}iterator(){}size(){}toArray(){}remove(){}}class IndexOutOfBoundsException extends Exception{constructor(e){super(e),this.name=Object.keys({IndexOutOfBoundsException:IndexOutOfBoundsException})[0]}}class List extends Collection{get(){}set(){}isEmpty(){}}class NoSuchElementException extends Exception{constructor(e){super(e),this.name=Object.keys({NoSuchElementException:NoSuchElementException})[0]}}class ArrayList extends List{constructor(e){super(),this.array=[],e instanceof Collection&&this.addAll(e)}get interfaces_(){return[List,Collection]}ensureCapacity(){}add(e){return 1===arguments.length?this.array.push(e):this.array.splice(arguments[0],0,arguments[1]),!0}clear(){this.array=[]}addAll(e){for(const t of e)this.array.push(t)}set(e,t){const n=this.array[e];return this.array[e]=t,n}iterator(){return new S(this)}get(e){if(e<0||e>=this.size())throw new IndexOutOfBoundsException;return this.array[e]}isEmpty(){return 0===this.array.length}sort(e){e?this.array.sort(((t,n)=>e.compare(t,n))):this.array.sort()}size(){return this.array.length}toArray(){return this.array.slice()}remove(e){for(let t=0,n=this.array.length;t<n;t++)if(this.array[t]===e)return!!this.array.splice(t,1);return!1}[Symbol.iterator](){return this.array.values()}}let S=class Iterator{constructor(e){this.arrayList=e,this.position=0}next(){if(this.position===this.arrayList.size())throw new NoSuchElementException;return this.arrayList.get(this.position++)}hasNext(){return this.position<this.arrayList.size()}set(e){return this.arrayList.set(this.position-1,e)}remove(){this.arrayList.remove(this.arrayList.get(this.position))}};class CoordinateList extends ArrayList{constructor(){super(),CoordinateList.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length);else if(1===arguments.length){const e=arguments[0];this.ensureCapacity(e.length),this.add(e,!0)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.ensureCapacity(e.length),this.add(e,t)}}getCoordinate(e){return this.get(e)}addAll(){if(2===arguments.length&&"boolean"==typeof arguments[1]&&b(arguments[0],Collection)){const e=arguments[1];let t=!1;for(let n=arguments[0].iterator();n.hasNext();)this.add(n.next(),e),t=!0;return t}return super.addAll.apply(this,arguments)}clone(){const e=super.clone.call(this);for(let t=0;t<this.size();t++)e.add(t,this.get(t).clone());return e}toCoordinateArray(){if(0===arguments.length)return this.toArray(CoordinateList.coordArrayType);if(1===arguments.length){if(arguments[0])return this.toArray(CoordinateList.coordArrayType);const e=this.size(),t=new Array(e).fill(null);for(let n=0;n<e;n++)t[n]=this.get(e-n-1);return t}}add(){if(1===arguments.length){const e=arguments[0];return super.add.call(this,e)}if(2===arguments.length){if(arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){const e=arguments[0],t=arguments[1];return this.add(e,t,!0),!0}if(arguments[0]instanceof Coordinate&&"boolean"==typeof arguments[1]){const e=arguments[0];if(!arguments[1]&&this.size()>=1){if(this.get(this.size()-1).equals2D(e))return null}super.add.call(this,e)}else if(arguments[0]instanceof Object&&"boolean"==typeof arguments[1]){const e=arguments[0],t=arguments[1];return this.add(e,t),!0}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){const e=arguments[0],t=arguments[1];if(arguments[2])for(let n=0;n<e.length;n++)this.add(e[n],t);else for(let n=e.length-1;n>=0;n--)this.add(e[n],t);return!0}if("boolean"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof Coordinate){const e=arguments[0],t=arguments[1];if(!arguments[2]){const n=this.size();if(n>0){if(e>0){if(this.get(e-1).equals2D(t))return null}if(e<n){if(this.get(e).equals2D(t))return null}}}super.add.call(this,e,t)}}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];let r=1;n>i&&(r=-1);for(let o=n;o!==i;o+=r)this.add(e[o],t);return!0}}closeRing(){if(this.size()>0){const e=this.get(0).copy();this.add(e,!1)}}}CoordinateList.coordArrayType=new Array(0).fill(null);class CoordinateSequenceFactory{create(){if(1===arguments.length)arguments[0]instanceof Array||b(arguments[0],CoordinateSequence);else if(2===arguments.length);else if(3===arguments.length){const e=arguments[0],t=arguments[1];return this.create(e,t)}}}class Puntal{}class Point extends Geometry{constructor(){super(),Point.constructor_.apply(this,arguments)}static constructor_(){this._coordinates=null;const e=arguments[0],t=arguments[1];Geometry.constructor_.call(this,t),this.init(e)}computeEnvelopeInternal(){if(this.isEmpty())return new Envelope;const e=new Envelope;return e.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0)),e}getCoordinates(){return this.isEmpty()?[]:[this.getCoordinate()]}copyInternal(){return new Point(this._coordinates.copy(),this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof Geometry){const e=arguments[0],t=arguments[1];return!!this.isEquivalentClass(e)&&(!(!this.isEmpty()||!e.isEmpty())||this.isEmpty()===e.isEmpty()&&this.equal(e.getCoordinate(),this.getCoordinate(),t))}return super.equalsExact.apply(this,arguments)}normalize(){}getCoordinate(){return 0!==this._coordinates.size()?this._coordinates.getCoordinate(0):null}getBoundaryDimension(){return Dimension.FALSE}reverseInternal(){return this.getFactory().createPoint(this._coordinates.copy())}getTypeCode(){return Geometry.TYPECODE_POINT}getDimension(){return 0}getNumPoints(){return this.isEmpty()?0:1}getX(){if(null===this.getCoordinate())throw new IllegalStateException("getX called on empty Point");return this.getCoordinate().x}compareToSameClass(){if(1===arguments.length){const e=arguments[0];return this.getCoordinate().compareTo(e.getCoordinate())}if(2===arguments.length){const e=arguments[0];return arguments[1].compare(this._coordinates,e._coordinates)}}apply(){if(b(arguments[0],CoordinateFilter)){const e=arguments[0];if(this.isEmpty())return null;e.filter(this.getCoordinate())}else if(b(arguments[0],CoordinateSequenceFilter)){const e=arguments[0];if(this.isEmpty())return null;e.filter(this._coordinates,0),e.isGeometryChanged()&&this.geometryChanged()}else if(b(arguments[0],GeometryFilter)){arguments[0].filter(this)}else if(b(arguments[0],GeometryComponentFilter)){arguments[0].filter(this)}}getBoundary(){return this.getFactory().createGeometryCollection()}getGeometryType(){return Geometry.TYPENAME_POINT}getCoordinateSequence(){return this._coordinates}getY(){if(null===this.getCoordinate())throw new IllegalStateException("getY called on empty Point");return this.getCoordinate().y}isEmpty(){return 0===this._coordinates.size()}init(e){null===e&&(e=this.getFactory().getCoordinateSequenceFactory().create([])),Assert.isTrue(e.size()<=1),this._coordinates=e}isSimple(){return!0}get interfaces_(){return[Puntal]}}class Area{static ofRing(){if(arguments[0]instanceof Array){const e=arguments[0];return Math.abs(Area.ofRingSigned(e))}if(b(arguments[0],CoordinateSequence)){const e=arguments[0];return Math.abs(Area.ofRingSigned(e))}}static ofRingSigned(){if(arguments[0]instanceof Array){const e=arguments[0];if(e.length<3)return 0;let t=0;const n=e[0].x;for(let i=1;i<e.length-1;i++){const r=e[i].x-n,o=e[i+1].y;t+=r*(e[i-1].y-o)}return t/2}if(b(arguments[0],CoordinateSequence)){const e=arguments[0],t=e.size();if(t<3)return 0;const n=new Coordinate,i=new Coordinate,r=new Coordinate;e.getCoordinate(0,i),e.getCoordinate(1,r);const o=i.x;r.x-=o;let a=0;for(let s=1;s<t-1;s++)n.y=i.y,i.x=r.x,i.y=r.y,e.getCoordinate(s+1,r),r.x-=o,a+=i.x*(n.y-r.y);return a/2}}}class Arrays{static sort(){const e=arguments[0];if(1===arguments.length)e.sort(((e,t)=>e.compareTo(t)));else if(2===arguments.length)e.sort(((e,t)=>arguments[1].compare(e,t)));else if(3===arguments.length){const t=e.slice(arguments[1],arguments[2]);t.sort();const n=e.slice(0,arguments[1]).concat(t,e.slice(arguments[2],e.length));e.splice(0,e.length);for(const t of n)e.push(t)}else if(4===arguments.length){const t=e.slice(arguments[1],arguments[2]);t.sort(((e,t)=>arguments[3].compare(e,t)));const n=e.slice(0,arguments[1]).concat(t,e.slice(arguments[2],e.length));e.splice(0,e.length);for(const t of n)e.push(t)}}static asList(e){const t=new ArrayList;for(const n of e)t.add(n);return t}static copyOf(e,t){return e.slice(0,t)}}class StringBuffer{constructor(e){this.str=e}append(e){this.str+=e}setCharAt(e,t){this.str=this.str.substr(0,e)+t+this.str.substr(e+1)}toString(){return this.str}}class Integer{constructor(e){this.value=e}intValue(){return this.value}compareTo(e){return this.value<e?-1:this.value>e?1:0}static compare(e,t){return e<t?-1:e>t?1:0}static isNan(e){return Number.isNaN(e)}static valueOf(e){return new Integer(e)}}class DD{constructor(){DD.constructor_.apply(this,arguments)}static constructor_(){if(this._hi=0,this._lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if("number"==typeof arguments[0]){const e=arguments[0];this.init(e)}else if(arguments[0]instanceof DD){const e=arguments[0];this.init(e)}else if("string"==typeof arguments[0]){const e=arguments[0];DD.constructor_.call(this,DD.parse(e))}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.init(e,t)}}static determinant(){if("number"==typeof arguments[3]&&"number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];return DD.determinant(DD.valueOf(e),DD.valueOf(t),DD.valueOf(n),DD.valueOf(i))}if(arguments[3]instanceof DD&&arguments[2]instanceof DD&&arguments[0]instanceof DD&&arguments[1]instanceof DD){const e=arguments[1],t=arguments[2],n=arguments[3];return arguments[0].multiply(n).selfSubtract(e.multiply(t))}}static sqr(e){return DD.valueOf(e).selfMultiply(e)}static valueOf(){if("string"==typeof arguments[0]){const e=arguments[0];return DD.parse(e)}if("number"==typeof arguments[0]){return new DD(arguments[0])}}static sqrt(e){return DD.valueOf(e).sqrt()}static parse(e){let t=0;const n=e.length;for(;Character.isWhitespace(e.charAt(t));)t++;let i=!1;if(t<n){const n=e.charAt(t);"-"!==n&&"+"!==n||(t++,"-"===n&&(i=!0))}const r=new DD;let o=0,a=0,s=0,l=!1;for(;!(t>=n);){const n=e.charAt(t);if(t++,Character.isDigit(n)){const e=n-"0";r.selfMultiply(DD.TEN),r.selfAdd(e),o++}else{if("."!==n){if("e"===n||"E"===n){const n=e.substring(t);try{s=Integer.parseInt(n)}catch(t){throw t instanceof NumberFormatException?new NumberFormatException("Invalid exponent "+n+" in string "+e):t}break}throw new NumberFormatException("Unexpected character '"+n+"' at position "+t+" in string "+e)}a=o,l=!0}}let c=r;l||(a=o);const h=o-a-s;if(0===h)c=r;else if(h>0){const e=DD.TEN.pow(h);c=r.divide(e)}else if(h<0){const e=DD.TEN.pow(-h);c=r.multiply(e)}return i?c.negate():c}static createNaN(){return new DD(p.NaN,p.NaN)}static copy(e){return new DD(e)}static magnitude(e){const t=Math.abs(e),n=Math.log(t)/Math.log(10);let i=Math.trunc(Math.floor(n));return 10*Math.pow(10,i)<=t&&(i+=1),i}static stringOfChar(e,t){const n=new StringBuffer;for(let i=0;i<t;i++)n.append(e);return n.toString()}le(e){return this._hi<e._hi||this._hi===e._hi&&this._lo<=e._lo}extractSignificantDigits(e,t){let n=this.abs(),i=DD.magnitude(n._hi);const r=DD.TEN.pow(i);n=n.divide(r),n.gt(DD.TEN)?(n=n.divide(DD.TEN),i+=1):n.lt(DD.ONE)&&(n=n.multiply(DD.TEN),i-=1);const o=i+1,a=new StringBuffer,s=DD.MAX_PRINT_DIGITS-1;for(let t=0;t<=s;t++){e&&t===o&&a.append(".");const i=Math.trunc(n._hi);if(i<0)break;let r=!1,l=0;i>9?(r=!0,l="9"):l="0"+i,a.append(l),n=n.subtract(DD.valueOf(i)).multiply(DD.TEN),r&&n.selfAdd(DD.TEN);let c=!0;const h=DD.magnitude(n._hi);if(h<0&&Math.abs(h)>=s-t&&(c=!1),!c)break}return t[0]=i,a.toString()}sqr(){return this.multiply(this)}doubleValue(){return this._hi+this._lo}subtract(){if(arguments[0]instanceof DD){const e=arguments[0];return this.add(e.negate())}if("number"==typeof arguments[0]){const e=arguments[0];return this.add(-e)}}equals(){if(1===arguments.length&&arguments[0]instanceof DD){const e=arguments[0];return this._hi===e._hi&&this._lo===e._lo}}isZero(){return 0===this._hi&&0===this._lo}selfSubtract(){if(arguments[0]instanceof DD){const e=arguments[0];return this.isNaN()?this:this.selfAdd(-e._hi,-e._lo)}if("number"==typeof arguments[0]){const e=arguments[0];return this.isNaN()?this:this.selfAdd(-e,0)}}getSpecialNumberString(){return this.isZero()?"0.0":this.isNaN()?"NaN ":null}min(e){return this.le(e)?this:e}selfDivide(){if(1===arguments.length){if(arguments[0]instanceof DD){const e=arguments[0];return this.selfDivide(e._hi,e._lo)}if("number"==typeof arguments[0]){const e=arguments[0];return this.selfDivide(e,0)}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];let n=null,i=null,r=null,o=null,a=null,s=null,l=null,c=null;return a=this._hi/e,s=DD.SPLIT*a,n=s-a,c=DD.SPLIT*e,n=s-n,i=a-n,r=c-e,l=a*e,r=c-r,o=e-r,c=n*r-l+n*o+i*r+i*o,s=(this._hi-l-c+this._lo-a*t)/e,c=a+s,this._hi=c,this._lo=a-c+s,this}}dump(){return"DD<"+this._hi+", "+this._lo+">"}divide(){if(arguments[0]instanceof DD){const e=arguments[0];let t=null,n=null,i=null,r=null,o=null,a=null,s=null,l=null;o=this._hi/e._hi,a=DD.SPLIT*o,t=a-o,l=DD.SPLIT*e._hi,t=a-t,n=o-t,i=l-e._hi,s=o*e._hi,i=l-i,r=e._hi-i,l=t*i-s+t*r+n*i+n*r,a=(this._hi-s-l+this._lo-o*e._lo)/e._hi,l=o+a;return new DD(l,o-l+a)}if("number"==typeof arguments[0]){const e=arguments[0];return p.isNaN(e)?DD.createNaN():DD.copy(this).selfDivide(e,0)}}ge(e){return this._hi>e._hi||this._hi===e._hi&&this._lo>=e._lo}pow(e){if(0===e)return DD.valueOf(1);let t=new DD(this),n=DD.valueOf(1),i=Math.abs(e);if(i>1)for(;i>0;)i%2==1&&n.selfMultiply(t),i/=2,i>0&&(t=t.sqr());else n=t;return e<0?n.reciprocal():n}ceil(){if(this.isNaN())return DD.NaN;const e=Math.ceil(this._hi);let t=0;return e===this._hi&&(t=Math.ceil(this._lo)),new DD(e,t)}compareTo(e){const t=e;return this._hi<t._hi?-1:this._hi>t._hi?1:this._lo<t._lo?-1:this._lo>t._lo?1:0}rint(){if(this.isNaN())return this;return this.add(.5).floor()}setValue(){if(arguments[0]instanceof DD){const e=arguments[0];return this.init(e),this}if("number"==typeof arguments[0]){const e=arguments[0];return this.init(e),this}}max(e){return this.ge(e)?this:e}sqrt(){if(this.isZero())return DD.valueOf(0);if(this.isNegative())return DD.NaN;const e=1/Math.sqrt(this._hi),t=this._hi*e,n=DD.valueOf(t),i=this.subtract(n.sqr())._hi*(.5*e);return n.add(i)}selfAdd(){if(1===arguments.length){if(arguments[0]instanceof DD){const e=arguments[0];return this.selfAdd(e._hi,e._lo)}if("number"==typeof arguments[0]){const e=arguments[0];let t=null,n=null,i=null,r=null,o=null,a=null;return i=this._hi+e,o=i-this._hi,r=i-o,r=e-o+(this._hi-r),a=r+this._lo,t=i+a,n=a+(i-t),this._hi=t+n,this._lo=n+(t-this._hi),this}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];let n=null,i=null,r=null,o=null,a=null,s=null,l=null,c=null;a=this._hi+e,r=this._lo+t,l=a-this._hi,c=r-this._lo,s=a-l,o=r-c,s=e-l+(this._hi-s),o=t-c+(this._lo-o),l=s+r,n=a+l,i=l+(a-n),l=o+i;const h=n+l,u=l+(n-h);return this._hi=h,this._lo=u,this}}selfMultiply(){if(1===arguments.length){if(arguments[0]instanceof DD){const e=arguments[0];return this.selfMultiply(e._hi,e._lo)}if("number"==typeof arguments[0]){const e=arguments[0];return this.selfMultiply(e,0)}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];let n=null,i=null,r=null,o=null,a=null,s=null;a=DD.SPLIT*this._hi,n=a-this._hi,s=DD.SPLIT*e,n=a-n,i=this._hi-n,r=s-e,a=this._hi*e,r=s-r,o=e-r,s=n*r-a+n*o+i*r+i*o+(this._hi*t+this._lo*e);const l=a+s;n=a-l;const c=s+n;return this._hi=l,this._lo=c,this}}selfSqr(){return this.selfMultiply(this)}floor(){if(this.isNaN())return DD.NaN;const e=Math.floor(this._hi);let t=0;return e===this._hi&&(t=Math.floor(this._lo)),new DD(e,t)}negate(){return this.isNaN()?this:new DD(-this._hi,-this._lo)}clone(){try{return null}catch(e){if(e instanceof CloneNotSupportedException)return null;throw e}}multiply(){if(arguments[0]instanceof DD){const e=arguments[0];return e.isNaN()?DD.createNaN():DD.copy(this).selfMultiply(e)}if("number"==typeof arguments[0]){const e=arguments[0];return p.isNaN(e)?DD.createNaN():DD.copy(this).selfMultiply(e,0)}}isNaN(){return p.isNaN(this._hi)}intValue(){return Math.trunc(this._hi)}toString(){const e=DD.magnitude(this._hi);return e>=-3&&e<=20?this.toStandardNotation():this.toSciNotation()}toStandardNotation(){const e=this.getSpecialNumberString();if(null!==e)return e;const t=new Array(1).fill(null),n=this.extractSignificantDigits(!0,t),i=t[0]+1;let r=n;if("."===n.charAt(0))r="0"+n;else if(i<0)r="0."+DD.stringOfChar("0",-i)+n;else if(-1===n.indexOf(".")){const e=i-n.length;r=n+DD.stringOfChar("0",e)+".0"}return this.isNegative()?"-"+r:r}reciprocal(){let e=null,t=null,n=null,i=null,r=null,o=null,a=null,s=null;r=1/this._hi,o=DD.SPLIT*r,e=o-r,s=DD.SPLIT*this._hi,e=o-e,t=r-e,n=s-this._hi,a=r*this._hi,n=s-n,i=this._hi-n,s=e*n-a+e*i+t*n+t*i,o=(1-a-s-r*this._lo)/this._hi;const l=r+o;return new DD(l,r-l+o)}toSciNotation(){if(this.isZero())return DD.SCI_NOT_ZERO;const e=this.getSpecialNumberString();if(null!==e)return e;const t=new Array(1).fill(null),n=this.extractSignificantDigits(!1,t),i=DD.SCI_NOT_EXPONENT_CHAR+t[0];if("0"===n.charAt(0))throw new IllegalStateException("Found leading zero: "+n);let r="";n.length>1&&(r=n.substring(1));const o=n.charAt(0)+"."+r;return this.isNegative()?"-"+o+i:o+i}abs(){return this.isNaN()?DD.NaN:this.isNegative()?this.negate():new DD(this)}isPositive(){return this._hi>0||0===this._hi&&this._lo>0}lt(e){return this._hi<e._hi||this._hi===e._hi&&this._lo<e._lo}add(){if(arguments[0]instanceof DD){const e=arguments[0];return DD.copy(this).selfAdd(e)}if("number"==typeof arguments[0]){const e=arguments[0];return DD.copy(this).selfAdd(e)}}init(){if(1===arguments.length){if("number"==typeof arguments[0]){const e=arguments[0];this._hi=e,this._lo=0}else if(arguments[0]instanceof DD){const e=arguments[0];this._hi=e._hi,this._lo=e._lo}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this._hi=e,this._lo=t}}gt(e){return this._hi>e._hi||this._hi===e._hi&&this._lo>e._lo}isNegative(){return this._hi<0||0===this._hi&&this._lo<0}trunc(){return this.isNaN()?DD.NaN:this.isPositive()?this.floor():this.ceil()}signum(){return this._hi>0?1:this._hi<0?-1:this._lo>0?1:this._lo<0?-1:0}get interfaces_(){return[m,d,g]}}DD.PI=new DD(3.141592653589793,12246467991473532e-32),DD.TWO_PI=new DD(6.283185307179586,24492935982947064e-32),DD.PI_2=new DD(1.5707963267948966,6123233995736766e-32),DD.E=new DD(2.718281828459045,14456468917292502e-32),DD.NaN=new DD(p.NaN,p.NaN),DD.EPS=123259516440783e-46,DD.SPLIT=134217729,DD.MAX_PRINT_DIGITS=32,DD.TEN=DD.valueOf(10),DD.ONE=DD.valueOf(1),DD.SCI_NOT_EXPONENT_CHAR="E",DD.SCI_NOT_ZERO="0.0E0";class CGAlgorithmsDD{static orientationIndex(e,t,n){const i=CGAlgorithmsDD.orientationIndexFilter(e,t,n);if(i<=1)return i;const r=DD.valueOf(t.x).selfAdd(-e.x),o=DD.valueOf(t.y).selfAdd(-e.y),a=DD.valueOf(n.x).selfAdd(-t.x),s=DD.valueOf(n.y).selfAdd(-t.y);return r.selfMultiply(s).selfSubtract(o.selfMultiply(a)).signum()}static signOfDet2x2(){if(arguments[3]instanceof DD&&arguments[2]instanceof DD&&arguments[0]instanceof DD&&arguments[1]instanceof DD){const e=arguments[1],t=arguments[2],n=arguments[3];return arguments[0].multiply(n).selfSubtract(e.multiply(t)).signum()}if("number"==typeof arguments[3]&&"number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=DD.valueOf(e),o=DD.valueOf(t),a=DD.valueOf(n),s=DD.valueOf(i);return r.multiply(s).selfSubtract(o.multiply(a)).signum()}}static intersection(e,t,n,i){const r=new DD(e.y).selfSubtract(t.y),o=new DD(t.x).selfSubtract(e.x),a=new DD(e.x).selfMultiply(t.y).selfSubtract(new DD(t.x).selfMultiply(e.y)),s=new DD(n.y).selfSubtract(i.y),l=new DD(i.x).selfSubtract(n.x),c=new DD(n.x).selfMultiply(i.y).selfSubtract(new DD(i.x).selfMultiply(n.y)),h=o.multiply(c).selfSubtract(l.multiply(a)),u=s.multiply(a).selfSubtract(r.multiply(c)),d=r.multiply(l).selfSubtract(s.multiply(o)),g=h.selfDivide(d).doubleValue(),m=u.selfDivide(d).doubleValue();return p.isNaN(g)||p.isInfinite(g)||p.isNaN(m)||p.isInfinite(m)?null:new Coordinate(g,m)}static orientationIndexFilter(e,t,n){let i=null;const r=(e.x-n.x)*(t.y-n.y),o=(e.y-n.y)*(t.x-n.x),a=r-o;if(r>0){if(o<=0)return CGAlgorithmsDD.signum(a);i=r+o}else{if(!(r<0))return CGAlgorithmsDD.signum(a);if(o>=0)return CGAlgorithmsDD.signum(a);i=-r-o}const s=CGAlgorithmsDD.DP_SAFE_EPSILON*i;return a>=s||-a>=s?CGAlgorithmsDD.signum(a):2}static signum(e){return e>0?1:e<0?-1:0}}CGAlgorithmsDD.DP_SAFE_EPSILON=1e-15;class Orientation{static index(e,t,n){return CGAlgorithmsDD.orientationIndex(e,t,n)}static isCCW(){if(arguments[0]instanceof Array){const e=arguments[0],t=e.length-1;if(t<3)throw new IllegalArgumentException("Ring has fewer than 4 points, so orientation cannot be determined");let n=e[0],i=0;for(let r=1;r<=t;r++){const t=e[r];t.y>n.y&&(n=t,i=r)}let r=i;do{r-=1,r<0&&(r=t)}while(e[r].equals2D(n)&&r!==i);let o=i;do{o=(o+1)%t}while(e[o].equals2D(n)&&o!==i);const a=e[r],s=e[o];if(a.equals2D(n)||s.equals2D(n)||a.equals2D(s))return!1;const l=Orientation.index(a,n,s);let c=null;return c=0===l?a.x>s.x:l>0,c}if(b(arguments[0],CoordinateSequence)){const e=arguments[0],t=e.size()-1;if(t<3)throw new IllegalArgumentException("Ring has fewer than 4 points, so orientation cannot be determined");let n=e.getCoordinate(0),i=0;for(let r=1;r<=t;r++){const t=e.getCoordinate(r);t.y>n.y&&(n=t,i=r)}let r=null,o=i;do{o-=1,o<0&&(o=t),r=e.getCoordinate(o)}while(r.equals2D(n)&&o!==i);let a=null,s=i;do{s=(s+1)%t,a=e.getCoordinate(s)}while(a.equals2D(n)&&s!==i);if(r.equals2D(n)||a.equals2D(n)||r.equals2D(a))return!1;const l=Orientation.index(r,n,a);let c=null;return c=0===l?r.x>a.x:l>0,c}}}Orientation.CLOCKWISE=-1,Orientation.RIGHT=Orientation.CLOCKWISE,Orientation.COUNTERCLOCKWISE=1,Orientation.LEFT=Orientation.COUNTERCLOCKWISE,Orientation.COLLINEAR=0,Orientation.STRAIGHT=Orientation.COLLINEAR;class Polygonal{}class Polygon extends Geometry{constructor(){super(),Polygon.constructor_.apply(this,arguments)}static constructor_(){this._shell=null,this._holes=null;let e=arguments[0],t=arguments[1],n=arguments[2];if(Geometry.constructor_.call(this,n),null===e&&(e=this.getFactory().createLinearRing()),null===t&&(t=[]),Geometry.hasNullElements(t))throw new IllegalArgumentException("holes must not contain null elements");if(e.isEmpty()&&Geometry.hasNonEmptyElements(t))throw new IllegalArgumentException("shell is empty but holes are not");this._shell=e,this._holes=t}computeEnvelopeInternal(){return this._shell.getEnvelopeInternal()}getCoordinates(){if(this.isEmpty())return[];const e=new Array(this.getNumPoints()).fill(null);let t=-1;const n=this._shell.getCoordinates();for(let i=0;i<n.length;i++)t++,e[t]=n[i];for(let n=0;n<this._holes.length;n++){const i=this._holes[n].getCoordinates();for(let n=0;n<i.length;n++)t++,e[t]=i[n]}return e}getArea(){let e=0;e+=Area.ofRing(this._shell.getCoordinateSequence());for(let t=0;t<this._holes.length;t++)e-=Area.ofRing(this._holes[t].getCoordinateSequence());return e}copyInternal(){const e=this._shell.copy(),t=new Array(this._holes.length).fill(null);for(let e=0;e<this._holes.length;e++)t[e]=this._holes[e].copy();return new Polygon(e,t,this._factory)}isRectangle(){if(0!==this.getNumInteriorRing())return!1;if(null===this._shell)return!1;if(5!==this._shell.getNumPoints())return!1;const e=this._shell.getCoordinateSequence(),t=this.getEnvelopeInternal();for(let n=0;n<5;n++){const i=e.getX(n);if(i!==t.getMinX()&&i!==t.getMaxX())return!1;const r=e.getY(n);if(r!==t.getMinY()&&r!==t.getMaxY())return!1}let n=e.getX(0),i=e.getY(0);for(let t=1;t<=4;t++){const r=e.getX(t),o=e.getY(t);if(r!==n===(o!==i))return!1;n=r,i=o}return!0}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof Geometry){const e=arguments[0],t=arguments[1];if(!this.isEquivalentClass(e))return!1;const n=e,i=this._shell,r=n._shell;if(!i.equalsExact(r,t))return!1;if(this._holes.length!==n._holes.length)return!1;for(let e=0;e<this._holes.length;e++)if(!this._holes[e].equalsExact(n._holes[e],t))return!1;return!0}return super.equalsExact.apply(this,arguments)}normalize(){if(0===arguments.length){this._shell=this.normalized(this._shell,!0);for(let e=0;e<this._holes.length;e++)this._holes[e]=this.normalized(this._holes[e],!1);Arrays.sort(this._holes)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];if(e.isEmpty())return null;const n=e.getCoordinateSequence(),i=CoordinateSequences.minCoordinateIndex(n,0,n.size()-2);CoordinateSequences.scroll(n,i,!0),Orientation.isCCW(n)===t&&CoordinateSequences.reverse(n)}}getCoordinate(){return this._shell.getCoordinate()}getNumInteriorRing(){return this._holes.length}getBoundaryDimension(){return 1}reverseInternal(){const e=this.getExteriorRing().reverse(),t=new Array(this.getNumInteriorRing()).fill(null);for(let e=0;e<t.length;e++)t[e]=this.getInteriorRingN(e).reverse();return this.getFactory().createPolygon(e,t)}getTypeCode(){return Geometry.TYPECODE_POLYGON}getDimension(){return 2}getLength(){let e=0;e+=this._shell.getLength();for(let t=0;t<this._holes.length;t++)e+=this._holes[t].getLength();return e}getNumPoints(){let e=this._shell.getNumPoints();for(let t=0;t<this._holes.length;t++)e+=this._holes[t].getNumPoints();return e}convexHull(){return this.getExteriorRing().convexHull()}normalized(e,t){const n=e.copy();return this.normalize(n,t),n}compareToSameClass(){if(1===arguments.length){const e=arguments[0],t=this._shell,n=e._shell;return t.compareToSameClass(n)}if(2===arguments.length){const e=arguments[1],t=arguments[0],n=this._shell,i=t._shell,r=n.compareToSameClass(i,e);if(0!==r)return r;const o=this.getNumInteriorRing(),a=t.getNumInteriorRing();let s=0;for(;s<o&&s<a;){const n=this.getInteriorRingN(s),i=t.getInteriorRingN(s),r=n.compareToSameClass(i,e);if(0!==r)return r;s++}return s<o?1:s<a?-1:0}}apply(){if(b(arguments[0],CoordinateFilter)){const e=arguments[0];this._shell.apply(e);for(let t=0;t<this._holes.length;t++)this._holes[t].apply(e)}else if(b(arguments[0],CoordinateSequenceFilter)){const e=arguments[0];if(this._shell.apply(e),!e.isDone())for(let t=0;t<this._holes.length&&(this._holes[t].apply(e),!e.isDone());t++);e.isGeometryChanged()&&this.geometryChanged()}else if(b(arguments[0],GeometryFilter)){arguments[0].filter(this)}else if(b(arguments[0],GeometryComponentFilter)){const e=arguments[0];e.filter(this),this._shell.apply(e);for(let t=0;t<this._holes.length;t++)this._holes[t].apply(e)}}getBoundary(){if(this.isEmpty())return this.getFactory().createMultiLineString();const e=new Array(this._holes.length+1).fill(null);e[0]=this._shell;for(let t=0;t<this._holes.length;t++)e[t+1]=this._holes[t];return e.length<=1?this.getFactory().createLinearRing(e[0].getCoordinateSequence()):this.getFactory().createMultiLineString(e)}getGeometryType(){return Geometry.TYPENAME_POLYGON}getExteriorRing(){return this._shell}isEmpty(){return this._shell.isEmpty()}getInteriorRingN(e){return this._holes[e]}get interfaces_(){return[Polygonal]}}let x=class Set extends Collection{contains(){}};class SortedSet extends x{}class TreeSet extends SortedSet{constructor(e){super(),this.array=[],e instanceof Collection&&this.addAll(e)}contains(e){for(const t of this.array)if(0===t.compareTo(e))return!0;return!1}add(e){if(this.contains(e))return!1;for(let t=0,n=this.array.length;t<n;t++){if(1===this.array[t].compareTo(e))return!!this.array.splice(t,0,e)}return this.array.push(e),!0}addAll(e){for(const t of e)this.add(t);return!0}remove(){throw new UnsupportedOperationException}size(){return this.array.length}isEmpty(){return 0===this.array.length}toArray(){return this.array.slice()}iterator(){return new I(this.array)}}let I=class Iterator{constructor(e){this.array=e,this.position=0}next(){if(this.position===this.array.length)throw new NoSuchElementException;return this.array[this.position++]}hasNext(){return this.position<this.array.length}remove(){throw new UnsupportedOperationException}};class GeometryCollection extends Geometry{constructor(){super(),GeometryCollection.constructor_.apply(this,arguments)}static constructor_(){if(this._geometries=null,0===arguments.length);else if(2===arguments.length){let e=arguments[0],t=arguments[1];if(Geometry.constructor_.call(this,t),null===e&&(e=[]),Geometry.hasNullElements(e))throw new IllegalArgumentException("geometries must not contain null elements");this._geometries=e}}computeEnvelopeInternal(){const e=new Envelope;for(let t=0;t<this._geometries.length;t++)e.expandToInclude(this._geometries[t].getEnvelopeInternal());return e}getGeometryN(e){return this._geometries[e]}getCoordinates(){const e=new Array(this.getNumPoints()).fill(null);let t=-1;for(let n=0;n<this._geometries.length;n++){const i=this._geometries[n].getCoordinates();for(let n=0;n<i.length;n++)t++,e[t]=i[n]}return e}getArea(){let e=0;for(let t=0;t<this._geometries.length;t++)e+=this._geometries[t].getArea();return e}copyInternal(){const e=new Array(this._geometries.length).fill(null);for(let t=0;t<e.length;t++)e[t]=this._geometries[t].copy();return new GeometryCollection(e,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof Geometry){const e=arguments[0],t=arguments[1];if(!this.isEquivalentClass(e))return!1;const n=e;if(this._geometries.length!==n._geometries.length)return!1;for(let e=0;e<this._geometries.length;e++)if(!this._geometries[e].equalsExact(n._geometries[e],t))return!1;return!0}return super.equalsExact.apply(this,arguments)}normalize(){for(let e=0;e<this._geometries.length;e++)this._geometries[e].normalize();Arrays.sort(this._geometries)}getCoordinate(){return this.isEmpty()?null:this._geometries[0].getCoordinate()}getBoundaryDimension(){let e=Dimension.FALSE;for(let t=0;t<this._geometries.length;t++)e=Math.max(e,this._geometries[t].getBoundaryDimension());return e}reverseInternal(){const e=this._geometries.length,t=new ArrayList(e);for(let n=0;n<e;n++)t.add(this._geometries[n].reverse());return this.getFactory().buildGeometry(t)}getTypeCode(){return Geometry.TYPECODE_GEOMETRYCOLLECTION}getDimension(){let e=Dimension.FALSE;for(let t=0;t<this._geometries.length;t++)e=Math.max(e,this._geometries[t].getDimension());return e}getLength(){let e=0;for(let t=0;t<this._geometries.length;t++)e+=this._geometries[t].getLength();return e}getNumPoints(){let e=0;for(let t=0;t<this._geometries.length;t++)e+=this._geometries[t].getNumPoints();return e}getNumGeometries(){return this._geometries.length}compareToSameClass(){if(1===arguments.length){const e=arguments[0],t=new TreeSet(Arrays.asList(this._geometries)),n=new TreeSet(Arrays.asList(e._geometries));return this.compare(t,n)}if(2===arguments.length){const e=arguments[1],t=arguments[0],n=this.getNumGeometries(),i=t.getNumGeometries();let r=0;for(;r<n&&r<i;){const n=this.getGeometryN(r),i=t.getGeometryN(r),o=n.compareToSameClass(i,e);if(0!==o)return o;r++}return r<n?1:r<i?-1:0}}apply(){if(b(arguments[0],CoordinateFilter)){const e=arguments[0];for(let t=0;t<this._geometries.length;t++)this._geometries[t].apply(e)}else if(b(arguments[0],CoordinateSequenceFilter)){const e=arguments[0];if(0===this._geometries.length)return null;for(let t=0;t<this._geometries.length&&(this._geometries[t].apply(e),!e.isDone());t++);e.isGeometryChanged()&&this.geometryChanged()}else if(b(arguments[0],GeometryFilter)){const e=arguments[0];e.filter(this);for(let t=0;t<this._geometries.length;t++)this._geometries[t].apply(e)}else if(b(arguments[0],GeometryComponentFilter)){const e=arguments[0];e.filter(this);for(let t=0;t<this._geometries.length;t++)this._geometries[t].apply(e)}}getBoundary(){return Geometry.checkNotGeometryCollection(this),Assert.shouldNeverReachHere(),null}getGeometryType(){return Geometry.TYPENAME_GEOMETRYCOLLECTION}isEmpty(){for(let e=0;e<this._geometries.length;e++)if(!this._geometries[e].isEmpty())return!1;return!0}}class MultiPoint extends GeometryCollection{constructor(){super(),MultiPoint.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0],t=arguments[1];GeometryCollection.constructor_.call(this,e,t)}copyInternal(){const e=new Array(this._geometries.length).fill(null);for(let t=0;t<e.length;t++)e[t]=this._geometries[t].copy();return new MultiPoint(e,this._factory)}isValid(){return!0}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof Geometry){const e=arguments[0],t=arguments[1];return!!this.isEquivalentClass(e)&&super.equalsExact.call(this,e,t)}return super.equalsExact.apply(this,arguments)}getCoordinate(){if(1===arguments.length&&Number.isInteger(arguments[0])){const e=arguments[0];return this._geometries[e].getCoordinate()}return super.getCoordinate.apply(this,arguments)}getBoundaryDimension(){return Dimension.FALSE}getTypeCode(){return Geometry.TYPECODE_MULTIPOINT}getDimension(){return 0}getBoundary(){return this.getFactory().createGeometryCollection()}getGeometryType(){return Geometry.TYPENAME_MULTIPOINT}get interfaces_(){return[Puntal]}}class LinearRing extends LineString{constructor(){super(),LinearRing.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0],t=arguments[1];LineString.constructor_.call(this,e,t),this.validateConstruction()}copyInternal(){return new LinearRing(this._points.copy(),this._factory)}getBoundaryDimension(){return Dimension.FALSE}isClosed(){return!!this.isEmpty()||super.isClosed.call(this)}reverseInternal(){const e=this._points.copy();return CoordinateSequences.reverse(e),this.getFactory().createLinearRing(e)}getTypeCode(){return Geometry.TYPECODE_LINEARRING}validateConstruction(){if(!this.isEmpty()&&!super.isClosed.call(this))throw new IllegalArgumentException("Points of LinearRing do not form a closed linestring");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<LinearRing.MINIMUM_VALID_SIZE)throw new IllegalArgumentException("Invalid number of points in LinearRing (found "+this.getCoordinateSequence().size()+" - must be 0 or >= 4)")}getGeometryType(){return Geometry.TYPENAME_LINEARRING}}LinearRing.MINIMUM_VALID_SIZE=4;class CoordinateXY extends Coordinate{constructor(){super(),CoordinateXY.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)Coordinate.constructor_.call(this);else if(1===arguments.length){if(arguments[0]instanceof CoordinateXY){const e=arguments[0];Coordinate.constructor_.call(this,e.x,e.y)}else if(arguments[0]instanceof Coordinate){const e=arguments[0];Coordinate.constructor_.call(this,e.x,e.y)}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];Coordinate.constructor_.call(this,e,t,Coordinate.NULL_ORDINATE)}}setOrdinate(e,t){switch(e){case CoordinateXY.X:this.x=t;break;case CoordinateXY.Y:this.y=t;break;default:throw new IllegalArgumentException("Invalid ordinate index: "+e)}}getZ(){return Coordinate.NULL_ORDINATE}getOrdinate(e){switch(e){case CoordinateXY.X:return this.x;case CoordinateXY.Y:return this.y}throw new IllegalArgumentException("Invalid ordinate index: "+e)}setZ(e){throw new IllegalArgumentException("CoordinateXY dimension 2 does not support z-ordinate")}copy(){return new CoordinateXY(this)}toString(){return"("+this.x+", "+this.y+")"}setCoordinate(e){this.x=e.x,this.y=e.y,this.z=e.getZ()}}CoordinateXY.X=0,CoordinateXY.Y=1,CoordinateXY.Z=-1,CoordinateXY.M=-1;class CoordinateXYM extends Coordinate{constructor(){super(),CoordinateXYM.constructor_.apply(this,arguments)}static constructor_(){if(this._m=null,0===arguments.length)Coordinate.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof CoordinateXYM){const e=arguments[0];Coordinate.constructor_.call(this,e.x,e.y),this._m=e._m}else if(arguments[0]instanceof Coordinate){const e=arguments[0];Coordinate.constructor_.call(this,e.x,e.y),this._m=this.getM()}}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];Coordinate.constructor_.call(this,e,t,Coordinate.NULL_ORDINATE),this._m=n}}getM(){return this._m}setOrdinate(e,t){switch(e){case CoordinateXYM.X:this.x=t;break;case CoordinateXYM.Y:this.y=t;break;case CoordinateXYM.M:this._m=t;break;default:throw new IllegalArgumentException("Invalid ordinate index: "+e)}}setM(e){this._m=e}getZ(){return Coordinate.NULL_ORDINATE}getOrdinate(e){switch(e){case CoordinateXYM.X:return this.x;case CoordinateXYM.Y:return this.y;case CoordinateXYM.M:return this._m}throw new IllegalArgumentException("Invalid ordinate index: "+e)}setZ(e){throw new IllegalArgumentException("CoordinateXY dimension 2 does not support z-ordinate")}copy(){return new CoordinateXYM(this)}toString(){return"("+this.x+", "+this.y+" m="+this.getM()+")"}setCoordinate(e){this.x=e.x,this.y=e.y,this.z=e.getZ(),this._m=e.getM()}}CoordinateXYM.X=0,CoordinateXYM.Y=1,CoordinateXYM.Z=-1,CoordinateXYM.M=2;class CoordinateXYZM extends Coordinate{constructor(){super(),CoordinateXYZM.constructor_.apply(this,arguments)}static constructor_(){if(this._m=null,0===arguments.length)Coordinate.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof CoordinateXYZM){const e=arguments[0];Coordinate.constructor_.call(this,e),this._m=e._m}else if(arguments[0]instanceof Coordinate){const e=arguments[0];Coordinate.constructor_.call(this,e),this._m=this.getM()}}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];Coordinate.constructor_.call(this,e,t,n),this._m=i}}getM(){return this._m}setOrdinate(e,t){switch(e){case Coordinate.X:this.x=t;break;case Coordinate.Y:this.y=t;break;case Coordinate.Z:this.z=t;break;case Coordinate.M:this._m=t;break;default:throw new IllegalArgumentException("Invalid ordinate index: "+e)}}setM(e){this._m=e}getOrdinate(e){switch(e){case Coordinate.X:return this.x;case Coordinate.Y:return this.y;case Coordinate.Z:return this.getZ();case Coordinate.M:return this.getM()}throw new IllegalArgumentException("Invalid ordinate index: "+e)}copy(){return new CoordinateXYZM(this)}toString(){return"("+this.x+", "+this.y+", "+this.getZ()+" m="+this.getM()+")"}setCoordinate(e){this.x=e.x,this.y=e.y,this.z=e.getZ(),this._m=e.getM()}}class Coordinates{static measures(e){return e instanceof CoordinateXY?0:e instanceof CoordinateXYM||e instanceof CoordinateXYZM?1:0}static dimension(e){return e instanceof CoordinateXY?2:e instanceof CoordinateXYM?3:e instanceof CoordinateXYZM?4:3}static create(){if(1===arguments.length){const e=arguments[0];return Coordinates.create(e,0)}if(2===arguments.length){const e=arguments[0],t=arguments[1];return 2===e?new CoordinateXY:3===e&&0===t?new Coordinate:3===e&&1===t?new CoordinateXYM:4===e&&1===t?new CoordinateXYZM:new Coordinate}}}class MathUtil{static log10(e){const t=Math.log(e);return p.isInfinite(t)||p.isNaN(t)?t:t/MathUtil.LOG_10}static min(e,t,n,i){let r=e;return t<r&&(r=t),n<r&&(r=n),i<r&&(r=i),r}static clamp(){if("number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1],n=arguments[2];return e<t?t:e>n?n:e}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const e=arguments[0],t=arguments[1],n=arguments[2];return e<t?t:e>n?n:e}}static wrap(e,t){return e<0?t- -e%t:e%t}static max(){if(3===arguments.length){const e=arguments[1],t=arguments[2];let n=arguments[0];return e>n&&(n=e),t>n&&(n=t),n}if(4===arguments.length){const e=arguments[1],t=arguments[2],n=arguments[3];let i=arguments[0];return e>i&&(i=e),t>i&&(i=t),n>i&&(i=n),i}}static average(e,t){return(e+t)/2}}MathUtil.LOG_10=Math.log(10);class System{static arraycopy(e,t,n,i,r){let o=0;for(let a=t;a<t+r;a++)n[i+o]=e[a],o++}static getProperty(e){return{"line.separator":"\n"}[e]}}class CoordinateArrays{static isRing(e){return!(e.length<4)&&!!e[0].equals2D(e[e.length-1])}static ptNotInList(e,t){for(let n=0;n<e.length;n++){const i=e[n];if(CoordinateArrays.indexOf(i,t)<0)return i}return null}static scroll(e,t){const n=CoordinateArrays.indexOf(t,e);if(n<0)return null;const i=new Array(e.length).fill(null);System.arraycopy(e,n,i,0,e.length-n),System.arraycopy(e,0,i,e.length-n,n),System.arraycopy(i,0,e,0,e.length)}static equals(){if(2===arguments.length){const e=arguments[0],t=arguments[1];if(e===t)return!0;if(null===e||null===t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!e[n].equals(t[n]))return!1;return!0}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];if(e===t)return!0;if(null===e||null===t)return!1;if(e.length!==t.length)return!1;for(let i=0;i<e.length;i++)if(0!==n.compare(e[i],t[i]))return!1;return!0}}static intersection(e,t){const n=new CoordinateList;for(let i=0;i<e.length;i++)t.intersects(e[i])&&n.add(e[i],!0);return n.toCoordinateArray()}static measures(e){if(null===e||0===e.length)return 0;let t=0;for(const n of e)t=Math.max(t,Coordinates.measures(n));return t}static hasRepeatedPoints(e){for(let t=1;t<e.length;t++)if(e[t-1].equals(e[t]))return!0;return!1}static removeRepeatedPoints(e){if(!CoordinateArrays.hasRepeatedPoints(e))return e;return new CoordinateList(e,!1).toCoordinateArray()}static reverse(e){const t=e.length-1,n=Math.trunc(t/2);for(let i=0;i<=n;i++){const n=e[i];e[i]=e[t-i],e[t-i]=n}}static removeNull(e){let t=0;for(let n=0;n<e.length;n++)null!==e[n]&&t++;const n=new Array(t).fill(null);if(0===t)return n;let i=0;for(let t=0;t<e.length;t++)null!==e[t]&&(n[i++]=e[t]);return n}static copyDeep(){if(1===arguments.length){const e=arguments[0],t=new Array(e.length).fill(null);for(let n=0;n<e.length;n++)t[n]=e[n].copy();return t}if(5===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=arguments[4];for(let o=0;o<r;o++)n[i+o]=e[t+o].copy()}}static isEqualReversed(e,t){for(let n=0;n<e.length;n++){const i=e[n],r=t[e.length-n-1];if(0!==i.compareTo(r))return!1}return!0}static envelope(e){const t=new Envelope;for(let n=0;n<e.length;n++)t.expandToInclude(e[n]);return t}static toCoordinateArray(e){return e.toArray(CoordinateArrays.coordArrayType)}static dimension(e){if(null===e||0===e.length)return 3;let t=0;for(const n of e)t=Math.max(t,Coordinates.dimension(n));return t}static atLeastNCoordinatesOrNothing(e,t){return t.length>=e?t:[]}static indexOf(e,t){for(let n=0;n<t.length;n++)if(e.equals(t[n]))return n;return-1}static increasingDirection(e){for(let t=0;t<Math.trunc(e.length/2);t++){const n=e.length-1-t,i=e[t].compareTo(e[n]);if(0!==i)return i}return 1}static compare(e,t){let n=0;for(;n<e.length&&n<t.length;){const i=e[n].compareTo(t[n]);if(0!==i)return i;n++}return n<t.length?-1:n<e.length?1:0}static minCoordinate(e){let t=null;for(let n=0;n<e.length;n++)(null===t||t.compareTo(e[n])>0)&&(t=e[n]);return t}static extract(e,t,n){t=MathUtil.clamp(t,0,e.length);let i=(n=MathUtil.clamp(n,-1,e.length))-t+1;n<0&&(i=0),t>=e.length&&(i=0),n<t&&(i=0);const r=new Array(i).fill(null);if(0===i)return r;let o=0;for(let i=t;i<=n;i++)r[o++]=e[i];return r}}CoordinateArrays.ForwardComparator=class ForwardComparator{compare(e,t){const n=e,i=t;return CoordinateArrays.compare(n,i)}get interfaces_(){return[f]}},CoordinateArrays.BidirectionalComparator=class BidirectionalComparator{compare(e,t){const n=e,i=t;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;const r=CoordinateArrays.compare(n,i);return CoordinateArrays.isEqualReversed(n,i)?0:r}OLDcompare(e,t){const n=e,i=t;if(n.length<i.length)return-1;if(n.length>i.length)return 1;if(0===n.length)return 0;const r=CoordinateArrays.increasingDirection(n),o=CoordinateArrays.increasingDirection(i);let a=r>0?0:n.length-1,s=o>0?0:n.length-1;for(let e=0;e<n.length;e++){const e=n[a].compareTo(i[s]);if(0!==e)return e;a+=r,s+=o}return 0}get interfaces_(){return[f]}},CoordinateArrays.coordArrayType=new Array(0).fill(null);class StringBuilder{constructor(e){this.str=e}append(e){this.str+=e}setCharAt(e,t){this.str=this.str.substr(0,e)+t+this.str.substr(e+1)}toString(){return this.str}}class CoordinateArraySequence{constructor(){CoordinateArraySequence.constructor_.apply(this,arguments)}static constructor_(){if(this._dimension=3,this._measures=0,this._coordinates=null,1===arguments.length){if(arguments[0]instanceof Array){const e=arguments[0];CoordinateArraySequence.constructor_.call(this,e,CoordinateArrays.dimension(e),CoordinateArrays.measures(e))}else if(Number.isInteger(arguments[0])){const e=arguments[0];this._coordinates=new Array(e).fill(null);for(let t=0;t<e;t++)this._coordinates[t]=new Coordinate}else if(b(arguments[0],CoordinateSequence)){const e=arguments[0];if(null===e)return this._coordinates=new Array(0).fill(null),null;this._dimension=e.getDimension(),this._measures=e.getMeasures(),this._coordinates=new Array(e.size()).fill(null);for(let t=0;t<this._coordinates.length;t++)this._coordinates[t]=e.getCoordinateCopy(t)}}else if(2===arguments.length){if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){const e=arguments[0],t=arguments[1];CoordinateArraySequence.constructor_.call(this,e,t,CoordinateArrays.measures(e))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const e=arguments[0],t=arguments[1];this._coordinates=new Array(e).fill(null),this._dimension=t;for(let n=0;n<e;n++)this._coordinates[n]=Coordinates.create(t)}}else if(3===arguments.length)if(Number.isInteger(arguments[2])&&arguments[0]instanceof Array&&Number.isInteger(arguments[1])){const e=arguments[0],t=arguments[1],n=arguments[2];this._dimension=t,this._measures=n,this._coordinates=null===e?new Array(0).fill(null):e}else if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const e=arguments[0],t=arguments[1],n=arguments[2];this._coordinates=new Array(e).fill(null),this._dimension=t,this._measures=n;for(let t=0;t<e;t++)this._coordinates[t]=this.createCoordinate()}}getM(e){return this.hasM()?this._coordinates[e].getM():p.NaN}setOrdinate(e,t,n){switch(t){case CoordinateSequence.X:this._coordinates[e].x=n;break;case CoordinateSequence.Y:this._coordinates[e].y=n;break;default:this._coordinates[e].setOrdinate(t,n)}}getZ(e){return this.hasZ()?this._coordinates[e].getZ():p.NaN}size(){return this._coordinates.length}getOrdinate(e,t){switch(t){case CoordinateSequence.X:return this._coordinates[e].x;case CoordinateSequence.Y:return this._coordinates[e].y;default:return this._coordinates[e].getOrdinate(t)}}getCoordinate(){if(1===arguments.length){const e=arguments[0];return this._coordinates[e]}if(2===arguments.length){const e=arguments[0];arguments[1].setCoordinate(this._coordinates[e])}}getCoordinateCopy(e){const t=this.createCoordinate();return t.setCoordinate(this._coordinates[e]),t}createCoordinate(){return Coordinates.create(this.getDimension(),this.getMeasures())}getDimension(){return this._dimension}getX(e){return this._coordinates[e].x}getMeasures(){return this._measures}expandEnvelope(e){for(let t=0;t<this._coordinates.length;t++)e.expandToInclude(this._coordinates[t]);return e}copy(){const e=new Array(this.size()).fill(null);for(let t=0;t<this._coordinates.length;t++){const n=this.createCoordinate();n.setCoordinate(this._coordinates[t]),e[t]=n}return new CoordinateArraySequence(e,this._dimension,this._measures)}toString(){if(this._coordinates.length>0){const e=new StringBuilder(17*this._coordinates.length);e.append("("),e.append(this._coordinates[0]);for(let t=1;t<this._coordinates.length;t++)e.append(", "),e.append(this._coordinates[t]);return e.append(")"),e.toString()}return"()"}getY(e){return this._coordinates[e].y}toCoordinateArray(){return this._coordinates}get interfaces_(){return[CoordinateSequence,m]}}class CoordinateArraySequenceFactory{static instance(){return CoordinateArraySequenceFactory.instanceObject}readResolve(){return CoordinateArraySequenceFactory.instance()}create(){if(1===arguments.length){if(arguments[0]instanceof Array){return new CoordinateArraySequence(arguments[0])}if(b(arguments[0],CoordinateSequence)){return new CoordinateArraySequence(arguments[0])}}else{if(2===arguments.length){let e=arguments[1];return e>3&&(e=3),e<2&&(e=2),new CoordinateArraySequence(arguments[0],e)}if(3===arguments.length){let e=arguments[2],t=arguments[1]-e;return e>1&&(e=1),t>3&&(t=3),t<2&&(t=2),new CoordinateArraySequence(arguments[0],t+e,e)}}}get interfaces_(){return[CoordinateSequenceFactory,m]}}CoordinateArraySequenceFactory.instanceObject=new CoordinateArraySequenceFactory;class MultiPolygon extends GeometryCollection{constructor(){super(),MultiPolygon.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0],t=arguments[1];GeometryCollection.constructor_.call(this,e,t)}copyInternal(){const e=new Array(this._geometries.length).fill(null);for(let t=0;t<e.length;t++)e[t]=this._geometries[t].copy();return new MultiPolygon(e,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof Geometry){const e=arguments[0],t=arguments[1];return!!this.isEquivalentClass(e)&&super.equalsExact.call(this,e,t)}return super.equalsExact.apply(this,arguments)}getBoundaryDimension(){return 1}getTypeCode(){return Geometry.TYPECODE_MULTIPOLYGON}getDimension(){return 2}getBoundary(){if(this.isEmpty())return this.getFactory().createMultiLineString();const e=new ArrayList;for(let t=0;t<this._geometries.length;t++){const n=this._geometries[t].getBoundary();for(let t=0;t<n.getNumGeometries();t++)e.add(n.getGeometryN(t))}const t=new Array(e.size()).fill(null);return this.getFactory().createMultiLineString(e.toArray(t))}getGeometryType(){return Geometry.TYPENAME_MULTIPOLYGON}get interfaces_(){return[Polygonal]}}let T=class Map{get(){}put(){}size(){}values(){}entrySet(){}};class HashSet extends x{constructor(e){super(),this.map=new Map,e instanceof Collection&&this.addAll(e)}contains(e){const t=e.hashCode?e.hashCode():e;return!!this.map.has(t)}add(e){const t=e.hashCode?e.hashCode():e;return!this.map.has(t)&&!!this.map.set(t,e)}addAll(e){for(const t of e)this.add(t);return!0}remove(){throw new UnsupportedOperationException}size(){return this.map.size}isEmpty(){return 0===this.map.size}toArray(){return Array.from(this.map.values())}iterator(){return new v(this.map)}[Symbol.iterator](){return this.map}}let v=class Iterator{constructor(e){this.iterator=e.values();const{done:t,value:n}=this.iterator.next();this.done=t,this.value=n}next(){if(this.done)throw new NoSuchElementException;const e=this.value,{done:t,value:n}=this.iterator.next();return this.done=t,this.value=n,e}hasNext(){return!this.done}remove(){throw new UnsupportedOperationException}};class HashMap extends T{constructor(){super(),this.map=new Map}get(e){return this.map.get(e)||null}put(e,t){return this.map.set(e,t),t}values(){const e=new ArrayList,t=this.map.values();let n=t.next();for(;!n.done;)e.add(n.value),n=t.next();return e}entrySet(){const e=new HashSet;return this.map.entries().forEach((t=>e.add(t))),e}size(){return this.map.size()}}class PrecisionModel{constructor(){PrecisionModel.constructor_.apply(this,arguments)}static constructor_(){if(this._modelType=null,this._scale=null,0===arguments.length)this._modelType=PrecisionModel.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof Type){const e=arguments[0];this._modelType=e,e===PrecisionModel.FIXED&&this.setScale(1)}else if("number"==typeof arguments[0]){const e=arguments[0];this._modelType=PrecisionModel.FIXED,this.setScale(e)}else if(arguments[0]instanceof PrecisionModel){const e=arguments[0];this._modelType=e._modelType,this._scale=e._scale}}static mostPrecise(e,t){return e.compareTo(t)>=0?e:t}equals(e){if(!(e instanceof PrecisionModel))return!1;const t=e;return this._modelType===t._modelType&&this._scale===t._scale}compareTo(e){const t=e,n=this.getMaximumSignificantDigits(),i=t.getMaximumSignificantDigits();return Integer.compare(n,i)}getScale(){return this._scale}isFloating(){return this._modelType===PrecisionModel.FLOATING||this._modelType===PrecisionModel.FLOATING_SINGLE}getType(){return this._modelType}toString(){let e="UNKNOWN";return this._modelType===PrecisionModel.FLOATING?e="Floating":this._modelType===PrecisionModel.FLOATING_SINGLE?e="Floating-Single":this._modelType===PrecisionModel.FIXED&&(e="Fixed (Scale="+this.getScale()+")"),e}makePrecise(){if("number"==typeof arguments[0]){const e=arguments[0];if(p.isNaN(e))return e;if(this._modelType===PrecisionModel.FLOATING_SINGLE){return e}return this._modelType===PrecisionModel.FIXED?Math.round(e*this._scale)/this._scale:e}if(arguments[0]instanceof Coordinate){const e=arguments[0];if(this._modelType===PrecisionModel.FLOATING)return null;e.x=this.makePrecise(e.x),e.y=this.makePrecise(e.y)}}getMaximumSignificantDigits(){let e=16;return this._modelType===PrecisionModel.FLOATING?e=16:this._modelType===PrecisionModel.FLOATING_SINGLE?e=6:this._modelType===PrecisionModel.FIXED&&(e=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),e}setScale(e){this._scale=Math.abs(e)}get interfaces_(){return[m,d]}}class Type{constructor(){Type.constructor_.apply(this,arguments)}static constructor_(){this._name=null;const e=arguments[0];this._name=e,Type.nameToTypeMap.put(e,this)}readResolve(){return Type.nameToTypeMap.get(this._name)}toString(){return this._name}get interfaces_(){return[m]}}Type.nameToTypeMap=new HashMap,PrecisionModel.Type=Type,PrecisionModel.FIXED=new Type("FIXED"),PrecisionModel.FLOATING=new Type("FLOATING"),PrecisionModel.FLOATING_SINGLE=new Type("FLOATING SINGLE"),PrecisionModel.maximumPreciseValue=9007199254740992;class MultiLineString extends GeometryCollection{constructor(){super(),MultiLineString.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0],t=arguments[1];GeometryCollection.constructor_.call(this,e,t)}copyInternal(){const e=new Array(this._geometries.length).fill(null);for(let t=0;t<e.length;t++)e[t]=this._geometries[t].copy();return new MultiLineString(e,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof Geometry){const e=arguments[0],t=arguments[1];return!!this.isEquivalentClass(e)&&super.equalsExact.call(this,e,t)}return super.equalsExact.apply(this,arguments)}getBoundaryDimension(){return this.isClosed()?Dimension.FALSE:0}isClosed(){if(this.isEmpty())return!1;for(let e=0;e<this._geometries.length;e++)if(!this._geometries[e].isClosed())return!1;return!0}getTypeCode(){return Geometry.TYPECODE_MULTILINESTRING}getDimension(){return 1}getBoundary(){throw new UnsupportedOperationException}getGeometryType(){return Geometry.TYPENAME_MULTILINESTRING}get interfaces_(){return[Lineal]}}class GeometryFactory{constructor(){GeometryFactory.constructor_.apply(this,arguments)}static constructor_(){if(this._precisionModel=null,this._coordinateSequenceFactory=null,this._SRID=null,0===arguments.length)GeometryFactory.constructor_.call(this,new PrecisionModel,0);else if(1===arguments.length){if(b(arguments[0],CoordinateSequenceFactory)){const e=arguments[0];GeometryFactory.constructor_.call(this,new PrecisionModel,0,e)}else if(arguments[0]instanceof PrecisionModel){const e=arguments[0];GeometryFactory.constructor_.call(this,e,0,GeometryFactory.getDefaultCoordinateSequenceFactory())}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];GeometryFactory.constructor_.call(this,e,t,GeometryFactory.getDefaultCoordinateSequenceFactory())}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this._precisionModel=e,this._coordinateSequenceFactory=n,this._SRID=t}}static toMultiPolygonArray(e){const t=new Array(e.size()).fill(null);return e.toArray(t)}static toGeometryArray(e){if(null===e)return null;const t=new Array(e.size()).fill(null);return e.toArray(t)}static getDefaultCoordinateSequenceFactory(){return CoordinateArraySequenceFactory.instance()}static toMultiLineStringArray(e){const t=new Array(e.size()).fill(null);return e.toArray(t)}static toLineStringArray(e){const t=new Array(e.size()).fill(null);return e.toArray(t)}static toMultiPointArray(e){const t=new Array(e.size()).fill(null);return e.toArray(t)}static toLinearRingArray(e){const t=new Array(e.size()).fill(null);return e.toArray(t)}static toPointArray(e){const t=new Array(e.size()).fill(null);return e.toArray(t)}static toPolygonArray(e){const t=new Array(e.size()).fill(null);return e.toArray(t)}static createPointFromInternalCoord(e,t){return t.getPrecisionModel().makePrecise(e),t.getFactory().createPoint(e)}createEmpty(e){switch(e){case-1:return this.createGeometryCollection();case 0:return this.createPoint();case 1:return this.createLineString();case 2:return this.createPolygon();default:throw new IllegalArgumentException("Invalid dimension: "+e)}}toGeometry(e){return e.isNull()?this.createPoint():e.getMinX()===e.getMaxX()&&e.getMinY()===e.getMaxY()?this.createPoint(new Coordinate(e.getMinX(),e.getMinY())):e.getMinX()===e.getMaxX()||e.getMinY()===e.getMaxY()?this.createLineString([new Coordinate(e.getMinX(),e.getMinY()),new Coordinate(e.getMaxX(),e.getMaxY())]):this.createPolygon(this.createLinearRing([new Coordinate(e.getMinX(),e.getMinY()),new Coordinate(e.getMinX(),e.getMaxY()),new Coordinate(e.getMaxX(),e.getMaxY()),new Coordinate(e.getMaxX(),e.getMinY()),new Coordinate(e.getMinX(),e.getMinY())]),null)}createLineString(){if(0===arguments.length)return this.createLineString(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){const e=arguments[0];return this.createLineString(null!==e?this.getCoordinateSequenceFactory().create(e):null)}if(b(arguments[0],CoordinateSequence)){return new LineString(arguments[0],this)}}}createMultiLineString(){if(0===arguments.length)return new MultiLineString(null,this);if(1===arguments.length){return new MultiLineString(arguments[0],this)}}buildGeometry(e){let t=null,n=!1,i=!1;for(let r=e.iterator();r.hasNext();){const e=r.next(),o=e.getTypeCode();null===t&&(t=o),o!==t&&(n=!0),e instanceof GeometryCollection&&(i=!0)}if(null===t)return this.createGeometryCollection();if(n||i)return this.createGeometryCollection(GeometryFactory.toGeometryArray(e));const r=e.iterator().next();if(e.size()>1){if(r instanceof Polygon)return this.createMultiPolygon(GeometryFactory.toPolygonArray(e));if(r instanceof LineString)return this.createMultiLineString(GeometryFactory.toLineStringArray(e));if(r instanceof Point)return this.createMultiPoint(GeometryFactory.toPointArray(e));Assert.shouldNeverReachHere("Unhandled geometry type: "+r.getGeometryType())}return r}createMultiPointFromCoords(e){return this.createMultiPoint(null!==e?this.getCoordinateSequenceFactory().create(e):null)}createPoint(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Coordinate){const e=arguments[0];return this.createPoint(null!==e?this.getCoordinateSequenceFactory().create([e]):null)}if(b(arguments[0],CoordinateSequence)){return new Point(arguments[0],this)}}}getCoordinateSequenceFactory(){return this._coordinateSequenceFactory}createPolygon(){if(0===arguments.length)return this.createPolygon(null,null);if(1===arguments.length){if(b(arguments[0],CoordinateSequence)){const e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof Array){const e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof LinearRing){const e=arguments[0];return this.createPolygon(e,null)}}else if(2===arguments.length){return new Polygon(arguments[0],arguments[1],this)}}getSRID(){return this._SRID}createGeometryCollection(){if(0===arguments.length)return new GeometryCollection(null,this);if(1===arguments.length){return new GeometryCollection(arguments[0],this)}}getPrecisionModel(){return this._precisionModel}createLinearRing(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){const e=arguments[0];return this.createLinearRing(null!==e?this.getCoordinateSequenceFactory().create(e):null)}if(b(arguments[0],CoordinateSequence)){return new LinearRing(arguments[0],this)}}}createMultiPolygon(){if(0===arguments.length)return new MultiPolygon(null,this);if(1===arguments.length){return new MultiPolygon(arguments[0],this)}}createMultiPoint(){if(0===arguments.length)return new MultiPoint(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){return new MultiPoint(arguments[0],this)}if(b(arguments[0],CoordinateSequence)){const e=arguments[0];if(null===e)return this.createMultiPoint(new Array(0).fill(null));const t=new Array(e.size()).fill(null);for(let n=0;n<e.size();n++){const i=this.getCoordinateSequenceFactory().create(1,e.getDimension(),e.getMeasures());CoordinateSequences.copy(e,n,i,0,1),t[n]=this.createPoint(i)}return this.createMultiPoint(t)}}}get interfaces_(){return[m]}}class GeometryTransformer{constructor(){GeometryTransformer.constructor_.apply(this,arguments)}static constructor_(){this._inputGeom=null,this._factory=null,this._pruneEmptyGeometry=!0,this._preserveGeometryCollectionType=!0,this._preserveCollections=!1,this._preserveType=!1}transformPoint(e,t){return this._factory.createPoint(this.transformCoordinates(e.getCoordinateSequence(),e))}transformPolygon(e,t){let n=!0;const i=this.transformLinearRing(e.getExteriorRing(),e);null!==i&&i instanceof LinearRing&&!i.isEmpty()||(n=!1);const r=new ArrayList;for(let t=0;t<e.getNumInteriorRing();t++){const i=this.transformLinearRing(e.getInteriorRingN(t),e);null===i||i.isEmpty()||(i instanceof LinearRing||(n=!1),r.add(i))}if(n)return this._factory.createPolygon(i,r.toArray([]));{const e=new ArrayList;return null!==i&&e.add(i),e.addAll(r),this._factory.buildGeometry(e)}}createCoordinateSequence(e){return this._factory.getCoordinateSequenceFactory().create(e)}getInputGeometry(){return this._inputGeom}transformMultiLineString(e,t){const n=new ArrayList;for(let t=0;t<e.getNumGeometries();t++){const i=this.transformLineString(e.getGeometryN(t),e);null!==i&&(i.isEmpty()||n.add(i))}return this._factory.buildGeometry(n)}transformCoordinates(e,t){return this.copy(e)}transformLineString(e,t){return this._factory.createLineString(this.transformCoordinates(e.getCoordinateSequence(),e))}transformMultiPoint(e,t){const n=new ArrayList;for(let t=0;t<e.getNumGeometries();t++){const i=this.transformPoint(e.getGeometryN(t),e);null!==i&&(i.isEmpty()||n.add(i))}return this._factory.buildGeometry(n)}transformMultiPolygon(e,t){const n=new ArrayList;for(let t=0;t<e.getNumGeometries();t++){const i=this.transformPolygon(e.getGeometryN(t),e);null!==i&&(i.isEmpty()||n.add(i))}return this._factory.buildGeometry(n)}copy(e){return e.copy()}transformGeometryCollection(e,t){const n=new ArrayList;for(let t=0;t<e.getNumGeometries();t++){const i=this.transform(e.getGeometryN(t));null!==i&&(this._pruneEmptyGeometry&&i.isEmpty()||n.add(i))}return this._preserveGeometryCollectionType?this._factory.createGeometryCollection(GeometryFactory.toGeometryArray(n)):this._factory.buildGeometry(n)}transform(e){if(this._inputGeom=e,this._factory=e.getFactory(),e instanceof Point)return this.transformPoint(e,null);if(e instanceof MultiPoint)return this.transformMultiPoint(e,null);if(e instanceof LinearRing)return this.transformLinearRing(e,null);if(e instanceof LineString)return this.transformLineString(e,null);if(e instanceof MultiLineString)return this.transformMultiLineString(e,null);if(e instanceof Polygon)return this.transformPolygon(e,null);if(e instanceof MultiPolygon)return this.transformMultiPolygon(e,null);if(e instanceof GeometryCollection)return this.transformGeometryCollection(e,null);throw new IllegalArgumentException("Unknown Geometry subtype: "+e.getGeometryType())}transformLinearRing(e,t){const n=this.transformCoordinates(e.getCoordinateSequence(),e);if(null===n)return this._factory.createLinearRing(null);const i=n.size();return i>0&&i<4&&!this._preserveType?this._factory.createLineString(n):this._factory.createLinearRing(n)}}class Intersection{static intersection(e,t,n,i){const r=e.x<t.x?e.x:t.x,o=e.y<t.y?e.y:t.y,a=e.x>t.x?e.x:t.x,s=e.y>t.y?e.y:t.y,l=n.x<i.x?n.x:i.x,c=n.y<i.y?n.y:i.y,h=n.x>i.x?n.x:i.x,u=n.y>i.y?n.y:i.y,d=((r>l?r:l)+(a<h?a:h))/2,g=((o>c?o:c)+(s<u?s:u))/2,m=e.x-d,f=e.y-g,_=t.x-d,y=t.y-g,C=n.x-d,b=n.y-g,S=i.x-d,x=i.y-g,I=f-y,T=_-m,v=m*y-_*f,E=b-x,w=S-C,A=C*x-S*b,L=I*w-E*T,D=(T*A-w*v)/L,M=(E*v-I*A)/L;return p.isNaN(D)||p.isInfinite(D)||p.isNaN(M)||p.isInfinite(M)?null:new Coordinate(D+d,M+g)}}class Distance{static segmentToSegment(e,t,n,i){if(e.equals(t))return Distance.pointToSegment(e,n,i);if(n.equals(i))return Distance.pointToSegment(i,e,t);let r=!1;if(Envelope.intersects(e,t,n,i)){const o=(t.x-e.x)*(i.y-n.y)-(t.y-e.y)*(i.x-n.x);if(0===o)r=!0;else{const a=(e.y-n.y)*(i.x-n.x)-(e.x-n.x)*(i.y-n.y),s=((e.y-n.y)*(t.x-e.x)-(e.x-n.x)*(t.y-e.y))/o,l=a/o;(l<0||l>1||s<0||s>1)&&(r=!0)}}else r=!0;return r?MathUtil.min(Distance.pointToSegment(e,n,i),Distance.pointToSegment(t,n,i),Distance.pointToSegment(n,e,t),Distance.pointToSegment(i,e,t)):0}static pointToSegment(e,t,n){if(t.x===n.x&&t.y===n.y)return e.distance(t);const i=(n.x-t.x)*(n.x-t.x)+(n.y-t.y)*(n.y-t.y),r=((e.x-t.x)*(n.x-t.x)+(e.y-t.y)*(n.y-t.y))/i;if(r<=0)return e.distance(t);if(r>=1)return e.distance(n);const o=((t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y))/i;return Math.abs(o)*Math.sqrt(i)}static pointToLinePerpendicular(e,t,n){const i=(n.x-t.x)*(n.x-t.x)+(n.y-t.y)*(n.y-t.y),r=((t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y))/i;return Math.abs(r)*Math.sqrt(i)}static pointToSegmentString(e,t){if(0===t.length)throw new IllegalArgumentException("Line array must contain at least one vertex");let n=e.distance(t[0]);for(let i=0;i<t.length-1;i++){const r=Distance.pointToSegment(e,t[i],t[i+1]);r<n&&(n=r)}return n}}const E="XY",w="XYZ",A="XYM",L="XYZM",D={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"},M="EMPTY",N="Z",P="M",R=1,O=2,B=3,G=4,k=5,F=6;for(const e in D)D[e].toUpperCase();class Lexer{constructor(e){this.wkt=e,this.index_=-1}isAlpha_(e){return e>="a"&&e<="z"||e>="A"&&e<="Z"}isNumeric_(e,t){return e>="0"&&e<="9"||"."==e&&!(void 0!==t&&t)}isWhiteSpace_(e){return" "==e||"\t"==e||"\r"==e||"\n"==e}nextChar_(){return this.wkt.charAt(++this.index_)}nextToken(){const e=this.nextChar_(),t=this.index_;let n,i=e;if("("==e)n=O;else if(","==e)n=k;else if(")"==e)n=B;else if(this.isNumeric_(e)||"-"==e)n=G,i=this.readNumber_();else if(this.isAlpha_(e))n=R,i=this.readText_();else{if(this.isWhiteSpace_(e))return this.nextToken();if(""!==e)throw new Error("Unexpected character: "+e);n=F}return{position:t,value:i,type:n}}readNumber_(){let e;const t=this.index_;let n=!1,i=!1;do{"."==e?n=!0:"e"!=e&&"E"!=e||(i=!0),e=this.nextChar_()}while(this.isNumeric_(e,n)||!i&&("e"==e||"E"==e)||i&&("-"==e||"+"==e));return parseFloat(this.wkt.substring(t,this.index_--))}readText_(){let e;const t=this.index_;do{e=this.nextChar_()}while(this.isAlpha_(e));return this.wkt.substring(t,this.index_--).toUpperCase()}}class Parser{constructor(e,t){this.lexer_=e,this.token_,this.layout_=E,this.factory=t}consume_(){this.token_=this.lexer_.nextToken()}isTokenType(e){return this.token_.type==e}match(e){const t=this.isTokenType(e);return t&&this.consume_(),t}parse(){this.consume_();return this.parseGeometry_()}parseGeometryLayout_(){let e=E;const t=this.token_;if(this.isTokenType(R)){const n=t.value;n===N?e=w:n===P?e=A:"ZM"===n&&(e=L),e!==E&&this.consume_()}return e}parseGeometryCollectionText_(){if(this.match(O)){const e=[];do{e.push(this.parseGeometry_())}while(this.match(k));if(this.match(B))return e}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePointText_(){if(this.match(O)){const e=this.parsePoint_();if(this.match(B))return e}else if(this.isEmptyGeometry_())return null;throw new Error(this.formatErrorMessage_())}parseLineStringText_(){if(this.match(O)){const e=this.parsePointList_();if(this.match(B))return e}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePolygonText_(){if(this.match(O)){const e=this.parseLineStringTextList_();if(this.match(B))return e}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiPointText_(){if(this.match(O)){let e;if(e=this.token_.type==O?this.parsePointTextList_():this.parsePointList_(),this.match(B))return e}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiLineStringText_(){if(this.match(O)){const e=this.parseLineStringTextList_();if(this.match(B))return e}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiPolygonText_(){if(this.match(O)){const e=this.parsePolygonTextList_();if(this.match(B))return e}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePoint_(){const e=[],t=this.layout_.length;for(let n=0;n<t;++n){const t=this.token_;if(!this.match(G))break;e.push(t.value)}if(e.length==t)return e;throw new Error(this.formatErrorMessage_())}parsePointList_(){const e=[this.parsePoint_()];for(;this.match(k);)e.push(this.parsePoint_());return e}parsePointTextList_(){const e=[this.parsePointText_()];for(;this.match(k);)e.push(this.parsePointText_());return e}parseLineStringTextList_(){const e=[this.parseLineStringText_()];for(;this.match(k);)e.push(this.parseLineStringText_());return e}parsePolygonTextList_(){const e=[this.parsePolygonText_()];for(;this.match(k);)e.push(this.parsePolygonText_());return e}isEmptyGeometry_(){const e=this.isTokenType(R)&&this.token_.value==M;return e&&this.consume_(),e}formatErrorMessage_(){return"Unexpected `"+this.token_.value+"` at position "+this.token_.position+" in `"+this.lexer_.wkt+"`"}parseGeometry_(){const e=this.factory,t=e=>new Coordinate(...e),n=n=>{const i=n.map((n=>e.createLinearRing(n.map(t))));return i.length>1?e.createPolygon(i[0],i.slice(1)):e.createPolygon(i[0])},i=this.token_;if(this.match(R)){const r=i.value;if(this.layout_=this.parseGeometryLayout_(),"GEOMETRYCOLLECTION"==r){const t=this.parseGeometryCollectionText_();return e.createGeometryCollection(t)}switch(r){case"POINT":{const t=this.parsePointText_();return t?e.createPoint(new Coordinate(...t)):e.createPoint()}case"LINESTRING":{const n=this.parseLineStringText_().map(t);return e.createLineString(n)}case"LINEARRING":{const n=this.parseLineStringText_().map(t);return e.createLinearRing(n)}case"POLYGON":{const t=this.parsePolygonText_();return t&&0!==t.length?n(t):e.createPolygon()}case"MULTIPOINT":{const n=this.parseMultiPointText_();if(!n||0===n.length)return e.createMultiPoint();const i=n.map(t).map((t=>e.createPoint(t)));return e.createMultiPoint(i)}case"MULTILINESTRING":{const n=this.parseMultiLineStringText_().map((n=>e.createLineString(n.map(t))));return e.createMultiLineString(n)}case"MULTIPOLYGON":{const t=this.parseMultiPolygonText_();if(!t||0===t.length)return e.createMultiPolygon();const i=t.map(n);return e.createMultiPolygon(i)}default:throw new Error("Invalid geometry type: "+r)}}throw new Error(this.formatErrorMessage_())}}function W(e){if(e.isEmpty())return"";const t=e.getCoordinate(),n=[t.x,t.y];return void 0===t.z||Number.isNaN(t.z)||n.push(t.z),void 0===t.m||Number.isNaN(t.m)||n.push(t.m),n.join(" ")}function z(e){const t=e.getCoordinates().map((e=>{const t=[e.x,e.y];return void 0===e.z||Number.isNaN(e.z)||t.push(e.z),void 0===e.m||Number.isNaN(e.m)||t.push(e.m),t})),n=[];for(let e=0,i=t.length;e<i;++e)n.push(t[e].join(" "));return n.join(", ")}function H(e){const t=[];t.push("("+z(e.getExteriorRing())+")");for(let n=0,i=e.getNumInteriorRing();n<i;++n)t.push("("+z(e.getInteriorRingN(n))+")");return t.join(", ")}const U={Point:W,LineString:z,LinearRing:z,Polygon:H,MultiPoint:function(e){const t=[];for(let n=0,i=e.getNumGeometries();n<i;++n)t.push("("+W(e.getGeometryN(n))+")");return t.join(", ")},MultiLineString:function(e){const t=[];for(let n=0,i=e.getNumGeometries();n<i;++n)t.push("("+z(e.getGeometryN(n))+")");return t.join(", ")},MultiPolygon:function(e){const t=[];for(let n=0,i=e.getNumGeometries();n<i;++n)t.push("("+H(e.getGeometryN(n))+")");return t.join(", ")},GeometryCollection:function(e){const t=[];for(let n=0,i=e.getNumGeometries();n<i;++n)t.push(V(e.getGeometryN(n)));return t.join(", ")}};function V(e){let t=e.getGeometryType();const n=U[t];t=t.toUpperCase();const i=function(e){let t="";if(e.isEmpty())return t;const n=e.getCoordinate();return void 0===n.z||Number.isNaN(n.z)||(t+=N),void 0===n.m||Number.isNaN(n.m)||(t+=P),t}(e);if(i.length>0&&(t+=" "+i),e.isEmpty())return t+" "+M;return t+" ("+n(e)+")"}class WKTParser{constructor(e){this.geometryFactory=e||new GeometryFactory,this.precisionModel=this.geometryFactory.getPrecisionModel()}read(e){const t=new Lexer(e);return new Parser(t,this.geometryFactory).parse()}write(e){return V(e)}}class WKTWriter{constructor(e){this.parser=new WKTParser(e)}write(e){return this.parser.write(e)}static toLineString(e,t){if(2!==arguments.length)throw new Error("Not implemented");return"LINESTRING ( "+e.x+" "+e.y+", "+t.x+" "+t.y+" )"}}class LineIntersector{constructor(){LineIntersector.constructor_.apply(this,arguments)}static constructor_(){this._result=null,this._inputLines=Array(2).fill().map((()=>Array(2))),this._intPt=new Array(2).fill(null),this._intLineIndex=null,this._isProper=null,this._pa=null,this._pb=null,this._precisionModel=null,this._intPt[0]=new Coordinate,this._intPt[1]=new Coordinate,this._pa=this._intPt[0],this._pb=this._intPt[1],this._result=0}static computeEdgeDistance(e,t,n){const i=Math.abs(n.x-t.x),r=Math.abs(n.y-t.y);let o=-1;if(e.equals(t))o=0;else if(e.equals(n))o=i>r?i:r;else{const n=Math.abs(e.x-t.x),a=Math.abs(e.y-t.y);o=i>r?n:a,0!==o||e.equals(t)||(o=Math.max(n,a))}return Assert.isTrue(!(0===o&&!e.equals(t)),"Bad distance calculation"),o}static nonRobustComputeEdgeDistance(e,t,n){const i=e.x-t.x,r=e.y-t.y,o=Math.sqrt(i*i+r*r);return Assert.isTrue(!(0===o&&!e.equals(t)),"Invalid distance calculation"),o}getIndexAlongSegment(e,t){return this.computeIntLineIndex(),this._intLineIndex[e][t]}getTopologySummary(){const e=new StringBuilder;return this.isEndPoint()&&e.append(" endpoint"),this._isProper&&e.append(" proper"),this.isCollinear()&&e.append(" collinear"),e.toString()}computeIntersection(e,t,n,i){this._inputLines[0][0]=e,this._inputLines[0][1]=t,this._inputLines[1][0]=n,this._inputLines[1][1]=i,this._result=this.computeIntersect(e,t,n,i)}getIntersectionNum(){return this._result}computeIntLineIndex(){if(0===arguments.length)null===this._intLineIndex&&(this._intLineIndex=Array(2).fill().map((()=>Array(2))),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){const e=arguments[0];this.getEdgeDistance(e,0)>this.getEdgeDistance(e,1)?(this._intLineIndex[e][0]=0,this._intLineIndex[e][1]=1):(this._intLineIndex[e][0]=1,this._intLineIndex[e][1]=0)}}isProper(){return this.hasIntersection()&&this._isProper}setPrecisionModel(e){this._precisionModel=e}isInteriorIntersection(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){const e=arguments[0];for(let t=0;t<this._result;t++)if(!this._intPt[t].equals2D(this._inputLines[e][0])&&!this._intPt[t].equals2D(this._inputLines[e][1]))return!0;return!1}}getIntersection(e){return this._intPt[e]}isEndPoint(){return this.hasIntersection()&&!this._isProper}hasIntersection(){return this._result!==LineIntersector.NO_INTERSECTION}getEdgeDistance(e,t){return LineIntersector.computeEdgeDistance(this._intPt[t],this._inputLines[e][0],this._inputLines[e][1])}isCollinear(){return this._result===LineIntersector.COLLINEAR_INTERSECTION}toString(){return WKTWriter.toLineString(this._inputLines[0][0],this._inputLines[0][1])+" - "+WKTWriter.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary()}getEndpoint(e,t){return this._inputLines[e][t]}isIntersection(e){for(let t=0;t<this._result;t++)if(this._intPt[t].equals2D(e))return!0;return!1}getIntersectionAlongSegment(e,t){return this.computeIntLineIndex(),this._intPt[this._intLineIndex[e][t]]}}LineIntersector.DONT_INTERSECT=0,LineIntersector.DO_INTERSECT=1,LineIntersector.COLLINEAR=2,LineIntersector.NO_INTERSECTION=0,LineIntersector.POINT_INTERSECTION=1,LineIntersector.COLLINEAR_INTERSECTION=2;class RobustLineIntersector extends LineIntersector{constructor(){super()}static nearestEndpoint(e,t,n,i){let r=e,o=Distance.pointToSegment(e,n,i),a=Distance.pointToSegment(t,n,i);return a<o&&(o=a,r=t),a=Distance.pointToSegment(n,e,t),a<o&&(o=a,r=n),a=Distance.pointToSegment(i,e,t),a<o&&(o=a,r=i),r}isInSegmentEnvelopes(e){const t=new Envelope(this._inputLines[0][0],this._inputLines[0][1]),n=new Envelope(this._inputLines[1][0],this._inputLines[1][1]);return t.contains(e)&&n.contains(e)}computeIntersection(){if(3!==arguments.length)return super.computeIntersection.apply(this,arguments);{const e=arguments[0],t=arguments[1],n=arguments[2];if(this._isProper=!1,Envelope.intersects(t,n,e)&&0===Orientation.index(t,n,e)&&0===Orientation.index(n,t,e))return this._isProper=!0,(e.equals(t)||e.equals(n))&&(this._isProper=!1),this._result=LineIntersector.POINT_INTERSECTION,null;this._result=LineIntersector.NO_INTERSECTION}}intersection(e,t,n,i){let r=this.intersectionSafe(e,t,n,i);return this.isInSegmentEnvelopes(r)||(r=new Coordinate(RobustLineIntersector.nearestEndpoint(e,t,n,i))),null!==this._precisionModel&&this._precisionModel.makePrecise(r),r}checkDD(e,t,n,i,r){const o=CGAlgorithmsDD.intersection(e,t,n,i),a=this.isInSegmentEnvelopes(o);System.out.println("DD in env = "+a+"  --------------------- "+o),r.distance(o)>1e-4&&System.out.println("Distance = "+r.distance(o))}intersectionSafe(e,t,n,i){let r=Intersection.intersection(e,t,n,i);return null===r&&(r=RobustLineIntersector.nearestEndpoint(e,t,n,i)),r}computeCollinearIntersection(e,t,n,i){const r=Envelope.intersects(e,t,n),o=Envelope.intersects(e,t,i),a=Envelope.intersects(n,i,e),s=Envelope.intersects(n,i,t);return r&&o?(this._intPt[0]=n,this._intPt[1]=i,LineIntersector.COLLINEAR_INTERSECTION):a&&s?(this._intPt[0]=e,this._intPt[1]=t,LineIntersector.COLLINEAR_INTERSECTION):r&&a?(this._intPt[0]=n,this._intPt[1]=e,!n.equals(e)||o||s?LineIntersector.COLLINEAR_INTERSECTION:LineIntersector.POINT_INTERSECTION):r&&s?(this._intPt[0]=n,this._intPt[1]=t,!n.equals(t)||o||a?LineIntersector.COLLINEAR_INTERSECTION:LineIntersector.POINT_INTERSECTION):o&&a?(this._intPt[0]=i,this._intPt[1]=e,!i.equals(e)||r||s?LineIntersector.COLLINEAR_INTERSECTION:LineIntersector.POINT_INTERSECTION):o&&s?(this._intPt[0]=i,this._intPt[1]=t,!i.equals(t)||r||a?LineIntersector.COLLINEAR_INTERSECTION:LineIntersector.POINT_INTERSECTION):LineIntersector.NO_INTERSECTION}computeIntersect(e,t,n,i){if(this._isProper=!1,!Envelope.intersects(e,t,n,i))return LineIntersector.NO_INTERSECTION;const r=Orientation.index(e,t,n),o=Orientation.index(e,t,i);if(r>0&&o>0||r<0&&o<0)return LineIntersector.NO_INTERSECTION;const a=Orientation.index(n,i,e),s=Orientation.index(n,i,t);if(a>0&&s>0||a<0&&s<0)return LineIntersector.NO_INTERSECTION;return 0===r&&0===o&&0===a&&0===s?this.computeCollinearIntersection(e,t,n,i):(0===r||0===o||0===a||0===s?(this._isProper=!1,e.equals2D(n)||e.equals2D(i)?this._intPt[0]=e:t.equals2D(n)||t.equals2D(i)?this._intPt[0]=t:0===r?this._intPt[0]=new Coordinate(n):0===o?this._intPt[0]=new Coordinate(i):0===a?this._intPt[0]=new Coordinate(e):0===s&&(this._intPt[0]=new Coordinate(t))):(this._isProper=!0,this._intPt[0]=this.intersection(e,t,n,i)),LineIntersector.POINT_INTERSECTION)}}class LineSegment{constructor(){LineSegment.constructor_.apply(this,arguments)}static constructor_(){if(this.p0=null,this.p1=null,0===arguments.length)LineSegment.constructor_.call(this,new Coordinate,new Coordinate);else if(1===arguments.length){const e=arguments[0];LineSegment.constructor_.call(this,e.p0,e.p1)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.p0=e,this.p1=t}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];LineSegment.constructor_.call(this,new Coordinate(e,t),new Coordinate(n,i))}}static midPoint(e,t){return new Coordinate((e.x+t.x)/2,(e.y+t.y)/2)}minX(){return Math.min(this.p0.x,this.p1.x)}orientationIndex(){if(arguments[0]instanceof LineSegment){const e=arguments[0],t=Orientation.index(this.p0,this.p1,e.p0),n=Orientation.index(this.p0,this.p1,e.p1);return t>=0&&n>=0||t<=0&&n<=0?Math.max(t,n):0}if(arguments[0]instanceof Coordinate){const e=arguments[0];return Orientation.index(this.p0,this.p1,e)}}toGeometry(e){return e.createLineString([this.p0,this.p1])}isVertical(){return this.p0.x===this.p1.x}equals(e){if(!(e instanceof LineSegment))return!1;const t=e;return this.p0.equals(t.p0)&&this.p1.equals(t.p1)}intersection(e){const t=new RobustLineIntersector;return t.computeIntersection(this.p0,this.p1,e.p0,e.p1),t.hasIntersection()?t.getIntersection(0):null}project(){if(arguments[0]instanceof Coordinate){const e=arguments[0];if(e.equals(this.p0)||e.equals(this.p1))return new Coordinate(e);const t=this.projectionFactor(e),n=new Coordinate;return n.x=this.p0.x+t*(this.p1.x-this.p0.x),n.y=this.p0.y+t*(this.p1.y-this.p0.y),n}if(arguments[0]instanceof LineSegment){const e=arguments[0],t=this.projectionFactor(e.p0),n=this.projectionFactor(e.p1);if(t>=1&&n>=1)return null;if(t<=0&&n<=0)return null;let i=this.project(e.p0);t<0&&(i=this.p0),t>1&&(i=this.p1);let r=this.project(e.p1);return n<0&&(r=this.p0),n>1&&(r=this.p1),new LineSegment(i,r)}}normalize(){this.p1.compareTo(this.p0)<0&&this.reverse()}angle(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)}getCoordinate(e){return 0===e?this.p0:this.p1}distancePerpendicular(e){return Distance.pointToLinePerpendicular(e,this.p0,this.p1)}minY(){return Math.min(this.p0.y,this.p1.y)}midPoint(){return LineSegment.midPoint(this.p0,this.p1)}projectionFactor(e){if(e.equals(this.p0))return 0;if(e.equals(this.p1))return 1;const t=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y,i=t*t+n*n;if(i<=0)return p.NaN;return((e.x-this.p0.x)*t+(e.y-this.p0.y)*n)/i}closestPoints(e){const t=this.intersection(e);if(null!==t)return[t,t];const n=new Array(2).fill(null);let i=p.MAX_VALUE,r=null;const o=this.closestPoint(e.p0);i=o.distance(e.p0),n[0]=o,n[1]=e.p0;const a=this.closestPoint(e.p1);r=a.distance(e.p1),r<i&&(i=r,n[0]=a,n[1]=e.p1);const s=e.closestPoint(this.p0);r=s.distance(this.p0),r<i&&(i=r,n[0]=this.p0,n[1]=s);const l=e.closestPoint(this.p1);return r=l.distance(this.p1),r<i&&(i=r,n[0]=this.p1,n[1]=l),n}closestPoint(e){const t=this.projectionFactor(e);if(t>0&&t<1)return this.project(e);return this.p0.distance(e)<this.p1.distance(e)?this.p0:this.p1}maxX(){return Math.max(this.p0.x,this.p1.x)}getLength(){return this.p0.distance(this.p1)}compareTo(e){const t=e,n=this.p0.compareTo(t.p0);return 0!==n?n:this.p1.compareTo(t.p1)}reverse(){const e=this.p0;this.p0=this.p1,this.p1=e}equalsTopo(e){return this.p0.equals(e.p0)&&this.p1.equals(e.p1)||this.p0.equals(e.p1)&&this.p1.equals(e.p0)}lineIntersection(e){return Intersection.intersection(this.p0,this.p1,e.p0,e.p1)}maxY(){return Math.max(this.p0.y,this.p1.y)}pointAlongOffset(e,t){const n=this.p0.x+e*(this.p1.x-this.p0.x),i=this.p0.y+e*(this.p1.y-this.p0.y),r=this.p1.x-this.p0.x,o=this.p1.y-this.p0.y,a=Math.sqrt(r*r+o*o);let s=0,l=0;if(0!==t){if(a<=0)throw new IllegalStateException("Cannot compute offset from zero-length line segment");s=t*r/a,l=t*o/a}return new Coordinate(n-l,i+s)}setCoordinates(){if(1===arguments.length){const e=arguments[0];this.setCoordinates(e.p0,e.p1)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.p0.x=e.x,this.p0.y=e.y,this.p1.x=t.x,this.p1.y=t.y}}segmentFraction(e){let t=this.projectionFactor(e);return t<0?t=0:(t>1||p.isNaN(t))&&(t=1),t}toString(){return"LINESTRING( "+this.p0.x+" "+this.p0.y+", "+this.p1.x+" "+this.p1.y+")"}isHorizontal(){return this.p0.y===this.p1.y}reflect(e){const t=this.p1.getY()-this.p0.getY(),n=this.p0.getX()-this.p1.getX(),i=this.p0.getY()*(this.p1.getX()-this.p0.getX())-this.p0.getX()*(this.p1.getY()-this.p0.getY()),r=t*t+n*n,o=t*t-n*n,a=e.getX(),s=e.getY();return new Coordinate((-o*a-2*t*n*s-2*t*i)/r,(o*s-2*t*n*a-2*n*i)/r)}distance(){if(arguments[0]instanceof LineSegment){const e=arguments[0];return Distance.segmentToSegment(this.p0,this.p1,e.p0,e.p1)}if(arguments[0]instanceof Coordinate){const e=arguments[0];return Distance.pointToSegment(e,this.p0,this.p1)}}pointAlong(e){const t=new Coordinate;return t.x=this.p0.x+e*(this.p1.x-this.p0.x),t.y=this.p0.y+e*(this.p1.y-this.p0.y),t}hashCode(){let e=p.doubleToLongBits(this.p0.x);e^=31*p.doubleToLongBits(this.p0.y);const t=Math.trunc(e)^Math.trunc(e>>32);let n=p.doubleToLongBits(this.p1.x);n^=31*p.doubleToLongBits(this.p1.y);return t^(Math.trunc(n)^Math.trunc(n>>32))}get interfaces_(){return[d,m]}}class WKTReader{constructor(e){this.parser=new WKTParser(e||new GeometryFactory)}read(e){return this.parser.read(e)}}class BufferParameters{constructor(){BufferParameters.constructor_.apply(this,arguments)}static constructor_(){if(this._quadrantSegments=BufferParameters.DEFAULT_QUADRANT_SEGMENTS,this._endCapStyle=BufferParameters.CAP_ROUND,this._joinStyle=BufferParameters.JOIN_ROUND,this._mitreLimit=BufferParameters.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this._simplifyFactor=BufferParameters.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){const e=arguments[0];this.setQuadrantSegments(e)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.setQuadrantSegments(e),this.setEndCapStyle(t)}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];this.setQuadrantSegments(e),this.setEndCapStyle(t),this.setJoinStyle(n),this.setMitreLimit(i)}}static bufferDistanceError(e){const t=Math.PI/2/e;return 1-Math.cos(t/2)}getEndCapStyle(){return this._endCapStyle}isSingleSided(){return this._isSingleSided}setQuadrantSegments(e){this._quadrantSegments=e,0===this._quadrantSegments&&(this._joinStyle=BufferParameters.JOIN_BEVEL),this._quadrantSegments<0&&(this._joinStyle=BufferParameters.JOIN_MITRE,this._mitreLimit=Math.abs(this._quadrantSegments)),e<=0&&(this._quadrantSegments=1),this._joinStyle!==BufferParameters.JOIN_ROUND&&(this._quadrantSegments=BufferParameters.DEFAULT_QUADRANT_SEGMENTS)}getJoinStyle(){return this._joinStyle}setJoinStyle(e){this._joinStyle=e}setSimplifyFactor(e){this._simplifyFactor=e<0?0:e}getSimplifyFactor(){return this._simplifyFactor}getQuadrantSegments(){return this._quadrantSegments}setEndCapStyle(e){this._endCapStyle=e}getMitreLimit(){return this._mitreLimit}setMitreLimit(e){this._mitreLimit=e}setSingleSided(e){this._isSingleSided=e}}BufferParameters.CAP_ROUND=1,BufferParameters.CAP_FLAT=2,BufferParameters.CAP_SQUARE=3,BufferParameters.JOIN_ROUND=1,BufferParameters.JOIN_MITRE=2,BufferParameters.JOIN_BEVEL=3,BufferParameters.DEFAULT_QUADRANT_SEGMENTS=8,BufferParameters.DEFAULT_MITRE_LIMIT=5,BufferParameters.DEFAULT_SIMPLIFY_FACTOR=.01;class Location{static toLocationSymbol(e){switch(e){case Location.EXTERIOR:return"e";case Location.BOUNDARY:return"b";case Location.INTERIOR:return"i";case Location.NONE:return"-"}throw new IllegalArgumentException("Unknown location value: "+e)}}Location.INTERIOR=0,Location.BOUNDARY=1,Location.EXTERIOR=2,Location.NONE=-1;class Position{static opposite(e){return e===Position.LEFT?Position.RIGHT:e===Position.RIGHT?Position.LEFT:e}}Position.ON=0,Position.LEFT=1,Position.RIGHT=2;class EmptyStackException extends Exception{constructor(e){super(e),this.name=Object.keys({EmptyStackException:EmptyStackException})[0]}}class Stack extends List{constructor(){super(),this.array=[]}add(e){return this.array.push(e),!0}get(e){if(e<0||e>=this.size())throw new IndexOutOfBoundsException;return this.array[e]}push(e){return this.array.push(e),e}pop(){if(0===this.array.length)throw new EmptyStackException;return this.array.pop()}peek(){if(0===this.array.length)throw new EmptyStackException;return this.array[this.array.length-1]}empty(){return 0===this.array.length}isEmpty(){return this.empty()}search(e){return this.array.indexOf(e)}size(){return this.array.length}toArray(){return this.array.slice()}}class RightmostEdgeFinder{constructor(){RightmostEdgeFinder.constructor_.apply(this,arguments)}static constructor_(){this._minIndex=-1,this._minCoord=null,this._minDe=null,this._orientedDe=null}getCoordinate(){return this._minCoord}getRightmostSide(e,t){let n=this.getRightmostSideOfSegment(e,t);return n<0&&(n=this.getRightmostSideOfSegment(e,t-1)),n<0&&(this._minCoord=null,this.checkForRightmostCoordinate(e)),n}findRightmostEdgeAtVertex(){const e=this._minDe.getEdge().getCoordinates();Assert.isTrue(this._minIndex>0&&this._minIndex<e.length,"rightmost point expected to be interior vertex of edge");const t=e[this._minIndex-1],n=e[this._minIndex+1],i=Orientation.index(this._minCoord,n,t);let r=!1;(t.y<this._minCoord.y&&n.y<this._minCoord.y&&i===Orientation.COUNTERCLOCKWISE||t.y>this._minCoord.y&&n.y>this._minCoord.y&&i===Orientation.CLOCKWISE)&&(r=!0),r&&(this._minIndex=this._minIndex-1)}getRightmostSideOfSegment(e,t){const n=e.getEdge().getCoordinates();if(t<0||t+1>=n.length)return-1;if(n[t].y===n[t+1].y)return-1;let i=Position.LEFT;return n[t].y<n[t+1].y&&(i=Position.RIGHT),i}getEdge(){return this._orientedDe}checkForRightmostCoordinate(e){const t=e.getEdge().getCoordinates();for(let n=0;n<t.length-1;n++)(null===this._minCoord||t[n].x>this._minCoord.x)&&(this._minDe=e,this._minIndex=n,this._minCoord=t[n])}findRightmostEdgeAtNode(){const e=this._minDe.getNode().getEdges();this._minDe=e.getRightmostEdge(),this._minDe.isForward()||(this._minDe=this._minDe.getSym(),this._minIndex=this._minDe.getEdge().getCoordinates().length-1)}findEdge(e){for(let t=e.iterator();t.hasNext();){const e=t.next();e.isForward()&&this.checkForRightmostCoordinate(e)}Assert.isTrue(0!==this._minIndex||this._minCoord.equals(this._minDe.getCoordinate()),"inconsistency in rightmost processing"),0===this._minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this._orientedDe=this._minDe;this.getRightmostSide(this._minDe,this._minIndex)===Position.LEFT&&(this._orientedDe=this._minDe.getSym())}}class TopologyException extends RuntimeException{constructor(e,t){super(t?e+" [ "+t+" ]":e),this.pt=t?new Coordinate(t):void 0,this.name=Object.keys({TopologyException:TopologyException})[0]}getCoordinate(){return this.pt}}class LinkedList{constructor(){this.array=[]}addLast(e){this.array.push(e)}removeFirst(){return this.array.shift()}isEmpty(){return 0===this.array.length}}class BufferSubgraph{constructor(){BufferSubgraph.constructor_.apply(this,arguments)}static constructor_(){this._finder=null,this._dirEdgeList=new ArrayList,this._nodes=new ArrayList,this._rightMostCoord=null,this._env=null,this._finder=new RightmostEdgeFinder}clearVisitedEdges(){for(let e=this._dirEdgeList.iterator();e.hasNext();){e.next().setVisited(!1)}}getRightmostCoordinate(){return this._rightMostCoord}computeNodeDepth(e){let t=null;for(let n=e.getEdges().iterator();n.hasNext();){const e=n.next();if(e.isVisited()||e.getSym().isVisited()){t=e;break}}if(null===t)throw new TopologyException("unable to find edge to compute depths at "+e.getCoordinate());e.getEdges().computeDepths(t);for(let t=e.getEdges().iterator();t.hasNext();){const e=t.next();e.setVisited(!0),this.copySymDepths(e)}}computeDepth(e){this.clearVisitedEdges();const t=this._finder.getEdge();t.getNode(),t.getLabel(),t.setEdgeDepths(Position.RIGHT,e),this.copySymDepths(t),this.computeDepths(t)}create(e){this.addReachable(e),this._finder.findEdge(this._dirEdgeList),this._rightMostCoord=this._finder.getCoordinate()}findResultEdges(){for(let e=this._dirEdgeList.iterator();e.hasNext();){const t=e.next();t.getDepth(Position.RIGHT)>=1&&t.getDepth(Position.LEFT)<=0&&!t.isInteriorAreaEdge()&&t.setInResult(!0)}}computeDepths(e){const t=new HashSet,n=new LinkedList,i=e.getNode();for(n.addLast(i),t.add(i),e.setVisited(!0);!n.isEmpty();){const e=n.removeFirst();t.add(e),this.computeNodeDepth(e);for(let i=e.getEdges().iterator();i.hasNext();){const e=i.next().getSym();if(e.isVisited())continue;const r=e.getNode();t.contains(r)||(n.addLast(r),t.add(r))}}}compareTo(e){const t=e;return this._rightMostCoord.x<t._rightMostCoord.x?-1:this._rightMostCoord.x>t._rightMostCoord.x?1:0}getEnvelope(){if(null===this._env){const e=new Envelope;for(let t=this._dirEdgeList.iterator();t.hasNext();){const n=t.next().getEdge().getCoordinates();for(let t=0;t<n.length-1;t++)e.expandToInclude(n[t])}this._env=e}return this._env}addReachable(e){const t=new Stack;for(t.add(e);!t.empty();){const e=t.pop();this.add(e,t)}}copySymDepths(e){const t=e.getSym();t.setDepth(Position.LEFT,e.getDepth(Position.RIGHT)),t.setDepth(Position.RIGHT,e.getDepth(Position.LEFT))}add(e,t){e.setVisited(!0),this._nodes.add(e);for(let n=e.getEdges().iterator();n.hasNext();){const e=n.next();this._dirEdgeList.add(e);const i=e.getSym().getNode();i.isVisited()||t.push(i)}}getNodes(){return this._nodes}getDirectedEdges(){return this._dirEdgeList}get interfaces_(){return[d]}}class RayCrossingCounter{constructor(){RayCrossingCounter.constructor_.apply(this,arguments)}static constructor_(){this._p=null,this._crossingCount=0,this._isPointOnSegment=!1;const e=arguments[0];this._p=e}static locatePointInRing(){if(arguments[0]instanceof Coordinate&&b(arguments[1],CoordinateSequence)){const e=arguments[1],t=new RayCrossingCounter(arguments[0]),n=new Coordinate,i=new Coordinate;for(let r=1;r<e.size();r++)if(e.getCoordinate(r,n),e.getCoordinate(r-1,i),t.countSegment(n,i),t.isOnSegment())return t.getLocation();return t.getLocation()}if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Array){const e=arguments[1],t=new RayCrossingCounter(arguments[0]);for(let n=1;n<e.length;n++){const i=e[n],r=e[n-1];if(t.countSegment(i,r),t.isOnSegment())return t.getLocation()}return t.getLocation()}}countSegment(e,t){if(e.x<this._p.x&&t.x<this._p.x)return null;if(this._p.x===t.x&&this._p.y===t.y)return this._isPointOnSegment=!0,null;if(e.y===this._p.y&&t.y===this._p.y){let n=e.x,i=t.x;return n>i&&(n=t.x,i=e.x),this._p.x>=n&&this._p.x<=i&&(this._isPointOnSegment=!0),null}if(e.y>this._p.y&&t.y<=this._p.y||t.y>this._p.y&&e.y<=this._p.y){let n=Orientation.index(e,t,this._p);if(n===Orientation.COLLINEAR)return this._isPointOnSegment=!0,null;t.y<e.y&&(n=-n),n===Orientation.LEFT&&this._crossingCount++}}isPointInPolygon(){return this.getLocation()!==Location.EXTERIOR}getLocation(){return this._isPointOnSegment?Location.BOUNDARY:this._crossingCount%2==1?Location.INTERIOR:Location.EXTERIOR}isOnSegment(){return this._isPointOnSegment}}class PointLocation{static isOnLine(){if(arguments[0]instanceof Coordinate&&b(arguments[1],CoordinateSequence)){const e=arguments[0],t=arguments[1],n=new RobustLineIntersector,i=new Coordinate,r=new Coordinate,o=t.size();for(let a=1;a<o;a++)if(t.getCoordinate(a-1,i),t.getCoordinate(a,r),n.computeIntersection(e,i,r),n.hasIntersection())return!0;return!1}if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Array){const e=arguments[0],t=arguments[1],n=new RobustLineIntersector;for(let i=1;i<t.length;i++){const r=t[i-1],o=t[i];if(n.computeIntersection(e,r,o),n.hasIntersection())return!0}return!1}}static locateInRing(e,t){return RayCrossingCounter.locatePointInRing(e,t)}static isInRing(e,t){return PointLocation.locateInRing(e,t)!==Location.EXTERIOR}}class TopologyLocation{constructor(){TopologyLocation.constructor_.apply(this,arguments)}static constructor_(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){const e=arguments[0];this.init(e.length)}else if(Number.isInteger(arguments[0])){const e=arguments[0];this.init(1),this.location[Position.ON]=e}else if(arguments[0]instanceof TopologyLocation){const e=arguments[0];if(this.init(e.location.length),null!==e)for(let t=0;t<this.location.length;t++)this.location[t]=e.location[t]}}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this.init(3),this.location[Position.ON]=e,this.location[Position.LEFT]=t,this.location[Position.RIGHT]=n}}setAllLocations(e){for(let t=0;t<this.location.length;t++)this.location[t]=e}isNull(){for(let e=0;e<this.location.length;e++)if(this.location[e]!==Location.NONE)return!1;return!0}setAllLocationsIfNull(e){for(let t=0;t<this.location.length;t++)this.location[t]===Location.NONE&&(this.location[t]=e)}isLine(){return 1===this.location.length}merge(e){if(e.location.length>this.location.length){const e=new Array(3).fill(null);e[Position.ON]=this.location[Position.ON],e[Position.LEFT]=Location.NONE,e[Position.RIGHT]=Location.NONE,this.location=e}for(let t=0;t<this.location.length;t++)this.location[t]===Location.NONE&&t<e.location.length&&(this.location[t]=e.location[t])}getLocations(){return this.location}flip(){if(this.location.length<=1)return null;const e=this.location[Position.LEFT];this.location[Position.LEFT]=this.location[Position.RIGHT],this.location[Position.RIGHT]=e}toString(){const e=new StringBuffer;return this.location.length>1&&e.append(Location.toLocationSymbol(this.location[Position.LEFT])),e.append(Location.toLocationSymbol(this.location[Position.ON])),this.location.length>1&&e.append(Location.toLocationSymbol(this.location[Position.RIGHT])),e.toString()}setLocations(e,t,n){this.location[Position.ON]=e,this.location[Position.LEFT]=t,this.location[Position.RIGHT]=n}get(e){return e<this.location.length?this.location[e]:Location.NONE}isArea(){return this.location.length>1}isAnyNull(){for(let e=0;e<this.location.length;e++)if(this.location[e]===Location.NONE)return!0;return!1}setLocation(){if(1===arguments.length){const e=arguments[0];this.setLocation(Position.ON,e)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.location[e]=t}}init(e){this.location=new Array(e).fill(null),this.setAllLocations(Location.NONE)}isEqualOnSide(e,t){return this.location[t]===e.location[t]}allPositionsEqual(e){for(let t=0;t<this.location.length;t++)if(this.location[t]!==e)return!1;return!0}}class Label{constructor(){Label.constructor_.apply(this,arguments)}static constructor_(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){const e=arguments[0];this.elt[0]=new TopologyLocation(e),this.elt[1]=new TopologyLocation(e)}else if(arguments[0]instanceof Label){const e=arguments[0];this.elt[0]=new TopologyLocation(e.elt[0]),this.elt[1]=new TopologyLocation(e.elt[1])}}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.elt[0]=new TopologyLocation(Location.NONE),this.elt[1]=new TopologyLocation(Location.NONE),this.elt[e].setLocation(t)}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this.elt[0]=new TopologyLocation(e,t,n),this.elt[1]=new TopologyLocation(e,t,n)}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];this.elt[0]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE),this.elt[1]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE),this.elt[e].setLocations(t,n,i)}}static toLineLabel(e){const t=new Label(Location.NONE);for(let n=0;n<2;n++)t.setLocation(n,e.getLocation(n));return t}getGeometryCount(){let e=0;return this.elt[0].isNull()||e++,this.elt[1].isNull()||e++,e}setAllLocations(e,t){this.elt[e].setAllLocations(t)}isNull(e){return this.elt[e].isNull()}setAllLocationsIfNull(){if(1===arguments.length){const e=arguments[0];this.setAllLocationsIfNull(0,e),this.setAllLocationsIfNull(1,e)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.elt[e].setAllLocationsIfNull(t)}}isLine(e){return this.elt[e].isLine()}merge(e){for(let t=0;t<2;t++)null===this.elt[t]&&null!==e.elt[t]?this.elt[t]=new TopologyLocation(e.elt[t]):this.elt[t].merge(e.elt[t])}flip(){this.elt[0].flip(),this.elt[1].flip()}getLocation(){if(1===arguments.length){const e=arguments[0];return this.elt[e].get(Position.ON)}if(2===arguments.length){const e=arguments[0],t=arguments[1];return this.elt[e].get(t)}}toString(){const e=new StringBuffer;return null!==this.elt[0]&&(e.append("A:"),e.append(this.elt[0].toString())),null!==this.elt[1]&&(e.append(" B:"),e.append(this.elt[1].toString())),e.toString()}isArea(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){const e=arguments[0];return this.elt[e].isArea()}}isAnyNull(e){return this.elt[e].isAnyNull()}setLocation(){if(2===arguments.length){const e=arguments[0],t=arguments[1];this.elt[e].setLocation(Position.ON,t)}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this.elt[e].setLocation(t,n)}}isEqualOnSide(e,t){return this.elt[0].isEqualOnSide(e.elt[0],t)&&this.elt[1].isEqualOnSide(e.elt[1],t)}allPositionsEqual(e,t){return this.elt[e].allPositionsEqual(t)}toLine(e){this.elt[e].isArea()&&(this.elt[e]=new TopologyLocation(this.elt[e].location[0]))}}class EdgeRing{constructor(){EdgeRing.constructor_.apply(this,arguments)}static constructor_(){if(this._startDe=null,this._maxNodeDegree=-1,this._edges=new ArrayList,this._pts=new ArrayList,this._label=new Label(Location.NONE),this._ring=null,this._isHole=null,this._shell=null,this._holes=new ArrayList,this._geometryFactory=null,0===arguments.length);else if(2===arguments.length){const e=arguments[0],t=arguments[1];this._geometryFactory=t,this.computePoints(e),this.computeRing()}}computeRing(){if(null!==this._ring)return null;const e=new Array(this._pts.size()).fill(null);for(let t=0;t<this._pts.size();t++)e[t]=this._pts.get(t);this._ring=this._geometryFactory.createLinearRing(e),this._isHole=Orientation.isCCW(this._ring.getCoordinates())}isIsolated(){return 1===this._label.getGeometryCount()}computePoints(e){this._startDe=e;let t=e,n=!0;do{if(null===t)throw new TopologyException("Found null DirectedEdge");if(t.getEdgeRing()===this)throw new TopologyException("Directed Edge visited twice during ring-building at "+t.getCoordinate());this._edges.add(t);const e=t.getLabel();Assert.isTrue(e.isArea()),this.mergeLabel(e),this.addPoints(t.getEdge(),t.isForward(),n),n=!1,this.setEdgeRing(t,this),t=this.getNext(t)}while(t!==this._startDe)}getLinearRing(){return this._ring}getCoordinate(e){return this._pts.get(e)}computeMaxNodeDegree(){this._maxNodeDegree=0;let e=this._startDe;do{const t=e.getNode().getEdges().getOutgoingDegree(this);t>this._maxNodeDegree&&(this._maxNodeDegree=t),e=this.getNext(e)}while(e!==this._startDe);this._maxNodeDegree*=2}addPoints(e,t,n){const i=e.getCoordinates();if(t){let e=1;n&&(e=0);for(let t=e;t<i.length;t++)this._pts.add(i[t])}else{let e=i.length-2;n&&(e=i.length-1);for(let t=e;t>=0;t--)this._pts.add(i[t])}}isHole(){return this._isHole}setInResult(){let e=this._startDe;do{e.getEdge().setInResult(!0),e=e.getNext()}while(e!==this._startDe)}containsPoint(e){const t=this.getLinearRing();if(!t.getEnvelopeInternal().contains(e))return!1;if(!PointLocation.isInRing(e,t.getCoordinates()))return!1;for(let t=this._holes.iterator();t.hasNext();){if(t.next().containsPoint(e))return!1}return!0}addHole(e){this._holes.add(e)}isShell(){return null===this._shell}getLabel(){return this._label}getEdges(){return this._edges}getMaxNodeDegree(){return this._maxNodeDegree<0&&this.computeMaxNodeDegree(),this._maxNodeDegree}getShell(){return this._shell}mergeLabel(){if(1===arguments.length){const e=arguments[0];this.mergeLabel(e,0),this.mergeLabel(e,1)}else if(2===arguments.length){const e=arguments[1],t=arguments[0].getLocation(e,Position.RIGHT);if(t===Location.NONE)return null;if(this._label.getLocation(e)===Location.NONE)return this._label.setLocation(e,t),null}}setShell(e){this._shell=e,null!==e&&e.addHole(this)}toPolygon(e){const t=new Array(this._holes.size()).fill(null);for(let e=0;e<this._holes.size();e++)t[e]=this._holes.get(e).getLinearRing();return e.createPolygon(this.getLinearRing(),t)}}class MinimalEdgeRing extends EdgeRing{constructor(){super(),MinimalEdgeRing.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0],t=arguments[1];EdgeRing.constructor_.call(this,e,t)}setEdgeRing(e,t){e.setMinEdgeRing(t)}getNext(e){return e.getNextMin()}}class MaximalEdgeRing extends EdgeRing{constructor(){super(),MaximalEdgeRing.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0],t=arguments[1];EdgeRing.constructor_.call(this,e,t)}buildMinimalRings(){const e=new ArrayList;let t=this._startDe;do{if(null===t.getMinEdgeRing()){const n=new MinimalEdgeRing(t,this._geometryFactory);e.add(n)}t=t.getNext()}while(t!==this._startDe);return e}setEdgeRing(e,t){e.setEdgeRing(t)}linkDirectedEdgesForMinimalEdgeRings(){let e=this._startDe;do{e.getNode().getEdges().linkMinimalDirectedEdges(this),e=e.getNext()}while(e!==this._startDe)}getNext(e){return e.getNext()}}class GraphComponent{constructor(){GraphComponent.constructor_.apply(this,arguments)}static constructor_(){if(this._label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){const e=arguments[0];this._label=e}}setVisited(e){this._isVisited=e}setInResult(e){this._isInResult=e}isCovered(){return this._isCovered}isCoveredSet(){return this._isCoveredSet}setLabel(e){this._label=e}getLabel(){return this._label}setCovered(e){this._isCovered=e,this._isCoveredSet=!0}updateIM(e){Assert.isTrue(this._label.getGeometryCount()>=2,"found partial label"),this.computeIM(e)}isInResult(){return this._isInResult}isVisited(){return this._isVisited}}let Y=class Node extends GraphComponent{constructor(){super(),Node.constructor_.apply(this,arguments)}static constructor_(){this._coord=null,this._edges=null;const e=arguments[0],t=arguments[1];this._coord=e,this._edges=t,this._label=new Label(0,Location.NONE)}isIncidentEdgeInResult(){for(let e=this.getEdges().getEdges().iterator();e.hasNext();){if(e.next().getEdge().isInResult())return!0}return!1}isIsolated(){return 1===this._label.getGeometryCount()}getCoordinate(){return this._coord}print(e){e.println("node "+this._coord+" lbl: "+this._label)}computeIM(e){}computeMergedLocation(e,t){let n=Location.NONE;if(n=this._label.getLocation(t),!e.isNull(t)){const i=e.getLocation(t);n!==Location.BOUNDARY&&(n=i)}return n}setLabel(){if(2!==arguments.length||!Number.isInteger(arguments[1])||!Number.isInteger(arguments[0]))return super.setLabel.apply(this,arguments);{const e=arguments[0],t=arguments[1];null===this._label?this._label=new Label(e,t):this._label.setLocation(e,t)}}getEdges(){return this._edges}mergeLabel(){if(arguments[0]instanceof Node){const e=arguments[0];this.mergeLabel(e._label)}else if(arguments[0]instanceof Label){const e=arguments[0];for(let t=0;t<2;t++){const n=this.computeMergedLocation(e,t);this._label.getLocation(t)===Location.NONE&&this._label.setLocation(t,n)}}}add(e){this._edges.insert(e),e.setNode(this)}setLabelBoundary(e){if(null===this._label)return null;let t=Location.NONE;null!==this._label&&(t=this._label.getLocation(e));let n=null;switch(t){case Location.BOUNDARY:n=Location.INTERIOR;break;case Location.INTERIOR:default:n=Location.BOUNDARY}this._label.setLocation(e,n)}};class SortedMap extends T{}function q(e){return null==e?0:e.color}function K(e){return null==e?null:e.parent}function j(e,t){null!==e&&(e.color=t)}function X(e){return null==e?null:e.left}function J(e){return null==e?null:e.right}class TreeMap extends SortedMap{constructor(){super(),this.root_=null,this.size_=0}get(e){let t=this.root_;for(;null!==t;){const n=e.compareTo(t.key);if(n<0)t=t.left;else{if(!(n>0))return t.value;t=t.right}}return null}put(e,t){if(null===this.root_)return this.root_={key:e,value:t,left:null,right:null,parent:null,color:0,getValue(){return this.value},getKey(){return this.key}},this.size_=1,null;let n,i,r=this.root_;do{if(n=r,i=e.compareTo(r.key),i<0)r=r.left;else{if(!(i>0)){const e=r.value;return r.value=t,e}r=r.right}}while(null!==r);const o={key:e,left:null,right:null,value:t,parent:n,color:0,getValue(){return this.value},getKey(){return this.key}};return i<0?n.left=o:n.right=o,this.fixAfterInsertion(o),this.size_++,null}fixAfterInsertion(e){let t;for(e.color=1;null!=e&&e!==this.root_&&1===e.parent.color;)K(e)===X(K(K(e)))?(t=J(K(K(e))),1===q(t)?(j(K(e),0),j(t,0),j(K(K(e)),1),e=K(K(e))):(e===J(K(e))&&(e=K(e),this.rotateLeft(e)),j(K(e),0),j(K(K(e)),1),this.rotateRight(K(K(e))))):(t=X(K(K(e))),1===q(t)?(j(K(e),0),j(t,0),j(K(K(e)),1),e=K(K(e))):(e===X(K(e))&&(e=K(e),this.rotateRight(e)),j(K(e),0),j(K(K(e)),1),this.rotateLeft(K(K(e)))));this.root_.color=0}values(){const e=new ArrayList;let t=this.getFirstEntry();if(null!==t)for(e.add(t.value);null!==(t=TreeMap.successor(t));)e.add(t.value);return e}entrySet(){const e=new HashSet;let t=this.getFirstEntry();if(null!==t)for(e.add(t);null!==(t=TreeMap.successor(t));)e.add(t);return e}rotateLeft(e){if(null!=e){const t=e.right;e.right=t.left,null!=t.left&&(t.left.parent=e),t.parent=e.parent,null==e.parent?this.root_=t:e.parent.left===e?e.parent.left=t:e.parent.right=t,t.left=e,e.parent=t}}rotateRight(e){if(null!=e){const t=e.left;e.left=t.right,null!=t.right&&(t.right.parent=e),t.parent=e.parent,null==e.parent?this.root_=t:e.parent.right===e?e.parent.right=t:e.parent.left=t,t.right=e,e.parent=t}}getFirstEntry(){let e=this.root_;if(null!=e)for(;null!=e.left;)e=e.left;return e}static successor(e){let t;if(null===e)return null;if(null!==e.right){for(t=e.right;null!==t.left;)t=t.left;return t}{t=e.parent;let n=e;for(;null!==t&&n===t.right;)n=t,t=t.parent;return t}}size(){return this.size_}containsKey(e){let t=this.root_;for(;null!==t;){const n=e.compareTo(t.key);if(n<0)t=t.left;else{if(!(n>0))return!0;t=t.right}}return!1}}class NodeMap{constructor(){NodeMap.constructor_.apply(this,arguments)}static constructor_(){this.nodeMap=new TreeMap,this.nodeFact=null;const e=arguments[0];this.nodeFact=e}find(e){return this.nodeMap.get(e)}addNode(){if(arguments[0]instanceof Coordinate){const e=arguments[0];let t=this.nodeMap.get(e);return null===t&&(t=this.nodeFact.createNode(e),this.nodeMap.put(e,t)),t}if(arguments[0]instanceof Y){const e=arguments[0],t=this.nodeMap.get(e.getCoordinate());return null===t?(this.nodeMap.put(e.getCoordinate(),e),e):(t.mergeLabel(e),t)}}print(e){for(let t=this.iterator();t.hasNext();){t.next().print(e)}}iterator(){return this.nodeMap.values().iterator()}values(){return this.nodeMap.values()}getBoundaryNodes(e){const t=new ArrayList;for(let n=this.iterator();n.hasNext();){const i=n.next();i.getLabel().getLocation(e)===Location.BOUNDARY&&t.add(i)}return t}add(e){const t=e.getCoordinate();this.addNode(t).add(e)}}class Quadrant{static isNorthern(e){return e===Quadrant.NE||e===Quadrant.NW}static isOpposite(e,t){if(e===t)return!1;return 2===(e-t+4)%4}static commonHalfPlane(e,t){if(e===t)return e;if(2===(e-t+4)%4)return-1;const n=e<t?e:t;return 0===n&&3===(e>t?e:t)?3:n}static isInHalfPlane(e,t){return t===Quadrant.SE?e===Quadrant.SE||e===Quadrant.SW:e===t||e===t+1}static quadrant(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1];if(0===e&&0===t)throw new IllegalArgumentException("Cannot compute the quadrant for point ( "+e+", "+t+" )");return e>=0?t>=0?Quadrant.NE:Quadrant.SE:t>=0?Quadrant.NW:Quadrant.SW}if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){const e=arguments[0],t=arguments[1];if(t.x===e.x&&t.y===e.y)throw new IllegalArgumentException("Cannot compute the quadrant for two identical points "+e);return t.x>=e.x?t.y>=e.y?Quadrant.NE:Quadrant.SE:t.y>=e.y?Quadrant.NW:Quadrant.SW}}}Quadrant.NE=0,Quadrant.NW=1,Quadrant.SW=2,Quadrant.SE=3;class EdgeEnd{constructor(){EdgeEnd.constructor_.apply(this,arguments)}static constructor_(){if(this._edge=null,this._label=null,this._node=null,this._p0=null,this._p1=null,this._dx=null,this._dy=null,this._quadrant=null,1===arguments.length){const e=arguments[0];this._edge=e}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];EdgeEnd.constructor_.call(this,e,t,n,null)}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];EdgeEnd.constructor_.call(this,e),this.init(t,n),this._label=i}}compareDirection(e){return this._dx===e._dx&&this._dy===e._dy?0:this._quadrant>e._quadrant?1:this._quadrant<e._quadrant?-1:Orientation.index(e._p0,e._p1,this._p1)}getDy(){return this._dy}getCoordinate(){return this._p0}setNode(e){this._node=e}print(e){const t=Math.atan2(this._dy,this._dx),n=this.getClass().getName(),i=n.lastIndexOf("."),r=n.substring(i+1);e.print("  "+r+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+t+"   "+this._label)}compareTo(e){const t=e;return this.compareDirection(t)}getDirectedCoordinate(){return this._p1}getDx(){return this._dx}getLabel(){return this._label}getEdge(){return this._edge}getQuadrant(){return this._quadrant}getNode(){return this._node}toString(){const e=Math.atan2(this._dy,this._dx),t=this.getClass().getName(),n=t.lastIndexOf(".");return"  "+t.substring(n+1)+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+e+"   "+this._label}computeLabel(e){}init(e,t){this._p0=e,this._p1=t,this._dx=t.x-e.x,this._dy=t.y-e.y,this._quadrant=Quadrant.quadrant(this._dx,this._dy),Assert.isTrue(!(0===this._dx&&0===this._dy),"EdgeEnd with identical endpoints found")}get interfaces_(){return[d]}}class DirectedEdge extends EdgeEnd{constructor(){super(),DirectedEdge.constructor_.apply(this,arguments)}static constructor_(){this._isForward=null,this._isInResult=!1,this._isVisited=!1,this._sym=null,this._next=null,this._nextMin=null,this._edgeRing=null,this._minEdgeRing=null,this._depth=[0,-999,-999];const e=arguments[0],t=arguments[1];if(EdgeEnd.constructor_.call(this,e),this._isForward=t,t)this.init(e.getCoordinate(0),e.getCoordinate(1));else{const t=e.getNumPoints()-1;this.init(e.getCoordinate(t),e.getCoordinate(t-1))}this.computeDirectedLabel()}static depthFactor(e,t){return e===Location.EXTERIOR&&t===Location.INTERIOR?1:e===Location.INTERIOR&&t===Location.EXTERIOR?-1:0}getNextMin(){return this._nextMin}getDepth(e){return this._depth[e]}setVisited(e){this._isVisited=e}computeDirectedLabel(){this._label=new Label(this._edge.getLabel()),this._isForward||this._label.flip()}getNext(){return this._next}setDepth(e,t){if(-999!==this._depth[e]&&this._depth[e]!==t)throw new TopologyException("assigned depths do not match",this.getCoordinate());this._depth[e]=t}isInteriorAreaEdge(){let e=!0;for(let t=0;t<2;t++)this._label.isArea(t)&&this._label.getLocation(t,Position.LEFT)===Location.INTERIOR&&this._label.getLocation(t,Position.RIGHT)===Location.INTERIOR||(e=!1);return e}setNextMin(e){this._nextMin=e}print(e){super.print.call(this,e),e.print(" "+this._depth[Position.LEFT]+"/"+this._depth[Position.RIGHT]),e.print(" ("+this.getDepthDelta()+")"),this._isInResult&&e.print(" inResult")}setMinEdgeRing(e){this._minEdgeRing=e}isLineEdge(){const e=this._label.isLine(0)||this._label.isLine(1),t=!this._label.isArea(0)||this._label.allPositionsEqual(0,Location.EXTERIOR),n=!this._label.isArea(1)||this._label.allPositionsEqual(1,Location.EXTERIOR);return e&&t&&n}setEdgeRing(e){this._edgeRing=e}getMinEdgeRing(){return this._minEdgeRing}getDepthDelta(){let e=this._edge.getDepthDelta();return this._isForward||(e=-e),e}setInResult(e){this._isInResult=e}getSym(){return this._sym}isForward(){return this._isForward}getEdge(){return this._edge}printEdge(e){this.print(e),e.print(" "),this._isForward?this._edge.print(e):this._edge.printReverse(e)}setSym(e){this._sym=e}setVisitedEdge(e){this.setVisited(e),this._sym.setVisited(e)}setEdgeDepths(e,t){let n=this.getEdge().getDepthDelta();this._isForward||(n=-n);let i=1;e===Position.LEFT&&(i=-1);const r=Position.opposite(e),o=t+n*i;this.setDepth(e,t),this.setDepth(r,o)}getEdgeRing(){return this._edgeRing}isInResult(){return this._isInResult}setNext(e){this._next=e}isVisited(){return this._isVisited}}class NodeFactory{createNode(e){return new Y(e,null)}}class PlanarGraph{constructor(){PlanarGraph.constructor_.apply(this,arguments)}static constructor_(){if(this._edges=new ArrayList,this._nodes=null,this._edgeEndList=new ArrayList,0===arguments.length)this._nodes=new NodeMap(new NodeFactory);else if(1===arguments.length){const e=arguments[0];this._nodes=new NodeMap(e)}}static linkResultDirectedEdges(e){for(let t=e.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges()}}printEdges(e){e.println("Edges:");for(let t=0;t<this._edges.size();t++){e.println("edge "+t+":");const n=this._edges.get(t);n.print(e),n.eiList.print(e)}}find(e){return this._nodes.find(e)}addNode(){if(arguments[0]instanceof Y){const e=arguments[0];return this._nodes.addNode(e)}if(arguments[0]instanceof Coordinate){const e=arguments[0];return this._nodes.addNode(e)}}getNodeIterator(){return this._nodes.iterator()}linkResultDirectedEdges(){for(let e=this._nodes.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges()}}debugPrintln(e){System.out.println(e)}isBoundaryNode(e,t){const n=this._nodes.find(t);if(null===n)return!1;const i=n.getLabel();return null!==i&&i.getLocation(e)===Location.BOUNDARY}linkAllDirectedEdges(){for(let e=this._nodes.iterator();e.hasNext();){e.next().getEdges().linkAllDirectedEdges()}}matchInSameDirection(e,t,n,i){return!!e.equals(n)&&(Orientation.index(e,t,i)===Orientation.COLLINEAR&&Quadrant.quadrant(e,t)===Quadrant.quadrant(n,i))}getEdgeEnds(){return this._edgeEndList}debugPrint(e){System.out.print(e)}getEdgeIterator(){return this._edges.iterator()}findEdgeInSameDirection(e,t){for(let n=0;n<this._edges.size();n++){const i=this._edges.get(n),r=i.getCoordinates();if(this.matchInSameDirection(e,t,r[0],r[1]))return i;if(this.matchInSameDirection(e,t,r[r.length-1],r[r.length-2]))return i}return null}insertEdge(e){this._edges.add(e)}findEdgeEnd(e){for(let t=this.getEdgeEnds().iterator();t.hasNext();){const n=t.next();if(n.getEdge()===e)return n}return null}addEdges(e){for(let t=e.iterator();t.hasNext();){const e=t.next();this._edges.add(e);const n=new DirectedEdge(e,!0),i=new DirectedEdge(e,!1);n.setSym(i),i.setSym(n),this.add(n),this.add(i)}}add(e){this._nodes.add(e),this._edgeEndList.add(e)}getNodes(){return this._nodes.values()}findEdge(e,t){for(let n=0;n<this._edges.size();n++){const i=this._edges.get(n),r=i.getCoordinates();if(e.equals(r[0])&&t.equals(r[1]))return i}return null}}class PolygonBuilder{constructor(){PolygonBuilder.constructor_.apply(this,arguments)}static constructor_(){this._geometryFactory=null,this._shellList=new ArrayList;const e=arguments[0];this._geometryFactory=e}static findEdgeRingContaining(e,t){const n=e.getLinearRing(),i=n.getEnvelopeInternal();let r=n.getCoordinateN(0),o=null,a=null;for(let e=t.iterator();e.hasNext();){const t=e.next(),s=t.getLinearRing(),l=s.getEnvelopeInternal();if(l.equals(i))continue;if(!l.contains(i))continue;r=CoordinateArrays.ptNotInList(n.getCoordinates(),s.getCoordinates());let c=!1;PointLocation.isInRing(r,s.getCoordinates())&&(c=!0),c&&(null===o||a.contains(l))&&(o=t,a=o.getLinearRing().getEnvelopeInternal())}return o}sortShellsAndHoles(e,t,n){for(let i=e.iterator();i.hasNext();){const e=i.next();e.isHole()?n.add(e):t.add(e)}}computePolygons(e){const t=new ArrayList;for(let n=e.iterator();n.hasNext();){const e=n.next().toPolygon(this._geometryFactory);t.add(e)}return t}placeFreeHoles(e,t){for(let n=t.iterator();n.hasNext();){const t=n.next();if(null===t.getShell()){const n=PolygonBuilder.findEdgeRingContaining(t,e);if(null===n)throw new TopologyException("unable to assign hole to a shell",t.getCoordinate(0));t.setShell(n)}}}buildMinimalEdgeRings(e,t,n){const i=new ArrayList;for(let r=e.iterator();r.hasNext();){const e=r.next();if(e.getMaxNodeDegree()>2){e.linkDirectedEdgesForMinimalEdgeRings();const i=e.buildMinimalRings(),r=this.findShell(i);null!==r?(this.placePolygonHoles(r,i),t.add(r)):n.addAll(i)}else i.add(e)}return i}buildMaximalEdgeRings(e){const t=new ArrayList;for(let n=e.iterator();n.hasNext();){const e=n.next();if(e.isInResult()&&e.getLabel().isArea()&&null===e.getEdgeRing()){const n=new MaximalEdgeRing(e,this._geometryFactory);t.add(n),n.setInResult()}}return t}placePolygonHoles(e,t){for(let n=t.iterator();n.hasNext();){const t=n.next();t.isHole()&&t.setShell(e)}}getPolygons(){return this.computePolygons(this._shellList)}findShell(e){let t=0,n=null;for(let i=e.iterator();i.hasNext();){const e=i.next();e.isHole()||(n=e,t++)}return Assert.isTrue(t<=1,"found two shells in MinimalEdgeRing list"),n}add(){if(1===arguments.length){const e=arguments[0];this.add(e.getEdgeEnds(),e.getNodes())}else if(2===arguments.length){const e=arguments[0],t=arguments[1];PlanarGraph.linkResultDirectedEdges(t);const n=this.buildMaximalEdgeRings(e),i=new ArrayList,r=this.buildMinimalEdgeRings(n,this._shellList,i);this.sortShellsAndHoles(r,this._shellList,i),this.placeFreeHoles(this._shellList,i)}}}class Boundable{getBounds(){}}class ItemBoundable{constructor(){ItemBoundable.constructor_.apply(this,arguments)}static constructor_(){this._bounds=null,this._item=null;const e=arguments[0],t=arguments[1];this._bounds=e,this._item=t}getItem(){return this._item}getBounds(){return this._bounds}get interfaces_(){return[Boundable,m]}}class PriorityQueue{constructor(){PriorityQueue.constructor_.apply(this,arguments)}static constructor_(){this._size=null,this._items=null,this._size=0,this._items=new ArrayList,this._items.add(null)}poll(){if(this.isEmpty())return null;const e=this._items.get(1);return this._items.set(1,this._items.get(this._size)),this._size-=1,this.reorder(1),e}size(){return this._size}reorder(e){let t=null;const n=this._items.get(e);for(;2*e<=this._size&&(t=2*e,t!==this._size&&this._items.get(t+1).compareTo(this._items.get(t))<0&&t++,this._items.get(t).compareTo(n)<0);e=t)this._items.set(e,this._items.get(t));this._items.set(e,n)}clear(){this._size=0,this._items.clear()}peek(){if(this.isEmpty())return null;return this._items.get(1)}isEmpty(){return 0===this._size}add(e){this._items.add(null),this._size+=1;let t=this._size;for(this._items.set(0,e);e.compareTo(this._items.get(Math.trunc(t/2)))<0;t/=2)this._items.set(t,this._items.get(Math.trunc(t/2)));this._items.set(t,e)}}class SpatialIndex{insert(e,t){}remove(e,t){}query(){}}class AbstractNode{constructor(){AbstractNode.constructor_.apply(this,arguments)}static constructor_(){if(this._childBoundables=new ArrayList,this._bounds=null,this._level=null,0===arguments.length);else if(1===arguments.length){const e=arguments[0];this._level=e}}getLevel(){return this._level}size(){return this._childBoundables.size()}getChildBoundables(){return this._childBoundables}addChildBoundable(e){Assert.isTrue(null===this._bounds),this._childBoundables.add(e)}isEmpty(){return this._childBoundables.isEmpty()}getBounds(){return null===this._bounds&&(this._bounds=this.computeBounds()),this._bounds}get interfaces_(){return[Boundable,m]}}const Z={reverseOrder:function(){return{compare:(e,t)=>t.compareTo(e)}},min:function(e){return Z.sort(e),e.get(0)},sort:function(e,t){const n=e.toArray();t?Arrays.sort(n,t):Arrays.sort(n);const i=e.iterator();for(let e=0,t=n.length;e<t;e++)i.next(),i.set(n[e])},singletonList:function(e){const t=new ArrayList;return t.add(e),t}};class EnvelopeDistance{static maxDistance(e,t,n,i,r,o,a,s){let l=EnvelopeDistance.distance(e,t,r,o);return l=Math.max(l,EnvelopeDistance.distance(e,t,a,s)),l=Math.max(l,EnvelopeDistance.distance(n,i,r,o)),l=Math.max(l,EnvelopeDistance.distance(n,i,a,s)),l}static distance(e,t,n,i){const r=n-e,o=i-t;return Math.sqrt(r*r+o*o)}static maximumDistance(e,t){const n=Math.min(e.getMinX(),t.getMinX()),i=Math.min(e.getMinY(),t.getMinY()),r=Math.max(e.getMaxX(),t.getMaxX()),o=Math.max(e.getMaxY(),t.getMaxY());return EnvelopeDistance.distance(n,i,r,o)}static minMaxDistance(e,t){const n=e.getMinX(),i=e.getMinY(),r=e.getMaxX(),o=e.getMaxY(),a=t.getMinX(),s=t.getMinY(),l=t.getMaxX(),c=t.getMaxY();let h=EnvelopeDistance.maxDistance(n,i,n,o,a,s,a,c);return h=Math.min(h,EnvelopeDistance.maxDistance(n,i,n,o,a,s,l,s)),h=Math.min(h,EnvelopeDistance.maxDistance(n,i,n,o,l,c,a,c)),h=Math.min(h,EnvelopeDistance.maxDistance(n,i,n,o,l,c,l,s)),h=Math.min(h,EnvelopeDistance.maxDistance(n,i,r,i,a,s,a,c)),h=Math.min(h,EnvelopeDistance.maxDistance(n,i,r,i,a,s,l,s)),h=Math.min(h,EnvelopeDistance.maxDistance(n,i,r,i,l,c,a,c)),h=Math.min(h,EnvelopeDistance.maxDistance(n,i,r,i,l,c,l,s)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,n,o,a,s,a,c)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,n,o,a,s,l,s)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,n,o,l,c,a,c)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,n,o,l,c,l,s)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,r,i,a,s,a,c)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,r,i,a,s,l,s)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,r,i,l,c,a,c)),h=Math.min(h,EnvelopeDistance.maxDistance(r,o,r,i,l,c,l,s)),h}}class BoundablePair{constructor(){BoundablePair.constructor_.apply(this,arguments)}static constructor_(){this._boundable1=null,this._boundable2=null,this._distance=null,this._itemDistance=null;const e=arguments[0],t=arguments[1],n=arguments[2];this._boundable1=e,this._boundable2=t,this._itemDistance=n,this._distance=this.distance()}static area(e){return e.getBounds().getArea()}static isComposite(e){return e instanceof AbstractNode}maximumDistance(){return EnvelopeDistance.maximumDistance(this._boundable1.getBounds(),this._boundable2.getBounds())}expandToQueue(e,t){const n=BoundablePair.isComposite(this._boundable1),i=BoundablePair.isComposite(this._boundable2);if(n&&i)return BoundablePair.area(this._boundable1)>BoundablePair.area(this._boundable2)?(this.expand(this._boundable1,this._boundable2,!1,e,t),null):(this.expand(this._boundable2,this._boundable1,!0,e,t),null);if(n)return this.expand(this._boundable1,this._boundable2,!1,e,t),null;if(i)return this.expand(this._boundable2,this._boundable1,!0,e,t),null;throw new IllegalArgumentException("neither boundable is composite")}isLeaves(){return!(BoundablePair.isComposite(this._boundable1)||BoundablePair.isComposite(this._boundable2))}compareTo(e){const t=e;return this._distance<t._distance?-1:this._distance>t._distance?1:0}expand(e,t,n,i,r){for(let o=e.getChildBoundables().iterator();o.hasNext();){const e=o.next();let a=null;a=n?new BoundablePair(t,e,this._itemDistance):new BoundablePair(e,t,this._itemDistance),a.getDistance()<r&&i.add(a)}}getBoundable(e){return 0===e?this._boundable1:this._boundable2}getDistance(){return this._distance}distance(){return this.isLeaves()?this._itemDistance.distance(this._boundable1,this._boundable2):this._boundable1.getBounds().distance(this._boundable2.getBounds())}get interfaces_(){return[d]}}class ItemVisitor{visitItem(e){}}class AbstractSTRtree{constructor(){AbstractSTRtree.constructor_.apply(this,arguments)}static constructor_(){if(this._root=null,this._built=!1,this._itemBoundables=new ArrayList,this._nodeCapacity=null,0===arguments.length)AbstractSTRtree.constructor_.call(this,AbstractSTRtree.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){const e=arguments[0];Assert.isTrue(e>1,"Node capacity must be greater than 1"),this._nodeCapacity=e}}static compareDoubles(e,t){return e>t?1:e<t?-1:0}queryInternal(){if(b(arguments[2],ItemVisitor)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){const e=arguments[0],t=arguments[2],n=arguments[1].getChildBoundables();for(let i=0;i<n.size();i++){const r=n.get(i);this.getIntersectsOp().intersects(r.getBounds(),e)&&(r instanceof AbstractNode?this.queryInternal(e,r,t):r instanceof ItemBoundable?t.visitItem(r.getItem()):Assert.shouldNeverReachHere())}}else if(b(arguments[2],List)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){const e=arguments[0],t=arguments[2],n=arguments[1].getChildBoundables();for(let i=0;i<n.size();i++){const r=n.get(i);this.getIntersectsOp().intersects(r.getBounds(),e)&&(r instanceof AbstractNode?this.queryInternal(e,r,t):r instanceof ItemBoundable?t.add(r.getItem()):Assert.shouldNeverReachHere())}}}getNodeCapacity(){return this._nodeCapacity}lastNode(e){return e.get(e.size()-1)}size(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this._root));if(1===arguments.length){let e=0;for(let t=arguments[0].getChildBoundables().iterator();t.hasNext();){const n=t.next();n instanceof AbstractNode?e+=this.size(n):n instanceof ItemBoundable&&(e+=1)}return e}}removeItem(e,t){let n=null;for(let i=e.getChildBoundables().iterator();i.hasNext();){const e=i.next();e instanceof ItemBoundable&&e.getItem()===t&&(n=e)}return null!==n&&(e.getChildBoundables().remove(n),!0)}itemsTree(){if(0===arguments.length){this.build();const e=this.itemsTree(this._root);return null===e?new ArrayList:e}if(1===arguments.length){const e=arguments[0],t=new ArrayList;for(let n=e.getChildBoundables().iterator();n.hasNext();){const e=n.next();if(e instanceof AbstractNode){const n=this.itemsTree(e);null!==n&&t.add(n)}else e instanceof ItemBoundable?t.add(e.getItem()):Assert.shouldNeverReachHere()}return t.size()<=0?null:t}}insert(e,t){Assert.isTrue(!this._built,"Cannot insert items into an STR packed R-tree after it has been built."),this._itemBoundables.add(new ItemBoundable(e,t))}boundablesAtLevel(){if(1===arguments.length){const e=arguments[0],t=new ArrayList;return this.boundablesAtLevel(e,this._root,t),t}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];if(Assert.isTrue(e>-2),t.getLevel()===e)return n.add(t),null;for(let i=t.getChildBoundables().iterator();i.hasNext();){const t=i.next();t instanceof AbstractNode?this.boundablesAtLevel(e,t,n):(Assert.isTrue(t instanceof ItemBoundable),-1===e&&n.add(t))}return null}}query(){if(1===arguments.length){const e=arguments[0];this.build();const t=new ArrayList;return this.isEmpty()||this.getIntersectsOp().intersects(this._root.getBounds(),e)&&this.queryInternal(e,this._root,t),t}if(2===arguments.length){const e=arguments[0],t=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this._root.getBounds(),e)&&this.queryInternal(e,this._root,t)}}build(){if(this._built)return null;this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1),this._itemBoundables=null,this._built=!0}getRoot(){return this.build(),this._root}remove(){if(2===arguments.length){const e=arguments[0],t=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this._root.getBounds(),e)&&this.remove(e,this._root,t)}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];let i=this.removeItem(t,n);if(i)return!0;let r=null;for(let o=t.getChildBoundables().iterator();o.hasNext();){const t=o.next();if(this.getIntersectsOp().intersects(t.getBounds(),e)&&(t instanceof AbstractNode&&(i=this.remove(e,t,n),i))){r=t;break}}return null!==r&&r.getChildBoundables().isEmpty()&&t.getChildBoundables().remove(r),i}}createHigherLevels(e,t){Assert.isTrue(!e.isEmpty());const n=this.createParentBoundables(e,t+1);return 1===n.size()?n.get(0):this.createHigherLevels(n,t+1)}depth(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this._root));if(1===arguments.length){let e=0;for(let t=arguments[0].getChildBoundables().iterator();t.hasNext();){const n=t.next();if(n instanceof AbstractNode){const t=this.depth(n);t>e&&(e=t)}}return e+1}}createParentBoundables(e,t){Assert.isTrue(!e.isEmpty());const n=new ArrayList;n.add(this.createNode(t));const i=new ArrayList(e);Z.sort(i,this.getComparator());for(let e=i.iterator();e.hasNext();){const i=e.next();this.lastNode(n).getChildBoundables().size()===this.getNodeCapacity()&&n.add(this.createNode(t)),this.lastNode(n).addChildBoundable(i)}return n}isEmpty(){return this._built?this._root.isEmpty():this._itemBoundables.isEmpty()}get interfaces_(){return[m]}}AbstractSTRtree.IntersectsOp=function(){},AbstractSTRtree.DEFAULT_NODE_CAPACITY=10;class ItemDistance{distance(e,t){}}class STRtree extends AbstractSTRtree{constructor(){super(),STRtree.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)STRtree.constructor_.call(this,STRtree.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){const e=arguments[0];AbstractSTRtree.constructor_.call(this,e)}}static centreX(e){return STRtree.avg(e.getMinX(),e.getMaxX())}static avg(e,t){return(e+t)/2}static getItems(e){const t=new Array(e.size()).fill(null);let n=0;for(;!e.isEmpty();){const i=e.poll();t[n]=i.getBoundable(0).getItem(),n++}return t}static centreY(e){return STRtree.avg(e.getMinY(),e.getMaxY())}createParentBoundablesFromVerticalSlices(e,t){Assert.isTrue(e.length>0);const n=new ArrayList;for(let i=0;i<e.length;i++)n.addAll(this.createParentBoundablesFromVerticalSlice(e[i],t));return n}nearestNeighbourK(){if(2===arguments.length){const e=arguments[0],t=arguments[1];return this.nearestNeighbourK(e,p.POSITIVE_INFINITY,t)}if(3===arguments.length){const e=arguments[0],t=arguments[2];let n=arguments[1];const i=new PriorityQueue;i.add(e);const r=new PriorityQueue;for(;!i.isEmpty()&&n>=0;){const e=i.poll(),o=e.getDistance();if(o>=n)break;if(e.isLeaves())if(r.size()<t)r.add(e);else{r.peek().getDistance()>o&&(r.poll(),r.add(e));n=r.peek().getDistance()}else e.expandToQueue(i,n)}return STRtree.getItems(r)}}createNode(e){return new STRtreeNode(e)}size(){return 0===arguments.length?super.size.call(this):super.size.apply(this,arguments)}insert(){if(!(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof Envelope))return super.insert.apply(this,arguments);{const e=arguments[0],t=arguments[1];if(e.isNull())return null;super.insert.call(this,e,t)}}getIntersectsOp(){return STRtree.intersectsOp}verticalSlices(e,t){const n=Math.trunc(Math.ceil(e.size()/t)),i=new Array(t).fill(null),r=e.iterator();for(let e=0;e<t;e++){i[e]=new ArrayList;let t=0;for(;r.hasNext()&&t<n;){const n=r.next();i[e].add(n),t++}}return i}query(){if(1===arguments.length){const e=arguments[0];return super.query.call(this,e)}if(2===arguments.length){const e=arguments[0],t=arguments[1];super.query.call(this,e,t)}}getComparator(){return STRtree.yComparator}createParentBoundablesFromVerticalSlice(e,t){return super.createParentBoundables.call(this,e,t)}remove(){if(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof Envelope){const e=arguments[0],t=arguments[1];return super.remove.call(this,e,t)}return super.remove.apply(this,arguments)}depth(){return 0===arguments.length?super.depth.call(this):super.depth.apply(this,arguments)}createParentBoundables(e,t){Assert.isTrue(!e.isEmpty());const n=Math.trunc(Math.ceil(e.size()/this.getNodeCapacity())),i=new ArrayList(e);Z.sort(i,STRtree.xComparator);const r=this.verticalSlices(i,Math.trunc(Math.ceil(Math.sqrt(n))));return this.createParentBoundablesFromVerticalSlices(r,t)}nearestNeighbour(){if(1===arguments.length){if(b(arguments[0],ItemDistance)){const e=arguments[0];if(this.isEmpty())return null;const t=new BoundablePair(this.getRoot(),this.getRoot(),e);return this.nearestNeighbour(t)}if(arguments[0]instanceof BoundablePair){const e=arguments[0];let t=p.POSITIVE_INFINITY,n=null;const i=new PriorityQueue;for(i.add(e);!i.isEmpty()&&t>0;){const e=i.poll(),r=e.getDistance();if(r>=t)break;e.isLeaves()?(t=r,n=e):e.expandToQueue(i,t)}return null===n?null:[n.getBoundable(0).getItem(),n.getBoundable(1).getItem()]}}else{if(2===arguments.length){const e=arguments[0],t=arguments[1];if(this.isEmpty()||e.isEmpty())return null;const n=new BoundablePair(this.getRoot(),e.getRoot(),t);return this.nearestNeighbour(n)}if(3===arguments.length){const e=arguments[2],t=new ItemBoundable(arguments[0],arguments[1]),n=new BoundablePair(this.getRoot(),t,e);return this.nearestNeighbour(n)[0]}if(4===arguments.length){const e=arguments[2],t=arguments[3],n=new ItemBoundable(arguments[0],arguments[1]),i=new BoundablePair(this.getRoot(),n,e);return this.nearestNeighbourK(i,t)}}}isWithinDistance(){if(2===arguments.length){const e=arguments[0],t=arguments[1];let n=p.POSITIVE_INFINITY;const i=new PriorityQueue;for(i.add(e);!i.isEmpty();){const e=i.poll(),r=e.getDistance();if(r>t)return!1;if(e.maximumDistance()<=t)return!0;if(e.isLeaves()){if(n=r,n<=t)return!0}else e.expandToQueue(i,n)}return!1}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=new BoundablePair(this.getRoot(),e.getRoot(),t);return this.isWithinDistance(i,n)}}get interfaces_(){return[SpatialIndex,m]}}class STRtreeNode extends AbstractNode{constructor(){super(),STRtreeNode.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0];AbstractNode.constructor_.call(this,e)}computeBounds(){let e=null;for(let t=this.getChildBoundables().iterator();t.hasNext();){const n=t.next();null===e?e=new Envelope(n.getBounds()):e.expandToInclude(n.getBounds())}return e}}STRtree.STRtreeNode=STRtreeNode,STRtree.xComparator=new class{get interfaces_(){return[f]}compare(e,t){return AbstractSTRtree.compareDoubles(STRtree.centreX(e.getBounds()),STRtree.centreX(t.getBounds()))}},STRtree.yComparator=new class{get interfaces_(){return[f]}compare(e,t){return AbstractSTRtree.compareDoubles(STRtree.centreY(e.getBounds()),STRtree.centreY(t.getBounds()))}},STRtree.intersectsOp=new class{get interfaces_(){return[IntersectsOp]}intersects(e,t){return e.intersects(t)}},STRtree.DEFAULT_NODE_CAPACITY=10;class SegmentPointComparator{static relativeSign(e,t){return e<t?-1:e>t?1:0}static compare(e,t,n){if(t.equals2D(n))return 0;const i=SegmentPointComparator.relativeSign(t.x,n.x),r=SegmentPointComparator.relativeSign(t.y,n.y);switch(e){case 0:return SegmentPointComparator.compareValue(i,r);case 1:return SegmentPointComparator.compareValue(r,i);case 2:return SegmentPointComparator.compareValue(r,-i);case 3:return SegmentPointComparator.compareValue(-i,r);case 4:return SegmentPointComparator.compareValue(-i,-r);case 5:return SegmentPointComparator.compareValue(-r,-i);case 6:return SegmentPointComparator.compareValue(-r,i);case 7:return SegmentPointComparator.compareValue(i,-r)}return Assert.shouldNeverReachHere("invalid octant value"),0}static compareValue(e,t){return e<0?-1:e>0?1:t<0?-1:t>0?1:0}}class SegmentNode{constructor(){SegmentNode.constructor_.apply(this,arguments)}static constructor_(){this._segString=null,this.coord=null,this.segmentIndex=null,this._segmentOctant=null,this._isInterior=null;const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];this._segString=e,this.coord=new Coordinate(t),this.segmentIndex=n,this._segmentOctant=i,this._isInterior=!t.equals2D(e.getCoordinate(n))}getCoordinate(){return this.coord}print(e){e.print(this.coord),e.print(" seg # = "+this.segmentIndex)}compareTo(e){const t=e;return this.segmentIndex<t.segmentIndex?-1:this.segmentIndex>t.segmentIndex?1:this.coord.equals2D(t.coord)?0:this._isInterior?t._isInterior?SegmentPointComparator.compare(this._segmentOctant,this.coord,t.coord):1:-1}isEndPoint(e){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===e}toString(){return this.segmentIndex+":"+this.coord.toString()}isInterior(){return this._isInterior}get interfaces_(){return[d]}}class Iterator{hasNext(){}next(){}remove(){}}class SegmentNodeList{constructor(){SegmentNodeList.constructor_.apply(this,arguments)}static constructor_(){this._nodeMap=new TreeMap,this._edge=null;const e=arguments[0];this._edge=e}getSplitCoordinates(){const e=new CoordinateList;this.addEndpoints();const t=this.iterator();let n=t.next();for(;t.hasNext();){const i=t.next();this.addEdgeCoordinates(n,i,e),n=i}return e.toCoordinateArray()}addCollapsedNodes(){const e=new ArrayList;this.findCollapsesFromInsertedNodes(e),this.findCollapsesFromExistingVertices(e);for(let t=e.iterator();t.hasNext();){const e=t.next().intValue();this.add(this._edge.getCoordinate(e),e)}}createSplitEdgePts(e,t){let n=t.segmentIndex-e.segmentIndex+2;if(2===n)return[new Coordinate(e.coord),new Coordinate(t.coord)];const i=this._edge.getCoordinate(t.segmentIndex),r=t.isInterior()||!t.coord.equals2D(i);r||n--;const o=new Array(n).fill(null);let a=0;o[a++]=new Coordinate(e.coord);for(let n=e.segmentIndex+1;n<=t.segmentIndex;n++)o[a++]=this._edge.getCoordinate(n);return r&&(o[a]=new Coordinate(t.coord)),o}print(e){e.println("Intersections:");for(let t=this.iterator();t.hasNext();){t.next().print(e)}}findCollapsesFromExistingVertices(e){for(let t=0;t<this._edge.size()-2;t++){const n=this._edge.getCoordinate(t);this._edge.getCoordinate(t+1);const i=this._edge.getCoordinate(t+2);n.equals2D(i)&&e.add(Integer.valueOf(t+1))}}addEdgeCoordinates(e,t,n){const i=this.createSplitEdgePts(e,t);n.add(i,!1)}iterator(){return this._nodeMap.values().iterator()}addSplitEdges(e){this.addEndpoints(),this.addCollapsedNodes();const t=this.iterator();let n=t.next();for(;t.hasNext();){const i=t.next(),r=this.createSplitEdge(n,i);e.add(r),n=i}}findCollapseIndex(e,t,n){if(!e.coord.equals2D(t.coord))return!1;let i=t.segmentIndex-e.segmentIndex;return t.isInterior()||i--,1===i&&(n[0]=e.segmentIndex+1,!0)}findCollapsesFromInsertedNodes(e){const t=new Array(1).fill(null),n=this.iterator();let i=n.next();for(;n.hasNext();){const r=n.next();this.findCollapseIndex(i,r,t)&&e.add(Integer.valueOf(t[0])),i=r}}getEdge(){return this._edge}addEndpoints(){const e=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0),this.add(this._edge.getCoordinate(e),e)}createSplitEdge(e,t){const n=this.createSplitEdgePts(e,t);return new NodedSegmentString(n,this._edge.getData())}add(e,t){const n=new SegmentNode(this._edge,e,t,this._edge.getSegmentOctant(t)),i=this._nodeMap.get(n);return null!==i?(Assert.isTrue(i.coord.equals2D(e),"Found equal nodes with different coordinates"),i):(this._nodeMap.put(n,n),n)}checkSplitEdgesCorrectness(e){const t=this._edge.getCoordinates(),n=e.get(0).getCoordinate(0);if(!n.equals2D(t[0]))throw new RuntimeException("bad split edge start point at "+n);const i=e.get(e.size()-1).getCoordinates(),r=i[i.length-1];if(!r.equals2D(t[t.length-1]))throw new RuntimeException("bad split edge end point at "+r)}}class Octant{static octant(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1];if(0===e&&0===t)throw new IllegalArgumentException("Cannot compute the octant for point ( "+e+", "+t+" )");const n=Math.abs(e),i=Math.abs(t);return e>=0?t>=0?n>=i?0:1:n>=i?7:6:t>=0?n>=i?3:2:n>=i?4:5}if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){const e=arguments[0],t=arguments[1],n=t.x-e.x,i=t.y-e.y;if(0===n&&0===i)throw new IllegalArgumentException("Cannot compute the octant for two identical points "+e);return Octant.octant(n,i)}}}class SegmentString{getCoordinates(){}size(){}getCoordinate(e){}isClosed(){}setData(e){}getData(){}}class NodableSegmentString{addIntersection(e,t){}get interfaces_(){return[SegmentString]}}class NodedSegmentString{constructor(){NodedSegmentString.constructor_.apply(this,arguments)}static constructor_(){this._nodeList=new SegmentNodeList(this),this._pts=null,this._data=null;const e=arguments[0],t=arguments[1];this._pts=e,this._data=t}static getNodedSubstrings(){if(1===arguments.length){const e=arguments[0],t=new ArrayList;return NodedSegmentString.getNodedSubstrings(e,t),t}if(2===arguments.length){const e=arguments[1];for(let t=arguments[0].iterator();t.hasNext();){t.next().getNodeList().addSplitEdges(e)}}}getCoordinates(){return this._pts}size(){return this._pts.length}getCoordinate(e){return this._pts[e]}isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1])}getSegmentOctant(e){return e===this._pts.length-1?-1:this.safeOctant(this.getCoordinate(e),this.getCoordinate(e+1))}setData(e){this._data=e}safeOctant(e,t){return e.equals2D(t)?0:Octant.octant(e,t)}getData(){return this._data}addIntersection(){if(2===arguments.length){const e=arguments[0],t=arguments[1];this.addIntersectionNode(e,t)}else if(4===arguments.length){const e=arguments[1],t=arguments[3],n=new Coordinate(arguments[0].getIntersection(t));this.addIntersection(n,e)}}toString(){return WKTWriter.toLineString(new CoordinateArraySequence(this._pts))}getNodeList(){return this._nodeList}addIntersectionNode(e,t){let n=t;const i=n+1;if(i<this._pts.length){const t=this._pts[i];e.equals2D(t)&&(n=i)}return this._nodeList.add(e,n)}addIntersections(e,t,n){for(let i=0;i<e.getIntersectionNum();i++)this.addIntersection(e,t,n,i)}get interfaces_(){return[NodableSegmentString]}}class MonotoneChainOverlapAction{constructor(){MonotoneChainOverlapAction.constructor_.apply(this,arguments)}static constructor_(){this._overlapSeg1=new LineSegment,this._overlapSeg2=new LineSegment}overlap(){if(2===arguments.length);else if(4===arguments.length){const e=arguments[1],t=arguments[2],n=arguments[3];arguments[0].getLineSegment(e,this._overlapSeg1),t.getLineSegment(n,this._overlapSeg2),this.overlap(this._overlapSeg1,this._overlapSeg2)}}}let Q=class MonotoneChain{constructor(){MonotoneChain.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._start=null,this._end=null,this._env=null,this._context=null,this._id=null;const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];this._pts=e,this._start=t,this._end=n,this._context=i}getLineSegment(e,t){t.p0=this._pts[e],t.p1=this._pts[e+1]}computeSelect(e,t,n,i){const r=this._pts[t],o=this._pts[n];if(n-t==1)return i.select(this,t),null;if(!e.intersects(r,o))return null;const a=Math.trunc((t+n)/2);t<a&&this.computeSelect(e,t,a,i),a<n&&this.computeSelect(e,a,n,i)}getCoordinates(){const e=new Array(this._end-this._start+1).fill(null);let t=0;for(let n=this._start;n<=this._end;n++)e[t++]=this._pts[n];return e}computeOverlaps(){if(2===arguments.length){const e=arguments[0],t=arguments[1];this.computeOverlaps(this._start,this._end,e,e._start,e._end,t)}else if(6===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=arguments[4],o=arguments[5];if(t-e==1&&r-i==1)return o.overlap(this,e,n,i),null;if(!this.overlaps(e,t,n,i,r))return null;const a=Math.trunc((e+t)/2),s=Math.trunc((i+r)/2);e<a&&(i<s&&this.computeOverlaps(e,a,n,i,s,o),s<r&&this.computeOverlaps(e,a,n,s,r,o)),a<t&&(i<s&&this.computeOverlaps(a,t,n,i,s,o),s<r&&this.computeOverlaps(a,t,n,s,r,o))}}setId(e){this._id=e}select(e,t){this.computeSelect(e,this._start,this._end,t)}getEnvelope(){if(null===this._env){const e=this._pts[this._start],t=this._pts[this._end];this._env=new Envelope(e,t)}return this._env}overlaps(e,t,n,i,r){return Envelope.intersects(this._pts[e],this._pts[t],n._pts[i],n._pts[r])}getEndIndex(){return this._end}getStartIndex(){return this._start}getContext(){return this._context}getId(){return this._id}};class MonotoneChainBuilder{static findChainEnd(e,t){let n=t;for(;n<e.length-1&&e[n].equals2D(e[n+1]);)n++;if(n>=e.length-1)return e.length-1;const i=Quadrant.quadrant(e[n],e[n+1]);let r=t+1;for(;r<e.length;){if(!e[r-1].equals2D(e[r])){if(Quadrant.quadrant(e[r-1],e[r])!==i)break}r++}return r-1}static getChains(){if(1===arguments.length){const e=arguments[0];return MonotoneChainBuilder.getChains(e,null)}if(2===arguments.length){const e=arguments[0],t=arguments[1],n=new ArrayList;let i=0;do{const r=MonotoneChainBuilder.findChainEnd(e,i),o=new Q(e,i,r,t);n.add(o),i=r}while(i<e.length-1);return n}}}class Noder{computeNodes(e){}getNodedSubstrings(){}}class SinglePassNoder{constructor(){SinglePassNoder.constructor_.apply(this,arguments)}static constructor_(){if(this._segInt=null,0===arguments.length);else if(1===arguments.length){const e=arguments[0];this.setSegmentIntersector(e)}}setSegmentIntersector(e){this._segInt=e}get interfaces_(){return[Noder]}}class MCIndexNoder extends SinglePassNoder{constructor(){super(),MCIndexNoder.constructor_.apply(this,arguments)}static constructor_(){if(this._monoChains=new ArrayList,this._index=new STRtree,this._idCounter=0,this._nodedSegStrings=null,this._nOverlaps=0,0===arguments.length);else if(1===arguments.length){const e=arguments[0];SinglePassNoder.constructor_.call(this,e)}}getMonotoneChains(){return this._monoChains}getNodedSubstrings(){return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings)}getIndex(){return this._index}add(e){for(let t=MonotoneChainBuilder.getChains(e.getCoordinates(),e).iterator();t.hasNext();){const e=t.next();e.setId(this._idCounter++),this._index.insert(e.getEnvelope(),e),this._monoChains.add(e)}}computeNodes(e){this._nodedSegStrings=e;for(let t=e.iterator();t.hasNext();)this.add(t.next());this.intersectChains()}intersectChains(){const e=new SegmentOverlapAction(this._segInt);for(let t=this._monoChains.iterator();t.hasNext();){const n=t.next();for(let t=this._index.query(n.getEnvelope()).iterator();t.hasNext();){const i=t.next();if(i.getId()>n.getId()&&(n.computeOverlaps(i,e),this._nOverlaps++),this._segInt.isDone())return null}}}}class SegmentOverlapAction extends MonotoneChainOverlapAction{constructor(){super(),SegmentOverlapAction.constructor_.apply(this,arguments)}static constructor_(){this._si=null;const e=arguments[0];this._si=e}overlap(){if(4!==arguments.length)return super.overlap.apply(this,arguments);{const e=arguments[1],t=arguments[2],n=arguments[3],i=arguments[0].getContext(),r=t.getContext();this._si.processIntersections(i,e,r,n)}}}MCIndexNoder.SegmentOverlapAction=SegmentOverlapAction;class BufferInputLineSimplifier{constructor(){BufferInputLineSimplifier.constructor_.apply(this,arguments)}static constructor_(){this._inputLine=null,this._distanceTol=null,this._isDeleted=null,this._angleOrientation=Orientation.COUNTERCLOCKWISE;const e=arguments[0];this._inputLine=e}static simplify(e,t){return new BufferInputLineSimplifier(e).simplify(t)}isDeletable(e,t,n,i){const r=this._inputLine[e],o=this._inputLine[t],a=this._inputLine[n];return!!this.isConcave(r,o,a)&&(!!this.isShallow(r,o,a,i)&&this.isShallowSampled(r,o,e,n,i))}deleteShallowConcavities(){let e=1,t=this.findNextNonDeletedIndex(e),n=this.findNextNonDeletedIndex(t),i=!1;for(;n<this._inputLine.length;){let r=!1;this.isDeletable(e,t,n,this._distanceTol)&&(this._isDeleted[t]=BufferInputLineSimplifier.DELETE,r=!0,i=!0),e=r?n:t,t=this.findNextNonDeletedIndex(e),n=this.findNextNonDeletedIndex(t)}return i}isShallowConcavity(e,t,n,i){if(!(Orientation.index(e,t,n)===this._angleOrientation))return!1;return Distance.pointToSegment(t,e,n)<i}isShallowSampled(e,t,n,i,r){let o=Math.trunc((i-n)/BufferInputLineSimplifier.NUM_PTS_TO_CHECK);o<=0&&(o=1);for(let a=n;a<i;a+=o)if(!this.isShallow(e,t,this._inputLine[a],r))return!1;return!0}isConcave(e,t,n){return Orientation.index(e,t,n)===this._angleOrientation}simplify(e){this._distanceTol=Math.abs(e),e<0&&(this._angleOrientation=Orientation.CLOCKWISE),this._isDeleted=new Array(this._inputLine.length).fill(null);let t=!1;do{t=this.deleteShallowConcavities()}while(t);return this.collapseLine()}findNextNonDeletedIndex(e){let t=e+1;for(;t<this._inputLine.length&&this._isDeleted[t]===BufferInputLineSimplifier.DELETE;)t++;return t}isShallow(e,t,n,i){return Distance.pointToSegment(t,e,n)<i}collapseLine(){const e=new CoordinateList;for(let t=0;t<this._inputLine.length;t++)this._isDeleted[t]!==BufferInputLineSimplifier.DELETE&&e.add(this._inputLine[t]);return e.toCoordinateArray()}}BufferInputLineSimplifier.INIT=0,BufferInputLineSimplifier.DELETE=1,BufferInputLineSimplifier.KEEP=1,BufferInputLineSimplifier.NUM_PTS_TO_CHECK=10;class OffsetSegmentString{constructor(){OffsetSegmentString.constructor_.apply(this,arguments)}static constructor_(){this._ptList=null,this._precisionModel=null,this._minimimVertexDistance=0,this._ptList=new ArrayList}getCoordinates(){return this._ptList.toArray(OffsetSegmentString.COORDINATE_ARRAY_TYPE)}setPrecisionModel(e){this._precisionModel=e}addPt(e){const t=new Coordinate(e);if(this._precisionModel.makePrecise(t),this.isRedundant(t))return null;this._ptList.add(t)}reverse(){}addPts(e,t){if(t)for(let t=0;t<e.length;t++)this.addPt(e[t]);else for(let t=e.length-1;t>=0;t--)this.addPt(e[t])}isRedundant(e){if(this._ptList.size()<1)return!1;const t=this._ptList.get(this._ptList.size()-1);return e.distance(t)<this._minimimVertexDistance}toString(){return(new GeometryFactory).createLineString(this.getCoordinates()).toString()}closeRing(){if(this._ptList.size()<1)return null;const e=new Coordinate(this._ptList.get(0)),t=this._ptList.get(this._ptList.size()-1);if(e.equals(t))return null;this._ptList.add(e)}setMinimumVertexDistance(e){this._minimimVertexDistance=e}}OffsetSegmentString.COORDINATE_ARRAY_TYPE=new Array(0).fill(null);class Angle{static toDegrees(e){return 180*e/Math.PI}static normalize(e){for(;e>Math.PI;)e-=Angle.PI_TIMES_2;for(;e<=-Math.PI;)e+=Angle.PI_TIMES_2;return e}static angle(){if(1===arguments.length){const e=arguments[0];return Math.atan2(e.y,e.x)}if(2===arguments.length){const e=arguments[0],t=arguments[1],n=t.x-e.x,i=t.y-e.y;return Math.atan2(i,n)}}static isAcute(e,t,n){const i=e.x-t.x,r=e.y-t.y;return i*(n.x-t.x)+r*(n.y-t.y)>0}static isObtuse(e,t,n){const i=e.x-t.x,r=e.y-t.y;return i*(n.x-t.x)+r*(n.y-t.y)<0}static interiorAngle(e,t,n){const i=Angle.angle(t,e),r=Angle.angle(t,n);return Math.abs(r-i)}static normalizePositive(e){if(e<0){for(;e<0;)e+=Angle.PI_TIMES_2;e>=Angle.PI_TIMES_2&&(e=0)}else{for(;e>=Angle.PI_TIMES_2;)e-=Angle.PI_TIMES_2;e<0&&(e=0)}return e}static angleBetween(e,t,n){const i=Angle.angle(t,e),r=Angle.angle(t,n);return Angle.diff(i,r)}static diff(e,t){let n=null;return n=e<t?t-e:e-t,n>Math.PI&&(n=2*Math.PI-n),n}static toRadians(e){return e*Math.PI/180}static getTurn(e,t){const n=Math.sin(t-e);return n>0?Angle.COUNTERCLOCKWISE:n<0?Angle.CLOCKWISE:Angle.NONE}static angleBetweenOriented(e,t,n){const i=Angle.angle(t,e),r=Angle.angle(t,n)-i;return r<=-Math.PI?r+Angle.PI_TIMES_2:r>Math.PI?r-Angle.PI_TIMES_2:r}}Angle.PI_TIMES_2=2*Math.PI,Angle.PI_OVER_2=Math.PI/2,Angle.PI_OVER_4=Math.PI/4,Angle.COUNTERCLOCKWISE=Orientation.COUNTERCLOCKWISE,Angle.CLOCKWISE=Orientation.CLOCKWISE,Angle.NONE=Orientation.COLLINEAR;class OffsetSegmentGenerator{constructor(){OffsetSegmentGenerator.constructor_.apply(this,arguments)}static constructor_(){this._maxCurveSegmentError=0,this._filletAngleQuantum=null,this._closingSegLengthFactor=1,this._segList=null,this._distance=0,this._precisionModel=null,this._bufParams=null,this._li=null,this._s0=null,this._s1=null,this._s2=null,this._seg0=new LineSegment,this._seg1=new LineSegment,this._offset0=new LineSegment,this._offset1=new LineSegment,this._side=0,this._hasNarrowConcaveAngle=!1;const e=arguments[0],t=arguments[1],n=arguments[2];this._precisionModel=e,this._bufParams=t,this._li=new RobustLineIntersector,this._filletAngleQuantum=Math.PI/2/t.getQuadrantSegments(),t.getQuadrantSegments()>=8&&t.getJoinStyle()===BufferParameters.JOIN_ROUND&&(this._closingSegLengthFactor=OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR),this.init(n)}addNextSegment(e,t){if(this._s0=this._s1,this._s1=this._s2,this._s2=e,this._seg0.setCoordinates(this._s0,this._s1),this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0),this._seg1.setCoordinates(this._s1,this._s2),this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1),this._s1.equals(this._s2))return null;const n=Orientation.index(this._s0,this._s1,this._s2),i=n===Orientation.CLOCKWISE&&this._side===Position.LEFT||n===Orientation.COUNTERCLOCKWISE&&this._side===Position.RIGHT;0===n?this.addCollinear(t):i?this.addOutsideTurn(n,t):this.addInsideTurn(n,t)}addLineEndCap(e,t){const n=new LineSegment(e,t),i=new LineSegment;this.computeOffsetSegment(n,Position.LEFT,this._distance,i);const r=new LineSegment;this.computeOffsetSegment(n,Position.RIGHT,this._distance,r);const o=t.x-e.x,a=t.y-e.y,s=Math.atan2(a,o);switch(this._bufParams.getEndCapStyle()){case BufferParameters.CAP_ROUND:this._segList.addPt(i.p1),this.addDirectedFillet(t,s+Math.PI/2,s-Math.PI/2,Orientation.CLOCKWISE,this._distance),this._segList.addPt(r.p1);break;case BufferParameters.CAP_FLAT:this._segList.addPt(i.p1),this._segList.addPt(r.p1);break;case BufferParameters.CAP_SQUARE:const e=new Coordinate;e.x=Math.abs(this._distance)*Math.cos(s),e.y=Math.abs(this._distance)*Math.sin(s);const n=new Coordinate(i.p1.x+e.x,i.p1.y+e.y),o=new Coordinate(r.p1.x+e.x,r.p1.y+e.y);this._segList.addPt(n),this._segList.addPt(o)}}getCoordinates(){return this._segList.getCoordinates()}addMitreJoin(e,t,n,i){const r=Intersection.intersection(t.p0,t.p1,n.p0,n.p1);if(null!==r){if((i<=0?1:r.distance(e)/Math.abs(i))<=this._bufParams.getMitreLimit())return this._segList.addPt(r),null}this.addLimitedMitreJoin(t,n,i,this._bufParams.getMitreLimit())}addOutsideTurn(e,t){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR)return this._segList.addPt(this._offset0.p1),null;this._bufParams.getJoinStyle()===BufferParameters.JOIN_MITRE?this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance):this._bufParams.getJoinStyle()===BufferParameters.JOIN_BEVEL?this.addBevelJoin(this._offset0,this._offset1):(t&&this._segList.addPt(this._offset0.p1),this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,e,this._distance),this._segList.addPt(this._offset1.p0))}createSquare(e){this._segList.addPt(new Coordinate(e.x+this._distance,e.y+this._distance)),this._segList.addPt(new Coordinate(e.x+this._distance,e.y-this._distance)),this._segList.addPt(new Coordinate(e.x-this._distance,e.y-this._distance)),this._segList.addPt(new Coordinate(e.x-this._distance,e.y+this._distance)),this._segList.closeRing()}addSegments(e,t){this._segList.addPts(e,t)}addFirstSegment(){this._segList.addPt(this._offset1.p0)}addCornerFillet(e,t,n,i,r){const o=t.x-e.x,a=t.y-e.y;let s=Math.atan2(a,o);const l=n.x-e.x,c=n.y-e.y,h=Math.atan2(c,l);i===Orientation.CLOCKWISE?s<=h&&(s+=2*Math.PI):s>=h&&(s-=2*Math.PI),this._segList.addPt(t),this.addDirectedFillet(e,s,h,i,r),this._segList.addPt(n)}addLastSegment(){this._segList.addPt(this._offset1.p1)}initSideSegments(e,t,n){this._s1=e,this._s2=t,this._side=n,this._seg1.setCoordinates(e,t),this.computeOffsetSegment(this._seg1,n,this._distance,this._offset1)}addLimitedMitreJoin(e,t,n,i){const r=this._seg0.p1,o=Angle.angle(r,this._seg0.p0),a=Angle.angleBetweenOriented(this._seg0.p0,r,this._seg1.p1)/2,s=Angle.normalize(o+a),l=Angle.normalize(s+Math.PI),c=i*n,h=n-c*Math.abs(Math.sin(a)),u=r.x+c*Math.cos(l),d=r.y+c*Math.sin(l),g=new Coordinate(u,d),m=new LineSegment(r,g),p=m.pointAlongOffset(1,h),f=m.pointAlongOffset(1,-h);this._side===Position.LEFT?(this._segList.addPt(p),this._segList.addPt(f)):(this._segList.addPt(f),this._segList.addPt(p))}addDirectedFillet(e,t,n,i,r){const o=i===Orientation.CLOCKWISE?-1:1,a=Math.abs(t-n),s=Math.trunc(a/this._filletAngleQuantum+.5);if(s<1)return null;const l=a/s,c=new Coordinate;for(let n=0;n<s;n++){const i=t+o*n*l;c.x=e.x+r*Math.cos(i),c.y=e.y+r*Math.sin(i),this._segList.addPt(c)}}computeOffsetSegment(e,t,n,i){const r=t===Position.LEFT?1:-1,o=e.p1.x-e.p0.x,a=e.p1.y-e.p0.y,s=Math.sqrt(o*o+a*a),l=r*n*o/s,c=r*n*a/s;i.p0.x=e.p0.x-c,i.p0.y=e.p0.y+l,i.p1.x=e.p1.x-c,i.p1.y=e.p1.y+l}addInsideTurn(e,t){if(this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1),this._li.hasIntersection())this._segList.addPt(this._li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this._offset0.p1.distance(this._offset1.p0)<this._distance*OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this._segList.addPt(this._offset0.p1);else{if(this._segList.addPt(this._offset0.p1),this._closingSegLengthFactor>0){const e=new Coordinate((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(e);const t=new Coordinate((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(t)}else this._segList.addPt(this._s1);this._segList.addPt(this._offset1.p0)}}createCircle(e){const t=new Coordinate(e.x+this._distance,e.y);this._segList.addPt(t),this.addDirectedFillet(e,0,2*Math.PI,-1,this._distance),this._segList.closeRing()}addBevelJoin(e,t){this._segList.addPt(e.p1),this._segList.addPt(t.p0)}init(e){this._distance=e,this._maxCurveSegmentError=e*(1-Math.cos(this._filletAngleQuantum/2)),this._segList=new OffsetSegmentString,this._segList.setPrecisionModel(this._precisionModel),this._segList.setMinimumVertexDistance(e*OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)}addCollinear(e){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2);this._li.getIntersectionNum()>=2&&(this._bufParams.getJoinStyle()===BufferParameters.JOIN_BEVEL||this._bufParams.getJoinStyle()===BufferParameters.JOIN_MITRE?(e&&this._segList.addPt(this._offset0.p1),this._segList.addPt(this._offset1.p0)):this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,Orientation.CLOCKWISE,this._distance))}closeRing(){this._segList.closeRing()}hasNarrowConcaveAngle(){return this._hasNarrowConcaveAngle}}OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR=80;class OffsetCurveBuilder{constructor(){OffsetCurveBuilder.constructor_.apply(this,arguments)}static constructor_(){this._distance=0,this._precisionModel=null,this._bufParams=null;const e=arguments[0],t=arguments[1];this._precisionModel=e,this._bufParams=t}static copyCoordinates(e){const t=new Array(e.length).fill(null);for(let n=0;n<t.length;n++)t[n]=new Coordinate(e[n]);return t}getOffsetCurve(e,t){if(this._distance=t,0===t)return null;const n=t<0,i=Math.abs(t),r=this.getSegGen(i);e.length<=1?this.computePointCurve(e[0],r):this.computeOffsetCurve(e,n,r);const o=r.getCoordinates();return n&&CoordinateArrays.reverse(o),o}computeSingleSidedBufferCurve(e,t,n){const i=this.simplifyTolerance(this._distance);if(t){n.addSegments(e,!0);const t=BufferInputLineSimplifier.simplify(e,-i),r=t.length-1;n.initSideSegments(t[r],t[r-1],Position.LEFT),n.addFirstSegment();for(let e=r-2;e>=0;e--)n.addNextSegment(t[e],!0)}else{n.addSegments(e,!1);const t=BufferInputLineSimplifier.simplify(e,i),r=t.length-1;n.initSideSegments(t[0],t[1],Position.LEFT),n.addFirstSegment();for(let e=2;e<=r;e++)n.addNextSegment(t[e],!0)}n.addLastSegment(),n.closeRing()}computeRingBufferCurve(e,t,n){let i=this.simplifyTolerance(this._distance);t===Position.RIGHT&&(i=-i);const r=BufferInputLineSimplifier.simplify(e,i),o=r.length-1;n.initSideSegments(r[o-1],r[0],t);for(let e=1;e<=o;e++){const t=1!==e;n.addNextSegment(r[e],t)}n.closeRing()}computeLineBufferCurve(e,t){const n=this.simplifyTolerance(this._distance),i=BufferInputLineSimplifier.simplify(e,n),r=i.length-1;t.initSideSegments(i[0],i[1],Position.LEFT);for(let e=2;e<=r;e++)t.addNextSegment(i[e],!0);t.addLastSegment(),t.addLineEndCap(i[r-1],i[r]);const o=BufferInputLineSimplifier.simplify(e,-n),a=o.length-1;t.initSideSegments(o[a],o[a-1],Position.LEFT);for(let e=a-2;e>=0;e--)t.addNextSegment(o[e],!0);t.addLastSegment(),t.addLineEndCap(o[1],o[0]),t.closeRing()}computePointCurve(e,t){switch(this._bufParams.getEndCapStyle()){case BufferParameters.CAP_ROUND:t.createCircle(e);break;case BufferParameters.CAP_SQUARE:t.createSquare(e)}}getLineCurve(e,t){if(this._distance=t,this.isLineOffsetEmpty(t))return null;const n=Math.abs(t),i=this.getSegGen(n);if(e.length<=1)this.computePointCurve(e[0],i);else if(this._bufParams.isSingleSided()){const n=t<0;this.computeSingleSidedBufferCurve(e,n,i)}else this.computeLineBufferCurve(e,i);return i.getCoordinates()}getBufferParameters(){return this._bufParams}simplifyTolerance(e){return e*this._bufParams.getSimplifyFactor()}getRingCurve(e,t,n){if(this._distance=n,e.length<=2)return this.getLineCurve(e,n);if(0===n)return OffsetCurveBuilder.copyCoordinates(e);const i=this.getSegGen(n);return this.computeRingBufferCurve(e,t,i),i.getCoordinates()}computeOffsetCurve(e,t,n){const i=this.simplifyTolerance(this._distance);if(t){const t=BufferInputLineSimplifier.simplify(e,-i),r=t.length-1;n.initSideSegments(t[r],t[r-1],Position.LEFT),n.addFirstSegment();for(let e=r-2;e>=0;e--)n.addNextSegment(t[e],!0)}else{const t=BufferInputLineSimplifier.simplify(e,i),r=t.length-1;n.initSideSegments(t[0],t[1],Position.LEFT),n.addFirstSegment();for(let e=2;e<=r;e++)n.addNextSegment(t[e],!0)}n.addLastSegment()}isLineOffsetEmpty(e){return 0===e||e<0&&!this._bufParams.isSingleSided()}getSegGen(e){return new OffsetSegmentGenerator(this._precisionModel,this._bufParams,e)}}class SubgraphDepthLocater{constructor(){SubgraphDepthLocater.constructor_.apply(this,arguments)}static constructor_(){this._subgraphs=null,this._seg=new LineSegment;const e=arguments[0];this._subgraphs=e}findStabbedSegments(){if(1===arguments.length){const e=arguments[0],t=new ArrayList;for(let n=this._subgraphs.iterator();n.hasNext();){const i=n.next(),r=i.getEnvelope();e.y<r.getMinY()||e.y>r.getMaxY()||this.findStabbedSegments(e,i.getDirectedEdges(),t)}return t}if(3===arguments.length)if(b(arguments[2],List)&&arguments[0]instanceof Coordinate&&arguments[1]instanceof DirectedEdge){const e=arguments[0],t=arguments[1],n=arguments[2],i=t.getEdge().getCoordinates();for(let r=0;r<i.length-1;r++){this._seg.p0=i[r],this._seg.p1=i[r+1],this._seg.p0.y>this._seg.p1.y&&this._seg.reverse();if(Math.max(this._seg.p0.x,this._seg.p1.x)<e.x)continue;if(this._seg.isHorizontal())continue;if(e.y<this._seg.p0.y||e.y>this._seg.p1.y)continue;if(Orientation.index(this._seg.p0,this._seg.p1,e)===Orientation.RIGHT)continue;let o=t.getDepth(Position.LEFT);this._seg.p0.equals(i[r])||(o=t.getDepth(Position.RIGHT));const a=new DepthSegment(this._seg,o);n.add(a)}}else if(b(arguments[2],List)&&arguments[0]instanceof Coordinate&&b(arguments[1],List)){const e=arguments[0],t=arguments[2];for(let n=arguments[1].iterator();n.hasNext();){const i=n.next();i.isForward()&&this.findStabbedSegments(e,i,t)}}}getDepth(e){const t=this.findStabbedSegments(e);if(0===t.size())return 0;return Z.min(t)._leftDepth}}class DepthSegment{constructor(){DepthSegment.constructor_.apply(this,arguments)}static constructor_(){this._upwardSeg=null,this._leftDepth=null;const e=arguments[0],t=arguments[1];this._upwardSeg=new LineSegment(e),this._leftDepth=t}compareTo(e){const t=e;if(this._upwardSeg.minX()>=t._upwardSeg.maxX())return 1;if(this._upwardSeg.maxX()<=t._upwardSeg.minX())return-1;let n=this._upwardSeg.orientationIndex(t._upwardSeg);return 0!==n?n:(n=-1*t._upwardSeg.orientationIndex(this._upwardSeg),0!==n?n:this._upwardSeg.compareTo(t._upwardSeg))}compareX(e,t){const n=e.p0.compareTo(t.p0);return 0!==n?n:e.p1.compareTo(t.p1)}toString(){return this._upwardSeg.toString()}get interfaces_(){return[d]}}SubgraphDepthLocater.DepthSegment=DepthSegment;class NotRepresentableException extends Exception{constructor(){super(),NotRepresentableException.constructor_.apply(this,arguments)}static constructor_(){Exception.constructor_.call(this,"Projective point not representable on the Cartesian plane.")}}class HCoordinate{constructor(){HCoordinate.constructor_.apply(this,arguments)}static constructor_(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){const e=arguments[0];this.x=e.x,this.y=e.y,this.w=1}else if(2===arguments.length){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1];this.x=e,this.y=t,this.w=1}else if(arguments[0]instanceof HCoordinate&&arguments[1]instanceof HCoordinate){const e=arguments[0],t=arguments[1];this.x=e.y*t.w-t.y*e.w,this.y=t.x*e.w-e.x*t.w,this.w=e.x*t.y-t.x*e.y}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){const e=arguments[0],t=arguments[1];this.x=e.y-t.y,this.y=t.x-e.x,this.w=e.x*t.y-t.x*e.y}}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this.x=e,this.y=t,this.w=n}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=e.y-t.y,o=t.x-e.x,a=e.x*t.y-t.x*e.y,s=n.y-i.y,l=i.x-n.x,c=n.x*i.y-i.x*n.y;this.x=o*c-l*a,this.y=s*a-r*c,this.w=r*l-s*o}}getY(){const e=this.y/this.w;if(p.isNaN(e)||p.isInfinite(e))throw new NotRepresentableException;return e}getX(){const e=this.x/this.w;if(p.isNaN(e)||p.isInfinite(e))throw new NotRepresentableException;return e}getCoordinate(){const e=new Coordinate;return e.x=this.getX(),e.y=this.getY(),e}}class Triangle{constructor(){Triangle.constructor_.apply(this,arguments)}static constructor_(){this.p0=null,this.p1=null,this.p2=null;const e=arguments[0],t=arguments[1],n=arguments[2];this.p0=e,this.p1=t,this.p2=n}static area(e,t,n){return Math.abs(((n.x-e.x)*(t.y-e.y)-(t.x-e.x)*(n.y-e.y))/2)}static signedArea(e,t,n){return((n.x-e.x)*(t.y-e.y)-(t.x-e.x)*(n.y-e.y))/2}static det(e,t,n,i){return e*i-t*n}static interpolateZ(e,t,n,i){const r=t.x,o=t.y,a=n.x-r,s=i.x-r,l=n.y-o,c=i.y-o,h=a*c-s*l,u=e.x-r,d=e.y-o,g=(c*u-s*d)/h,m=(-l*u+a*d)/h;return t.getZ()+g*(n.getZ()-t.getZ())+m*(i.getZ()-t.getZ())}static longestSideLength(e,t,n){const i=e.distance(t),r=t.distance(n),o=n.distance(e);let a=i;return r>a&&(a=r),o>a&&(a=o),a}static circumcentreDD(e,t,n){const i=DD.valueOf(e.x).subtract(n.x),r=DD.valueOf(e.y).subtract(n.y),o=DD.valueOf(t.x).subtract(n.x),a=DD.valueOf(t.y).subtract(n.y),s=DD.determinant(i,r,o,a).multiply(2),l=i.sqr().add(r.sqr()),c=o.sqr().add(a.sqr()),h=DD.determinant(r,l,a,c),u=DD.determinant(i,l,o,c),d=DD.valueOf(n.x).subtract(h.divide(s)).doubleValue(),g=DD.valueOf(n.y).add(u.divide(s)).doubleValue();return new Coordinate(d,g)}static isAcute(e,t,n){return!!Angle.isAcute(e,t,n)&&(!!Angle.isAcute(t,n,e)&&!!Angle.isAcute(n,e,t))}static circumcentre(e,t,n){const i=n.x,r=n.y,o=e.x-i,a=e.y-r,s=t.x-i,l=t.y-r,c=2*Triangle.det(o,a,s,l),h=Triangle.det(a,o*o+a*a,l,s*s+l*l),u=Triangle.det(o,o*o+a*a,s,s*s+l*l);return new Coordinate(i-h/c,r+u/c)}static perpendicularBisector(e,t){const n=t.x-e.x,i=t.y-e.y,r=new HCoordinate(e.x+n/2,e.y+i/2,1),o=new HCoordinate(e.x-i+n/2,e.y+n+i/2,1);return new HCoordinate(r,o)}static angleBisector(e,t,n){const i=t.distance(e),r=i/(i+t.distance(n)),o=n.x-e.x,a=n.y-e.y;return new Coordinate(e.x+r*o,e.y+r*a)}static area3D(e,t,n){const i=t.x-e.x,r=t.y-e.y,o=t.getZ()-e.getZ(),a=n.x-e.x,s=n.y-e.y,l=n.getZ()-e.getZ(),c=r*l-o*s,h=o*a-i*l,u=i*s-r*a,d=c*c+h*h+u*u;return Math.sqrt(d)/2}static centroid(e,t,n){const i=(e.x+t.x+n.x)/3,r=(e.y+t.y+n.y)/3;return new Coordinate(i,r)}static inCentre(e,t,n){const i=t.distance(n),r=e.distance(n),o=e.distance(t),a=i+r+o,s=(i*e.x+r*t.x+o*n.x)/a,l=(i*e.y+r*t.y+o*n.y)/a;return new Coordinate(s,l)}area(){return Triangle.area(this.p0,this.p1,this.p2)}signedArea(){return Triangle.signedArea(this.p0,this.p1,this.p2)}interpolateZ(e){if(null===e)throw new IllegalArgumentException("Supplied point is null.");return Triangle.interpolateZ(e,this.p0,this.p1,this.p2)}longestSideLength(){return Triangle.longestSideLength(this.p0,this.p1,this.p2)}isAcute(){return Triangle.isAcute(this.p0,this.p1,this.p2)}circumcentre(){return Triangle.circumcentre(this.p0,this.p1,this.p2)}area3D(){return Triangle.area3D(this.p0,this.p1,this.p2)}centroid(){return Triangle.centroid(this.p0,this.p1,this.p2)}inCentre(){return Triangle.inCentre(this.p0,this.p1,this.p2)}}class OffsetCurveSetBuilder{constructor(){OffsetCurveSetBuilder.constructor_.apply(this,arguments)}static constructor_(){this._inputGeom=null,this._distance=null,this._curveBuilder=null,this._curveList=new ArrayList;const e=arguments[0],t=arguments[1],n=arguments[2];this._inputGeom=e,this._distance=t,this._curveBuilder=n}addRingSide(e,t,n,i,r){if(0===t&&e.length<LinearRing.MINIMUM_VALID_SIZE)return null;let o=i,a=r;e.length>=LinearRing.MINIMUM_VALID_SIZE&&Orientation.isCCW(e)&&(o=r,a=i,n=Position.opposite(n));const s=this._curveBuilder.getRingCurve(e,n,t);this.addCurve(s,o,a)}addRingBothSides(e,t){this.addRingSide(e,t,Position.LEFT,Location.EXTERIOR,Location.INTERIOR),this.addRingSide(e,t,Position.RIGHT,Location.INTERIOR,Location.EXTERIOR)}addPoint(e){if(this._distance<=0)return null;const t=e.getCoordinates(),n=this._curveBuilder.getLineCurve(t,this._distance);this.addCurve(n,Location.EXTERIOR,Location.INTERIOR)}addPolygon(e){let t=this._distance,n=Position.LEFT;this._distance<0&&(t=-this._distance,n=Position.RIGHT);const i=e.getExteriorRing(),r=CoordinateArrays.removeRepeatedPoints(i.getCoordinates());if(this._distance<0&&this.isErodedCompletely(i,this._distance))return null;if(this._distance<=0&&r.length<3)return null;this.addRingSide(r,t,n,Location.EXTERIOR,Location.INTERIOR);for(let i=0;i<e.getNumInteriorRing();i++){const r=e.getInteriorRingN(i),o=CoordinateArrays.removeRepeatedPoints(r.getCoordinates());this._distance>0&&this.isErodedCompletely(r,-this._distance)||this.addRingSide(o,t,Position.opposite(n),Location.INTERIOR,Location.EXTERIOR)}}isTriangleErodedCompletely(e,t){const n=new Triangle(e[0],e[1],e[2]),i=n.inCentre();return Distance.pointToSegment(i,n.p0,n.p1)<Math.abs(t)}addLineString(e){if(this._curveBuilder.isLineOffsetEmpty(this._distance))return null;const t=CoordinateArrays.removeRepeatedPoints(e.getCoordinates());if(CoordinateArrays.isRing(t)&&!this._curveBuilder.getBufferParameters().isSingleSided())this.addRingBothSides(t,this._distance);else{const e=this._curveBuilder.getLineCurve(t,this._distance);this.addCurve(e,Location.EXTERIOR,Location.INTERIOR)}}addCurve(e,t,n){if(null===e||e.length<2)return null;const i=new NodedSegmentString(e,new Label(0,Location.BOUNDARY,t,n));this._curveList.add(i)}getCurves(){return this.add(this._inputGeom),this._curveList}add(e){if(e.isEmpty())return null;if(e instanceof Polygon)this.addPolygon(e);else if(e instanceof LineString)this.addLineString(e);else if(e instanceof Point)this.addPoint(e);else if(e instanceof MultiPoint)this.addCollection(e);else if(e instanceof MultiLineString)this.addCollection(e);else if(e instanceof MultiPolygon)this.addCollection(e);else{if(!(e instanceof GeometryCollection))throw new UnsupportedOperationException(e.getGeometryType());this.addCollection(e)}}isErodedCompletely(e,t){const n=e.getCoordinates();if(n.length<4)return t<0;if(4===n.length)return this.isTriangleErodedCompletely(n,t);const i=e.getEnvelopeInternal(),r=Math.min(i.getHeight(),i.getWidth());return t<0&&2*Math.abs(t)>r}addCollection(e){for(let t=0;t<e.getNumGeometries();t++){const n=e.getGeometryN(t);this.add(n)}}}class PointOnGeometryLocator{locate(e){}}class GeometryCollectionIterator{constructor(){GeometryCollectionIterator.constructor_.apply(this,arguments)}static constructor_(){this._parent=null,this._atStart=null,this._max=null,this._index=null,this._subcollectionIterator=null;const e=arguments[0];this._parent=e,this._atStart=!0,this._index=0,this._max=e.getNumGeometries()}static isAtomic(e){return!(e instanceof GeometryCollection)}next(){if(this._atStart)return this._atStart=!1,GeometryCollectionIterator.isAtomic(this._parent)&&this._index++,this._parent;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return this._subcollectionIterator.next();this._subcollectionIterator=null}if(this._index>=this._max)throw new NoSuchElementException;const e=this._parent.getGeometryN(this._index++);return e instanceof GeometryCollection?(this._subcollectionIterator=new GeometryCollectionIterator(e),this._subcollectionIterator.next()):e}remove(){throw new UnsupportedOperationException(this.getClass().getName())}hasNext(){if(this._atStart)return!0;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return!0;this._subcollectionIterator=null}return!(this._index>=this._max)}get interfaces_(){return[Iterator]}}class SimplePointInAreaLocator{constructor(){SimplePointInAreaLocator.constructor_.apply(this,arguments)}static constructor_(){this._geom=null;const e=arguments[0];this._geom=e}static locatePointInPolygon(e,t){if(t.isEmpty())return Location.EXTERIOR;const n=t.getExteriorRing(),i=SimplePointInAreaLocator.locatePointInRing(e,n);if(i!==Location.INTERIOR)return i;for(let n=0;n<t.getNumInteriorRing();n++){const i=t.getInteriorRingN(n),r=SimplePointInAreaLocator.locatePointInRing(e,i);if(r===Location.BOUNDARY)return Location.BOUNDARY;if(r===Location.INTERIOR)return Location.EXTERIOR}return Location.INTERIOR}static locatePointInRing(e,t){return t.getEnvelopeInternal().intersects(e)?PointLocation.locateInRing(e,t.getCoordinates()):Location.EXTERIOR}static containsPointInPolygon(e,t){return Location.EXTERIOR!==SimplePointInAreaLocator.locatePointInPolygon(e,t)}static locateInGeometry(e,t){if(t instanceof Polygon)return SimplePointInAreaLocator.locatePointInPolygon(e,t);if(t instanceof GeometryCollection){const n=new GeometryCollectionIterator(t);for(;n.hasNext();){const i=n.next();if(i!==t){const t=SimplePointInAreaLocator.locateInGeometry(e,i);if(t!==Location.EXTERIOR)return t}}}return Location.EXTERIOR}static isContained(e,t){return Location.EXTERIOR!==SimplePointInAreaLocator.locate(e,t)}static locate(e,t){return t.isEmpty()?Location.EXTERIOR:t.getEnvelopeInternal().intersects(e)?SimplePointInAreaLocator.locateInGeometry(e,t):Location.EXTERIOR}locate(e){return SimplePointInAreaLocator.locate(e,this._geom)}get interfaces_(){return[PointOnGeometryLocator]}}class EdgeEndStar{constructor(){EdgeEndStar.constructor_.apply(this,arguments)}static constructor_(){this._edgeMap=new TreeMap,this._edgeList=null,this._ptInAreaLocation=[Location.NONE,Location.NONE]}getNextCW(e){this.getEdges();const t=this._edgeList.indexOf(e);let n=t-1;return 0===t&&(n=this._edgeList.size()-1),this._edgeList.get(n)}propagateSideLabels(e){let t=Location.NONE;for(let n=this.iterator();n.hasNext();){const i=n.next().getLabel();i.isArea(e)&&i.getLocation(e,Position.LEFT)!==Location.NONE&&(t=i.getLocation(e,Position.LEFT))}if(t===Location.NONE)return null;let n=t;for(let t=this.iterator();t.hasNext();){const i=t.next(),r=i.getLabel();if(r.getLocation(e,Position.ON)===Location.NONE&&r.setLocation(e,Position.ON,n),r.isArea(e)){const t=r.getLocation(e,Position.LEFT),o=r.getLocation(e,Position.RIGHT);if(o!==Location.NONE){if(o!==n)throw new TopologyException("side location conflict",i.getCoordinate());t===Location.NONE&&Assert.shouldNeverReachHere("found single null side (at "+i.getCoordinate()+")"),n=t}else Assert.isTrue(r.getLocation(e,Position.LEFT)===Location.NONE,"found single null side"),r.setLocation(e,Position.RIGHT,n),r.setLocation(e,Position.LEFT,n)}}}getCoordinate(){const e=this.iterator();if(!e.hasNext())return null;return e.next().getCoordinate()}print(e){System.out.println("EdgeEndStar:   "+this.getCoordinate());for(let t=this.iterator();t.hasNext();){t.next().print(e)}}isAreaLabelsConsistent(e){return this.computeEdgeEndLabels(e.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)}checkAreaLabelsConsistent(e){const t=this.getEdges();if(t.size()<=0)return!0;const n=t.size()-1,i=t.get(n).getLabel().getLocation(e,Position.LEFT);Assert.isTrue(i!==Location.NONE,"Found unlabelled area edge");let r=i;for(let t=this.iterator();t.hasNext();){const n=t.next().getLabel();Assert.isTrue(n.isArea(e),"Found non-area edge");const i=n.getLocation(e,Position.LEFT),o=n.getLocation(e,Position.RIGHT);if(i===o)return!1;if(o!==r)return!1;r=i}return!0}findIndex(e){this.iterator();for(let t=0;t<this._edgeList.size();t++){if(this._edgeList.get(t)===e)return t}return-1}iterator(){return this.getEdges().iterator()}getEdges(){return null===this._edgeList&&(this._edgeList=new ArrayList(this._edgeMap.values())),this._edgeList}getLocation(e,t,n){return this._ptInAreaLocation[e]===Location.NONE&&(this._ptInAreaLocation[e]=SimplePointInAreaLocator.locate(t,n[e].getGeometry())),this._ptInAreaLocation[e]}toString(){const e=new StringBuffer;e.append("EdgeEndStar:   "+this.getCoordinate()),e.append("\n");for(let t=this.iterator();t.hasNext();){const n=t.next();e.append(n),e.append("\n")}return e.toString()}computeEdgeEndLabels(e){for(let t=this.iterator();t.hasNext();){t.next().computeLabel(e)}}computeLabelling(e){this.computeEdgeEndLabels(e[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);const t=[!1,!1];for(let e=this.iterator();e.hasNext();){const n=e.next().getLabel();for(let e=0;e<2;e++)n.isLine(e)&&n.getLocation(e)===Location.BOUNDARY&&(t[e]=!0)}for(let n=this.iterator();n.hasNext();){const i=n.next(),r=i.getLabel();for(let n=0;n<2;n++)if(r.isAnyNull(n)){let o=Location.NONE;if(t[n])o=Location.EXTERIOR;else{const t=i.getCoordinate();o=this.getLocation(n,t,e)}r.setAllLocationsIfNull(n,o)}}}getDegree(){return this._edgeMap.size()}insertEdgeEnd(e,t){this._edgeMap.put(e,t),this._edgeList=null}}class DirectedEdgeStar extends EdgeEndStar{constructor(){super(),DirectedEdgeStar.constructor_.apply(this,arguments)}static constructor_(){this._resultAreaEdgeList=null,this._label=null,this._SCANNING_FOR_INCOMING=1,this._LINKING_TO_OUTGOING=2}linkResultDirectedEdges(){this.getResultAreaEdges();let e=null,t=null,n=this._SCANNING_FOR_INCOMING;for(let i=0;i<this._resultAreaEdgeList.size();i++){const r=this._resultAreaEdgeList.get(i),o=r.getSym();if(r.getLabel().isArea())switch(null===e&&r.isInResult()&&(e=r),n){case this._SCANNING_FOR_INCOMING:if(!o.isInResult())continue;t=o,n=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(!r.isInResult())continue;t.setNext(r),n=this._SCANNING_FOR_INCOMING}}if(n===this._LINKING_TO_OUTGOING){if(null===e)throw new TopologyException("no outgoing dirEdge found",this.getCoordinate());Assert.isTrue(e.isInResult(),"unable to link last incoming dirEdge"),t.setNext(e)}}insert(e){const t=e;this.insertEdgeEnd(t,t)}getRightmostEdge(){const e=this.getEdges(),t=e.size();if(t<1)return null;const n=e.get(0);if(1===t)return n;const i=e.get(t-1),r=n.getQuadrant(),o=i.getQuadrant();return Quadrant.isNorthern(r)&&Quadrant.isNorthern(o)?n:Quadrant.isNorthern(r)||Quadrant.isNorthern(o)?0!==n.getDy()?n:0!==i.getDy()?i:(Assert.shouldNeverReachHere("found two horizontal edges incident on node"),null):i}print(e){System.out.println("DirectedEdgeStar: "+this.getCoordinate());for(let t=this.iterator();t.hasNext();){const n=t.next();e.print("out "),n.print(e),e.println(),e.print("in "),n.getSym().print(e),e.println()}}getResultAreaEdges(){if(null!==this._resultAreaEdgeList)return this._resultAreaEdgeList;this._resultAreaEdgeList=new ArrayList;for(let e=this.iterator();e.hasNext();){const t=e.next();(t.isInResult()||t.getSym().isInResult())&&this._resultAreaEdgeList.add(t)}return this._resultAreaEdgeList}updateLabelling(e){for(let t=this.iterator();t.hasNext();){const n=t.next().getLabel();n.setAllLocationsIfNull(0,e.getLocation(0)),n.setAllLocationsIfNull(1,e.getLocation(1))}}linkAllDirectedEdges(){this.getEdges();let e=null,t=null;for(let n=this._edgeList.size()-1;n>=0;n--){const i=this._edgeList.get(n),r=i.getSym();null===t&&(t=r),null!==e&&r.setNext(e),e=i}t.setNext(e)}computeDepths(){if(1===arguments.length){const e=arguments[0],t=this.findIndex(e),n=e.getDepth(Position.LEFT),i=e.getDepth(Position.RIGHT),r=this.computeDepths(t+1,this._edgeList.size(),n);if(this.computeDepths(0,t,r)!==i)throw new TopologyException("depth mismatch at "+e.getCoordinate())}else if(3===arguments.length){const e=arguments[1];let t=arguments[2];for(let n=arguments[0];n<e;n++){const e=this._edgeList.get(n);e.setEdgeDepths(Position.RIGHT,t),t=e.getDepth(Position.LEFT)}return t}}mergeSymLabels(){for(let e=this.iterator();e.hasNext();){const t=e.next();t.getLabel().merge(t.getSym().getLabel())}}linkMinimalDirectedEdges(e){let t=null,n=null,i=this._SCANNING_FOR_INCOMING;for(let r=this._resultAreaEdgeList.size()-1;r>=0;r--){const o=this._resultAreaEdgeList.get(r),a=o.getSym();switch(null===t&&o.getEdgeRing()===e&&(t=o),i){case this._SCANNING_FOR_INCOMING:if(a.getEdgeRing()!==e)continue;n=a,i=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(o.getEdgeRing()!==e)continue;n.setNextMin(o),i=this._SCANNING_FOR_INCOMING}}i===this._LINKING_TO_OUTGOING&&(Assert.isTrue(null!==t,"found null for first outgoing dirEdge"),Assert.isTrue(t.getEdgeRing()===e,"unable to link last incoming dirEdge"),n.setNextMin(t))}getOutgoingDegree(){if(0===arguments.length){let e=0;for(let t=this.iterator();t.hasNext();){t.next().isInResult()&&e++}return e}if(1===arguments.length){const e=arguments[0];let t=0;for(let n=this.iterator();n.hasNext();){n.next().getEdgeRing()===e&&t++}return t}}getLabel(){return this._label}findCoveredLineEdges(){let e=Location.NONE;for(let t=this.iterator();t.hasNext();){const n=t.next(),i=n.getSym();if(!n.isLineEdge()){if(n.isInResult()){e=Location.INTERIOR;break}if(i.isInResult()){e=Location.EXTERIOR;break}}}if(e===Location.NONE)return null;let t=e;for(let e=this.iterator();e.hasNext();){const n=e.next(),i=n.getSym();n.isLineEdge()?n.getEdge().setCovered(t===Location.INTERIOR):(n.isInResult()&&(t=Location.EXTERIOR),i.isInResult()&&(t=Location.INTERIOR))}}computeLabelling(e){super.computeLabelling.call(this,e),this._label=new Label(Location.NONE);for(let e=this.iterator();e.hasNext();){const t=e.next().getEdge().getLabel();for(let e=0;e<2;e++){const n=t.getLocation(e);n!==Location.INTERIOR&&n!==Location.BOUNDARY||this._label.setLocation(e,Location.INTERIOR)}}}}class OverlayNodeFactory extends NodeFactory{constructor(){super()}createNode(e){return new Y(e,new DirectedEdgeStar)}}class OrientedCoordinateArray{constructor(){OrientedCoordinateArray.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._orientation=null;const e=arguments[0];this._pts=e,this._orientation=OrientedCoordinateArray.orientation(e)}static orientation(e){return 1===CoordinateArrays.increasingDirection(e)}static compareOriented(e,t,n,i){const r=t?1:-1,o=i?1:-1,a=t?e.length:-1,s=i?n.length:-1;let l=t?0:e.length-1,c=i?0:n.length-1;for(;;){const t=e[l].compareTo(n[c]);if(0!==t)return t;l+=r,c+=o;const i=l===a,h=c===s;if(i&&!h)return-1;if(!i&&h)return 1;if(i&&h)return 0}}compareTo(e){const t=e;return OrientedCoordinateArray.compareOriented(this._pts,this._orientation,t._pts,t._orientation)}get interfaces_(){return[d]}}class EdgeList{constructor(){EdgeList.constructor_.apply(this,arguments)}static constructor_(){this._edges=new ArrayList,this._ocaMap=new TreeMap}print(e){e.print("MULTILINESTRING ( ");for(let t=0;t<this._edges.size();t++){const n=this._edges.get(t);t>0&&e.print(","),e.print("(");const i=n.getCoordinates();for(let t=0;t<i.length;t++)t>0&&e.print(","),e.print(i[t].x+" "+i[t].y);e.println(")")}e.print(")  ")}addAll(e){for(let t=e.iterator();t.hasNext();)this.add(t.next())}findEdgeIndex(e){for(let t=0;t<this._edges.size();t++)if(this._edges.get(t).equals(e))return t;return-1}iterator(){return this._edges.iterator()}getEdges(){return this._edges}get(e){return this._edges.get(e)}findEqualEdge(e){const t=new OrientedCoordinateArray(e.getCoordinates());return this._ocaMap.get(t)}add(e){this._edges.add(e);const t=new OrientedCoordinateArray(e.getCoordinates());this._ocaMap.put(t,e)}}let ee=class SegmentIntersector{processIntersections(e,t,n,i){}isDone(){}};class IntersectionAdder{constructor(){IntersectionAdder.constructor_.apply(this,arguments)}static constructor_(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._hasInterior=!1,this._properIntersectionPoint=null,this._li=null,this._isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;const e=arguments[0];this._li=e}static isAdjacentSegments(e,t){return 1===Math.abs(e-t)}isTrivialIntersection(e,t,n,i){if(e===n&&1===this._li.getIntersectionNum()){if(IntersectionAdder.isAdjacentSegments(t,i))return!0;if(e.isClosed()){const n=e.size()-1;if(0===t&&i===n||0===i&&t===n)return!0}}return!1}getProperIntersectionPoint(){return this._properIntersectionPoint}hasProperInteriorIntersection(){return this._hasProperInterior}getLineIntersector(){return this._li}hasProperIntersection(){return this._hasProper}processIntersections(e,t,n,i){if(e===n&&t===i)return null;this.numTests++;const r=e.getCoordinates()[t],o=e.getCoordinates()[t+1],a=n.getCoordinates()[i],s=n.getCoordinates()[i+1];this._li.computeIntersection(r,o,a,s),this._li.hasIntersection()&&(this.numIntersections++,this._li.isInteriorIntersection()&&(this.numInteriorIntersections++,this._hasInterior=!0),this.isTrivialIntersection(e,t,n,i)||(this._hasIntersection=!0,e.addIntersections(this._li,t,0),n.addIntersections(this._li,i,1),this._li.isProper()&&(this.numProperIntersections++,this._hasProper=!0,this._hasProperInterior=!0)))}hasIntersection(){return this._hasIntersection}isDone(){return!1}hasInteriorIntersection(){return this._hasInterior}get interfaces_(){return[ee]}}class EdgeIntersection{constructor(){EdgeIntersection.constructor_.apply(this,arguments)}static constructor_(){this.coord=null,this.segmentIndex=null,this.dist=null;const e=arguments[0],t=arguments[1],n=arguments[2];this.coord=new Coordinate(e),this.segmentIndex=t,this.dist=n}getSegmentIndex(){return this.segmentIndex}getCoordinate(){return this.coord}print(e){e.print(this.coord),e.print(" seg # = "+this.segmentIndex),e.println(" dist = "+this.dist)}compareTo(e){const t=e;return this.compare(t.segmentIndex,t.dist)}isEndPoint(e){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===e}toString(){return this.coord+" seg # = "+this.segmentIndex+" dist = "+this.dist}getDistance(){return this.dist}compare(e,t){return this.segmentIndex<e?-1:this.segmentIndex>e?1:this.dist<t?-1:this.dist>t?1:0}get interfaces_(){return[d]}}class EdgeIntersectionList{constructor(){EdgeIntersectionList.constructor_.apply(this,arguments)}static constructor_(){this._nodeMap=new TreeMap,this.edge=null;const e=arguments[0];this.edge=e}print(e){e.println("Intersections:");for(let t=this.iterator();t.hasNext();){t.next().print(e)}}iterator(){return this._nodeMap.values().iterator()}addSplitEdges(e){this.addEndpoints();const t=this.iterator();let n=t.next();for(;t.hasNext();){const i=t.next(),r=this.createSplitEdge(n,i);e.add(r),n=i}}addEndpoints(){const e=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[e],e,0)}createSplitEdge(e,t){let n=t.segmentIndex-e.segmentIndex+2;const i=this.edge.pts[t.segmentIndex],r=t.dist>0||!t.coord.equals2D(i);r||n--;const o=new Array(n).fill(null);let a=0;o[a++]=new Coordinate(e.coord);for(let n=e.segmentIndex+1;n<=t.segmentIndex;n++)o[a++]=this.edge.pts[n];return r&&(o[a]=t.coord),new Edge(o,new Label(this.edge._label))}add(e,t,n){const i=new EdgeIntersection(e,t,n),r=this._nodeMap.get(i);return null!==r?r:(this._nodeMap.put(i,i),i)}isIntersection(e){for(let t=this.iterator();t.hasNext();){if(t.next().coord.equals(e))return!0}return!1}}class IntersectionMatrix{constructor(){IntersectionMatrix.constructor_.apply(this,arguments)}static constructor_(){if(this._matrix=null,0===arguments.length)this._matrix=Array(3).fill().map((()=>Array(3))),this.setAll(Dimension.FALSE);else if(1===arguments.length)if("string"==typeof arguments[0]){const e=arguments[0];IntersectionMatrix.constructor_.call(this),this.set(e)}else if(arguments[0]instanceof IntersectionMatrix){const e=arguments[0];IntersectionMatrix.constructor_.call(this),this._matrix[Location.INTERIOR][Location.INTERIOR]=e._matrix[Location.INTERIOR][Location.INTERIOR],this._matrix[Location.INTERIOR][Location.BOUNDARY]=e._matrix[Location.INTERIOR][Location.BOUNDARY],this._matrix[Location.INTERIOR][Location.EXTERIOR]=e._matrix[Location.INTERIOR][Location.EXTERIOR],this._matrix[Location.BOUNDARY][Location.INTERIOR]=e._matrix[Location.BOUNDARY][Location.INTERIOR],this._matrix[Location.BOUNDARY][Location.BOUNDARY]=e._matrix[Location.BOUNDARY][Location.BOUNDARY],this._matrix[Location.BOUNDARY][Location.EXTERIOR]=e._matrix[Location.BOUNDARY][Location.EXTERIOR],this._matrix[Location.EXTERIOR][Location.INTERIOR]=e._matrix[Location.EXTERIOR][Location.INTERIOR],this._matrix[Location.EXTERIOR][Location.BOUNDARY]=e._matrix[Location.EXTERIOR][Location.BOUNDARY],this._matrix[Location.EXTERIOR][Location.EXTERIOR]=e._matrix[Location.EXTERIOR][Location.EXTERIOR]}}static matches(){if(Number.isInteger(arguments[0])&&"string"==typeof arguments[1]){const e=arguments[0],t=arguments[1];return t===Dimension.SYM_DONTCARE||(t===Dimension.SYM_TRUE&&(e>=0||e===Dimension.TRUE)||(t===Dimension.SYM_FALSE&&e===Dimension.FALSE||(t===Dimension.SYM_P&&e===Dimension.P||(t===Dimension.SYM_L&&e===Dimension.L||t===Dimension.SYM_A&&e===Dimension.A))))}if("string"==typeof arguments[0]&&"string"==typeof arguments[1]){const e=arguments[1];return new IntersectionMatrix(arguments[0]).matches(e)}}static isTrue(e){return e>=0||e===Dimension.TRUE}isIntersects(){return!this.isDisjoint()}isCovers(){return(IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])||IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.BOUNDARY])||IntersectionMatrix.isTrue(this._matrix[Location.BOUNDARY][Location.INTERIOR])||IntersectionMatrix.isTrue(this._matrix[Location.BOUNDARY][Location.BOUNDARY]))&&this._matrix[Location.EXTERIOR][Location.INTERIOR]===Dimension.FALSE&&this._matrix[Location.EXTERIOR][Location.BOUNDARY]===Dimension.FALSE}isCoveredBy(){return(IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])||IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.BOUNDARY])||IntersectionMatrix.isTrue(this._matrix[Location.BOUNDARY][Location.INTERIOR])||IntersectionMatrix.isTrue(this._matrix[Location.BOUNDARY][Location.BOUNDARY]))&&this._matrix[Location.INTERIOR][Location.EXTERIOR]===Dimension.FALSE&&this._matrix[Location.BOUNDARY][Location.EXTERIOR]===Dimension.FALSE}set(){if(1===arguments.length){const e=arguments[0];for(let t=0;t<e.length;t++){const n=Math.trunc(t/3),i=t%3;this._matrix[n][i]=Dimension.toDimensionValue(e.charAt(t))}}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this._matrix[e][t]=n}}isContains(){return IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])&&this._matrix[Location.EXTERIOR][Location.INTERIOR]===Dimension.FALSE&&this._matrix[Location.EXTERIOR][Location.BOUNDARY]===Dimension.FALSE}setAtLeast(){if(1===arguments.length){const e=arguments[0];for(let t=0;t<e.length;t++){const n=Math.trunc(t/3),i=t%3;this.setAtLeast(n,i,Dimension.toDimensionValue(e.charAt(t)))}}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this._matrix[e][t]<n&&(this._matrix[e][t]=n)}}setAtLeastIfValid(e,t,n){e>=0&&t>=0&&this.setAtLeast(e,t,n)}isWithin(){return IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])&&this._matrix[Location.INTERIOR][Location.EXTERIOR]===Dimension.FALSE&&this._matrix[Location.BOUNDARY][Location.EXTERIOR]===Dimension.FALSE}isTouches(e,t){return e>t?this.isTouches(t,e):(e===Dimension.A&&t===Dimension.A||e===Dimension.L&&t===Dimension.L||e===Dimension.L&&t===Dimension.A||e===Dimension.P&&t===Dimension.A||e===Dimension.P&&t===Dimension.L)&&(this._matrix[Location.INTERIOR][Location.INTERIOR]===Dimension.FALSE&&(IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.BOUNDARY])||IntersectionMatrix.isTrue(this._matrix[Location.BOUNDARY][Location.INTERIOR])||IntersectionMatrix.isTrue(this._matrix[Location.BOUNDARY][Location.BOUNDARY])))}isOverlaps(e,t){return e===Dimension.P&&t===Dimension.P||e===Dimension.A&&t===Dimension.A?IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])&&IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.EXTERIOR])&&IntersectionMatrix.isTrue(this._matrix[Location.EXTERIOR][Location.INTERIOR]):e===Dimension.L&&t===Dimension.L&&(1===this._matrix[Location.INTERIOR][Location.INTERIOR]&&IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.EXTERIOR])&&IntersectionMatrix.isTrue(this._matrix[Location.EXTERIOR][Location.INTERIOR]))}isEquals(e,t){return e===t&&(IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])&&this._matrix[Location.INTERIOR][Location.EXTERIOR]===Dimension.FALSE&&this._matrix[Location.BOUNDARY][Location.EXTERIOR]===Dimension.FALSE&&this._matrix[Location.EXTERIOR][Location.INTERIOR]===Dimension.FALSE&&this._matrix[Location.EXTERIOR][Location.BOUNDARY]===Dimension.FALSE)}toString(){const e=new StringBuilder("123456789");for(let t=0;t<3;t++)for(let n=0;n<3;n++)e.setCharAt(3*t+n,Dimension.toDimensionSymbol(this._matrix[t][n]));return e.toString()}setAll(e){for(let t=0;t<3;t++)for(let n=0;n<3;n++)this._matrix[t][n]=e}get(e,t){return this._matrix[e][t]}transpose(){let e=this._matrix[1][0];return this._matrix[1][0]=this._matrix[0][1],this._matrix[0][1]=e,e=this._matrix[2][0],this._matrix[2][0]=this._matrix[0][2],this._matrix[0][2]=e,e=this._matrix[2][1],this._matrix[2][1]=this._matrix[1][2],this._matrix[1][2]=e,this}matches(e){if(9!==e.length)throw new IllegalArgumentException("Should be length 9: "+e);for(let t=0;t<3;t++)for(let n=0;n<3;n++)if(!IntersectionMatrix.matches(this._matrix[t][n],e.charAt(3*t+n)))return!1;return!0}add(e){for(let t=0;t<3;t++)for(let n=0;n<3;n++)this.setAtLeast(t,n,e.get(t,n))}isDisjoint(){return this._matrix[Location.INTERIOR][Location.INTERIOR]===Dimension.FALSE&&this._matrix[Location.INTERIOR][Location.BOUNDARY]===Dimension.FALSE&&this._matrix[Location.BOUNDARY][Location.INTERIOR]===Dimension.FALSE&&this._matrix[Location.BOUNDARY][Location.BOUNDARY]===Dimension.FALSE}isCrosses(e,t){return e===Dimension.P&&t===Dimension.L||e===Dimension.P&&t===Dimension.A||e===Dimension.L&&t===Dimension.A?IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])&&IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.EXTERIOR]):e===Dimension.L&&t===Dimension.P||e===Dimension.A&&t===Dimension.P||e===Dimension.A&&t===Dimension.L?IntersectionMatrix.isTrue(this._matrix[Location.INTERIOR][Location.INTERIOR])&&IntersectionMatrix.isTrue(this._matrix[Location.EXTERIOR][Location.INTERIOR]):e===Dimension.L&&t===Dimension.L&&0===this._matrix[Location.INTERIOR][Location.INTERIOR]}get interfaces_(){return[g]}}class IntArrayList{constructor(){IntArrayList.constructor_.apply(this,arguments)}static constructor_(){if(this._data=null,this._size=0,0===arguments.length)IntArrayList.constructor_.call(this,10);else if(1===arguments.length){const e=arguments[0];this._data=new Array(e).fill(null)}}size(){return this._size}addAll(e){return null===e||0===e.length?null:(this.ensureCapacity(this._size+e.length),System.arraycopy(e,0,this._data,this._size,e.length),void(this._size+=e.length))}ensureCapacity(e){if(e<=this._data.length)return null;const t=Math.max(e,2*this._data.length);this._data=Arrays.copyOf(this._data,t)}toArray(){const e=new Array(this._size).fill(null);return System.arraycopy(this._data,0,e,0,this._size),e}add(e){this.ensureCapacity(this._size+1),this._data[this._size]=e,++this._size}}class MonotoneChainIndexer{static toIntArray(e){const t=new Array(e.size()).fill(null);for(let n=0;n<t.length;n++)t[n]=e.get(n).intValue();return t}getChainStartIndices(e){let t=0;const n=new IntArrayList(Math.trunc(e.length/2));n.add(t);do{const i=this.findChainEnd(e,t);n.add(i),t=i}while(t<e.length-1);return n.toArray()}findChainEnd(e,t){const n=Quadrant.quadrant(e[t],e[t+1]);let i=t+1;for(;i<e.length;){if(Quadrant.quadrant(e[i-1],e[i])!==n)break;i++}return i-1}OLDgetChainStartIndices(e){let t=0;const n=new ArrayList;n.add(t);do{const i=this.findChainEnd(e,t);n.add(i),t=i}while(t<e.length-1);return MonotoneChainIndexer.toIntArray(n)}}class MonotoneChainEdge{constructor(){MonotoneChainEdge.constructor_.apply(this,arguments)}static constructor_(){this.e=null,this.pts=null,this.startIndex=null;const e=arguments[0];this.e=e,this.pts=e.getCoordinates();const t=new MonotoneChainIndexer;this.startIndex=t.getChainStartIndices(this.pts)}getCoordinates(){return this.pts}getMaxX(e){const t=this.pts[this.startIndex[e]].x,n=this.pts[this.startIndex[e+1]].x;return t>n?t:n}getMinX(e){const t=this.pts[this.startIndex[e]].x,n=this.pts[this.startIndex[e+1]].x;return t<n?t:n}computeIntersectsForChain(){if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];this.computeIntersectsForChain(this.startIndex[e],this.startIndex[e+1],t,t.startIndex[n],t.startIndex[n+1],i)}else if(6===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=arguments[4],o=arguments[5];if(t-e==1&&r-i==1)return o.addIntersections(this.e,e,n.e,i),null;if(!this.overlaps(e,t,n,i,r))return null;const a=Math.trunc((e+t)/2),s=Math.trunc((i+r)/2);e<a&&(i<s&&this.computeIntersectsForChain(e,a,n,i,s,o),s<r&&this.computeIntersectsForChain(e,a,n,s,r,o)),a<t&&(i<s&&this.computeIntersectsForChain(a,t,n,i,s,o),s<r&&this.computeIntersectsForChain(a,t,n,s,r,o))}}overlaps(e,t,n,i,r){return Envelope.intersects(this.pts[e],this.pts[t],n.pts[i],n.pts[r])}getStartIndexes(){return this.startIndex}computeIntersects(e,t){for(let n=0;n<this.startIndex.length-1;n++)for(let i=0;i<e.startIndex.length-1;i++)this.computeIntersectsForChain(n,e,i,t)}}class Depth{constructor(){Depth.constructor_.apply(this,arguments)}static constructor_(){this._depth=Array(2).fill().map((()=>Array(3)));for(let e=0;e<2;e++)for(let t=0;t<3;t++)this._depth[e][t]=Depth.NULL_VALUE}static depthAtLocation(e){return e===Location.EXTERIOR?0:e===Location.INTERIOR?1:Depth.NULL_VALUE}getDepth(e,t){return this._depth[e][t]}setDepth(e,t,n){this._depth[e][t]=n}isNull(){if(0===arguments.length){for(let e=0;e<2;e++)for(let t=0;t<3;t++)if(this._depth[e][t]!==Depth.NULL_VALUE)return!1;return!0}if(1===arguments.length){const e=arguments[0];return this._depth[e][1]===Depth.NULL_VALUE}if(2===arguments.length){const e=arguments[0],t=arguments[1];return this._depth[e][t]===Depth.NULL_VALUE}}normalize(){for(let e=0;e<2;e++)if(!this.isNull(e)){let t=this._depth[e][1];this._depth[e][2]<t&&(t=this._depth[e][2]),t<0&&(t=0);for(let n=1;n<3;n++){let i=0;this._depth[e][n]>t&&(i=1),this._depth[e][n]=i}}}getDelta(e){return this._depth[e][Position.RIGHT]-this._depth[e][Position.LEFT]}getLocation(e,t){return this._depth[e][t]<=0?Location.EXTERIOR:Location.INTERIOR}toString(){return"A: "+this._depth[0][1]+","+this._depth[0][2]+" B: "+this._depth[1][1]+","+this._depth[1][2]}add(){if(1===arguments.length){const e=arguments[0];for(let t=0;t<2;t++)for(let n=1;n<3;n++){const i=e.getLocation(t,n);i!==Location.EXTERIOR&&i!==Location.INTERIOR||(this.isNull(t,n)?this._depth[t][n]=Depth.depthAtLocation(i):this._depth[t][n]+=Depth.depthAtLocation(i))}}else if(3===arguments.length){const e=arguments[0],t=arguments[1];arguments[2]===Location.INTERIOR&&this._depth[e][t]++}}}Depth.NULL_VALUE=-1;class Edge extends GraphComponent{constructor(){super(),Edge.constructor_.apply(this,arguments)}static constructor_(){if(this.pts=null,this._env=null,this.eiList=new EdgeIntersectionList(this),this._name=null,this._mce=null,this._isIsolated=!0,this._depth=new Depth,this._depthDelta=0,1===arguments.length){const e=arguments[0];Edge.constructor_.call(this,e,null)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this.pts=e,this._label=t}}static updateIM(){if(!(2===arguments.length&&arguments[1]instanceof IntersectionMatrix&&arguments[0]instanceof Label))return super.updateIM.apply(this,arguments);{const e=arguments[0],t=arguments[1];t.setAtLeastIfValid(e.getLocation(0,Position.ON),e.getLocation(1,Position.ON),1),e.isArea()&&(t.setAtLeastIfValid(e.getLocation(0,Position.LEFT),e.getLocation(1,Position.LEFT),2),t.setAtLeastIfValid(e.getLocation(0,Position.RIGHT),e.getLocation(1,Position.RIGHT),2))}}getDepth(){return this._depth}getCollapsedEdge(){const e=new Array(2).fill(null);e[0]=this.pts[0],e[1]=this.pts[1];return new Edge(e,Label.toLineLabel(this._label))}isIsolated(){return this._isIsolated}getCoordinates(){return this.pts}setIsolated(e){this._isIsolated=e}setName(e){this._name=e}equals(e){if(!(e instanceof Edge))return!1;const t=e;if(this.pts.length!==t.pts.length)return!1;let n=!0,i=!0,r=this.pts.length;for(let e=0;e<this.pts.length;e++)if(this.pts[e].equals2D(t.pts[e])||(n=!1),this.pts[e].equals2D(t.pts[--r])||(i=!1),!n&&!i)return!1;return!0}getCoordinate(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){const e=arguments[0];return this.pts[e]}}print(e){e.print("edge "+this._name+": "),e.print("LINESTRING (");for(let t=0;t<this.pts.length;t++)t>0&&e.print(","),e.print(this.pts[t].x+" "+this.pts[t].y);e.print(")  "+this._label+" "+this._depthDelta)}computeIM(e){Edge.updateIM(this._label,e)}isCollapsed(){return!!this._label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))}isClosed(){return this.pts[0].equals(this.pts[this.pts.length-1])}getMaximumSegmentIndex(){return this.pts.length-1}getDepthDelta(){return this._depthDelta}getNumPoints(){return this.pts.length}printReverse(e){e.print("edge "+this._name+": ");for(let t=this.pts.length-1;t>=0;t--)e.print(this.pts[t]+" ");e.println("")}getMonotoneChainEdge(){return null===this._mce&&(this._mce=new MonotoneChainEdge(this)),this._mce}getEnvelope(){if(null===this._env){this._env=new Envelope;for(let e=0;e<this.pts.length;e++)this._env.expandToInclude(this.pts[e])}return this._env}addIntersection(e,t,n,i){const r=new Coordinate(e.getIntersection(i));let o=t,a=e.getEdgeDistance(n,i);const s=o+1;if(s<this.pts.length){const e=this.pts[s];r.equals2D(e)&&(o=s,a=0)}this.eiList.add(r,o,a)}toString(){const e=new StringBuilder;e.append("edge "+this._name+": "),e.append("LINESTRING (");for(let t=0;t<this.pts.length;t++)t>0&&e.append(","),e.append(this.pts[t].x+" "+this.pts[t].y);return e.append(")  "+this._label+" "+this._depthDelta),e.toString()}isPointwiseEqual(e){if(this.pts.length!==e.pts.length)return!1;for(let t=0;t<this.pts.length;t++)if(!this.pts[t].equals2D(e.pts[t]))return!1;return!0}setDepthDelta(e){this._depthDelta=e}getEdgeIntersectionList(){return this.eiList}addIntersections(e,t,n){for(let i=0;i<e.getIntersectionNum();i++)this.addIntersection(e,t,n,i)}}class BufferBuilder{constructor(){BufferBuilder.constructor_.apply(this,arguments)}static constructor_(){this._bufParams=null,this._workingPrecisionModel=null,this._workingNoder=null,this._geomFact=null,this._graph=null,this._edgeList=new EdgeList;const e=arguments[0];this._bufParams=e}static depthDelta(e){const t=e.getLocation(0,Position.LEFT),n=e.getLocation(0,Position.RIGHT);return t===Location.INTERIOR&&n===Location.EXTERIOR?1:t===Location.EXTERIOR&&n===Location.INTERIOR?-1:0}static convertSegStrings(e){const t=new GeometryFactory,n=new ArrayList;for(;e.hasNext();){const i=e.next(),r=t.createLineString(i.getCoordinates());n.add(r)}return t.buildGeometry(n)}setWorkingPrecisionModel(e){this._workingPrecisionModel=e}insertUniqueEdge(e){const t=this._edgeList.findEqualEdge(e);if(null!==t){const n=t.getLabel();let i=e.getLabel();t.isPointwiseEqual(e)||(i=new Label(e.getLabel()),i.flip()),n.merge(i);const r=BufferBuilder.depthDelta(i),o=t.getDepthDelta()+r;t.setDepthDelta(o)}else this._edgeList.add(e),e.setDepthDelta(BufferBuilder.depthDelta(e.getLabel()))}buildSubgraphs(e,t){const n=new ArrayList;for(let i=e.iterator();i.hasNext();){const e=i.next(),r=e.getRightmostCoordinate(),o=new SubgraphDepthLocater(n).getDepth(r);e.computeDepth(o),e.findResultEdges(),n.add(e),t.add(e.getDirectedEdges(),e.getNodes())}}createSubgraphs(e){const t=new ArrayList;for(let n=e.getNodes().iterator();n.hasNext();){const e=n.next();if(!e.isVisited()){const n=new BufferSubgraph;n.create(e),t.add(n)}}return Z.sort(t,Z.reverseOrder()),t}createEmptyResultGeometry(){return this._geomFact.createPolygon()}getNoder(e){if(null!==this._workingNoder)return this._workingNoder;const t=new MCIndexNoder,n=new RobustLineIntersector;return n.setPrecisionModel(e),t.setSegmentIntersector(new IntersectionAdder(n)),t}buffer(e,t){let n=this._workingPrecisionModel;null===n&&(n=e.getPrecisionModel()),this._geomFact=e.getFactory();const i=new OffsetCurveBuilder(n,this._bufParams),r=new OffsetCurveSetBuilder(e,t,i).getCurves();if(r.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(r,n),this._graph=new PlanarGraph(new OverlayNodeFactory),this._graph.addEdges(this._edgeList.getEdges());const o=this.createSubgraphs(this._graph),a=new PolygonBuilder(this._geomFact);this.buildSubgraphs(o,a);const s=a.getPolygons();if(s.size()<=0)return this.createEmptyResultGeometry();return this._geomFact.buildGeometry(s)}computeNodedEdges(e,t){const n=this.getNoder(t);n.computeNodes(e);for(let e=n.getNodedSubstrings().iterator();e.hasNext();){const t=e.next(),n=t.getCoordinates();if(2===n.length&&n[0].equals2D(n[1]))continue;const i=t.getData(),r=new Edge(t.getCoordinates(),new Label(i));this.insertUniqueEdge(r)}}setNoder(e){this._workingNoder=e}}class ScaledNoder{constructor(){ScaledNoder.constructor_.apply(this,arguments)}static constructor_(){if(this._noder=null,this._scaleFactor=null,this._offsetX=null,this._offsetY=null,this._isScaled=!1,2===arguments.length){const e=arguments[0],t=arguments[1];ScaledNoder.constructor_.call(this,e,t,0,0)}else if(4===arguments.length){const e=arguments[0],t=arguments[1];this._noder=e,this._scaleFactor=t,this._isScaled=!this.isIntegerPrecision()}}rescale(){if(b(arguments[0],Collection)){for(let e=arguments[0].iterator();e.hasNext();){const t=e.next();this.rescale(t.getCoordinates())}}else if(arguments[0]instanceof Array){const e=arguments[0];for(let t=0;t<e.length;t++)e[t].x=e[t].x/this._scaleFactor+this._offsetX,e[t].y=e[t].y/this._scaleFactor+this._offsetY;2===e.length&&e[0].equals2D(e[1])&&System.out.println(e)}}scale(){if(b(arguments[0],Collection)){const e=arguments[0],t=new ArrayList(e.size());for(let n=e.iterator();n.hasNext();){const e=n.next();t.add(new NodedSegmentString(this.scale(e.getCoordinates()),e.getData()))}return t}if(arguments[0]instanceof Array){const e=arguments[0],t=new Array(e.length).fill(null);for(let n=0;n<e.length;n++)t[n]=new Coordinate(Math.round((e[n].x-this._offsetX)*this._scaleFactor),Math.round((e[n].y-this._offsetY)*this._scaleFactor),e[n].getZ());return CoordinateArrays.removeRepeatedPoints(t)}}isIntegerPrecision(){return 1===this._scaleFactor}getNodedSubstrings(){const e=this._noder.getNodedSubstrings();return this._isScaled&&this.rescale(e),e}computeNodes(e){let t=e;this._isScaled&&(t=this.scale(e)),this._noder.computeNodes(t)}get interfaces_(){return[Noder]}}class NodingValidator{constructor(){NodingValidator.constructor_.apply(this,arguments)}static constructor_(){this._li=new RobustLineIntersector,this._segStrings=null;const e=arguments[0];this._segStrings=e}checkEndPtVertexIntersections(){if(0===arguments.length)for(let e=this._segStrings.iterator();e.hasNext();){const t=e.next().getCoordinates();this.checkEndPtVertexIntersections(t[0],this._segStrings),this.checkEndPtVertexIntersections(t[t.length-1],this._segStrings)}else if(2===arguments.length){const e=arguments[0];for(let t=arguments[1].iterator();t.hasNext();){const n=t.next().getCoordinates();for(let t=1;t<n.length-1;t++)if(n[t].equals(e))throw new RuntimeException("found endpt/interior pt intersection at index "+t+" :pt "+e)}}}checkInteriorIntersections(){if(0===arguments.length)for(let e=this._segStrings.iterator();e.hasNext();){const t=e.next();for(let e=this._segStrings.iterator();e.hasNext();){const n=e.next();this.checkInteriorIntersections(t,n)}}else if(2===arguments.length){const e=arguments[0],t=arguments[1],n=e.getCoordinates(),i=t.getCoordinates();for(let r=0;r<n.length-1;r++)for(let n=0;n<i.length-1;n++)this.checkInteriorIntersections(e,r,t,n)}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];if(e===n&&t===i)return null;const r=e.getCoordinates()[t],o=e.getCoordinates()[t+1],a=n.getCoordinates()[i],s=n.getCoordinates()[i+1];if(this._li.computeIntersection(r,o,a,s),this._li.hasIntersection()&&(this._li.isProper()||this.hasInteriorIntersection(this._li,r,o)||this.hasInteriorIntersection(this._li,a,s)))throw new RuntimeException("found non-noded intersection at "+r+"-"+o+" and "+a+"-"+s)}}checkValid(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()}checkCollapses(){if(0===arguments.length)for(let e=this._segStrings.iterator();e.hasNext();){const t=e.next();this.checkCollapses(t)}else if(1===arguments.length){const e=arguments[0].getCoordinates();for(let t=0;t<e.length-2;t++)this.checkCollapse(e[t],e[t+1],e[t+2])}}hasInteriorIntersection(e,t,n){for(let i=0;i<e.getIntersectionNum();i++){const r=e.getIntersection(i);if(!r.equals(t)&&!r.equals(n))return!0}return!1}checkCollapse(e,t,n){if(e.equals(n))throw new RuntimeException("found non-noded collapse at "+NodingValidator.fact.createLineString([e,t,n]))}}NodingValidator.fact=new GeometryFactory;class HotPixel{constructor(){HotPixel.constructor_.apply(this,arguments)}static constructor_(){this._li=null,this._pt=null,this._originalPt=null,this._ptScaled=null,this._p0Scaled=null,this._p1Scaled=null,this._scaleFactor=null,this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,this._corner=new Array(4).fill(null),this._safeEnv=null;const e=arguments[0],t=arguments[1],n=arguments[2];if(this._originalPt=e,this._pt=e,this._scaleFactor=t,this._li=n,t<=0)throw new IllegalArgumentException("Scale factor must be non-zero");1!==t&&(this._pt=new Coordinate(this.scale(e.x),this.scale(e.y)),this._p0Scaled=new Coordinate,this._p1Scaled=new Coordinate),this.initCorners(this._pt)}intersectsScaled(e,t){const n=Math.min(e.x,t.x),i=Math.max(e.x,t.x),r=Math.min(e.y,t.y),o=Math.max(e.y,t.y),a=this._maxx<n||this._minx>i||this._maxy<r||this._miny>o;if(a)return!1;const s=this.intersectsToleranceSquare(e,t);return Assert.isTrue(!(a&&s),"Found bad envelope test"),s}initCorners(e){const t=.5;this._minx=e.x-t,this._maxx=e.x+t,this._miny=e.y-t,this._maxy=e.y+t,this._corner[0]=new Coordinate(this._maxx,this._maxy),this._corner[1]=new Coordinate(this._minx,this._maxy),this._corner[2]=new Coordinate(this._minx,this._miny),this._corner[3]=new Coordinate(this._maxx,this._miny)}intersects(e,t){return 1===this._scaleFactor?this.intersectsScaled(e,t):(this.copyScaled(e,this._p0Scaled),this.copyScaled(t,this._p1Scaled),this.intersectsScaled(this._p0Scaled,this._p1Scaled))}scale(e){return Math.round(e*this._scaleFactor)}getCoordinate(){return this._originalPt}copyScaled(e,t){t.x=this.scale(e.x),t.y=this.scale(e.y)}getSafeEnvelope(){if(null===this._safeEnv){const e=HotPixel.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new Envelope(this._originalPt.x-e,this._originalPt.x+e,this._originalPt.y-e,this._originalPt.y+e)}return this._safeEnv}intersectsPixelClosure(e,t){return this._li.computeIntersection(e,t,this._corner[0],this._corner[1]),!!this._li.hasIntersection()||(this._li.computeIntersection(e,t,this._corner[1],this._corner[2]),!!this._li.hasIntersection()||(this._li.computeIntersection(e,t,this._corner[2],this._corner[3]),!!this._li.hasIntersection()||(this._li.computeIntersection(e,t,this._corner[3],this._corner[0]),!!this._li.hasIntersection())))}intersectsToleranceSquare(e,t){let n=!1,i=!1;return this._li.computeIntersection(e,t,this._corner[0],this._corner[1]),!!this._li.isProper()||(this._li.computeIntersection(e,t,this._corner[1],this._corner[2]),!!this._li.isProper()||(this._li.hasIntersection()&&(n=!0),this._li.computeIntersection(e,t,this._corner[2],this._corner[3]),!!this._li.isProper()||(this._li.hasIntersection()&&(i=!0),this._li.computeIntersection(e,t,this._corner[3],this._corner[0]),!!this._li.isProper()||(!(!n||!i)||(!!e.equals(this._pt)||!!t.equals(this._pt))))))}addSnappedNode(e,t){const n=e.getCoordinate(t),i=e.getCoordinate(t+1);return!!this.intersects(n,i)&&(e.addIntersection(this.getCoordinate(),t),!0)}}HotPixel.SAFE_ENV_EXPANSION_FACTOR=.75;class MonotoneChainSelectAction{constructor(){MonotoneChainSelectAction.constructor_.apply(this,arguments)}static constructor_(){this.selectedSegment=new LineSegment}select(){if(1===arguments.length);else if(2===arguments.length){const e=arguments[1];arguments[0].getLineSegment(e,this.selectedSegment),this.select(this.selectedSegment)}}}class MCIndexPointSnapper{constructor(){MCIndexPointSnapper.constructor_.apply(this,arguments)}static constructor_(){this._index=null;const e=arguments[0];this._index=e}snap(){if(1===arguments.length){const e=arguments[0];return this.snap(e,null,-1)}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=e.getSafeEnvelope(),r=new HotPixelSnapAction(e,t,n);return this._index.query(i,new class{get interfaces_(){return[ItemVisitor]}visitItem(e){e.select(i,r)}}),r.isNodeAdded()}}}class HotPixelSnapAction extends MonotoneChainSelectAction{constructor(){super(),HotPixelSnapAction.constructor_.apply(this,arguments)}static constructor_(){this._hotPixel=null,this._parentEdge=null,this._hotPixelVertexIndex=null,this._isNodeAdded=!1;const e=arguments[0],t=arguments[1],n=arguments[2];this._hotPixel=e,this._parentEdge=t,this._hotPixelVertexIndex=n}isNodeAdded(){return this._isNodeAdded}select(){if(!(2===arguments.length&&Number.isInteger(arguments[1])&&arguments[0]instanceof Q))return super.select.apply(this,arguments);{const e=arguments[1],t=arguments[0].getContext();if(this._parentEdge===t&&(e===this._hotPixelVertexIndex||e+1===this._hotPixelVertexIndex))return null;this._isNodeAdded|=this._hotPixel.addSnappedNode(t,e)}}}MCIndexPointSnapper.HotPixelSnapAction=HotPixelSnapAction;class InteriorIntersectionFinderAdder{constructor(){InteriorIntersectionFinderAdder.constructor_.apply(this,arguments)}static constructor_(){this._li=null,this._interiorIntersections=null;const e=arguments[0];this._li=e,this._interiorIntersections=new ArrayList}processIntersections(e,t,n,i){if(e===n&&t===i)return null;const r=e.getCoordinates()[t],o=e.getCoordinates()[t+1],a=n.getCoordinates()[i],s=n.getCoordinates()[i+1];if(this._li.computeIntersection(r,o,a,s),this._li.hasIntersection()&&this._li.isInteriorIntersection()){for(let e=0;e<this._li.getIntersectionNum();e++)this._interiorIntersections.add(this._li.getIntersection(e));e.addIntersections(this._li,t,0),n.addIntersections(this._li,i,1)}}isDone(){return!1}getInteriorIntersections(){return this._interiorIntersections}get interfaces_(){return[ee]}}class MCIndexSnapRounder{constructor(){MCIndexSnapRounder.constructor_.apply(this,arguments)}static constructor_(){this._pm=null,this._li=null,this._scaleFactor=null,this._noder=null,this._pointSnapper=null,this._nodedSegStrings=null;const e=arguments[0];this._pm=e,this._li=new RobustLineIntersector,this._li.setPrecisionModel(e),this._scaleFactor=e.getScale()}checkCorrectness(e){const t=NodedSegmentString.getNodedSubstrings(e),n=new NodingValidator(t);try{n.checkValid()}catch(e){if(!(e instanceof Exception))throw e;e.printStackTrace()}}getNodedSubstrings(){return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings)}snapRound(e,t){const n=this.findInteriorIntersections(e,t);this.computeIntersectionSnaps(n),this.computeVertexSnaps(e)}findInteriorIntersections(e,t){const n=new InteriorIntersectionFinderAdder(t);return this._noder.setSegmentIntersector(n),this._noder.computeNodes(e),n.getInteriorIntersections()}computeVertexSnaps(){if(b(arguments[0],Collection)){for(let e=arguments[0].iterator();e.hasNext();){const t=e.next();this.computeVertexSnaps(t)}}else if(arguments[0]instanceof NodedSegmentString){const e=arguments[0],t=e.getCoordinates();for(let n=0;n<t.length;n++){const i=new HotPixel(t[n],this._scaleFactor,this._li);this._pointSnapper.snap(i,e,n)&&e.addIntersection(t[n],n)}}}computeNodes(e){this._nodedSegStrings=e,this._noder=new MCIndexNoder,this._pointSnapper=new MCIndexPointSnapper(this._noder.getIndex()),this.snapRound(e,this._li)}computeIntersectionSnaps(e){for(let t=e.iterator();t.hasNext();){const e=t.next(),n=new HotPixel(e,this._scaleFactor,this._li);this._pointSnapper.snap(n)}}get interfaces_(){return[Noder]}}class BufferOp{constructor(){BufferOp.constructor_.apply(this,arguments)}static constructor_(){if(this._argGeom=null,this._distance=null,this._bufParams=new BufferParameters,this._resultGeometry=null,this._saveException=null,1===arguments.length){const e=arguments[0];this._argGeom=e}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this._argGeom=e,this._bufParams=t}}static bufferOp(){if(2===arguments.length){const e=arguments[1];return new BufferOp(arguments[0]).getResultGeometry(e)}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof Geometry&&"number"==typeof arguments[1]){const e=arguments[1],t=arguments[2],n=new BufferOp(arguments[0]);n.setQuadrantSegments(t);return n.getResultGeometry(e)}if(arguments[2]instanceof BufferParameters&&arguments[0]instanceof Geometry&&"number"==typeof arguments[1]){const e=arguments[1];return new BufferOp(arguments[0],arguments[2]).getResultGeometry(e)}}else if(4===arguments.length){const e=arguments[1],t=arguments[2],n=arguments[3],i=new BufferOp(arguments[0]);i.setQuadrantSegments(t),i.setEndCapStyle(n);return i.getResultGeometry(e)}}static precisionScaleFactor(e,t,n){const i=e.getEnvelopeInternal(),r=MathUtil.max(Math.abs(i.getMaxX()),Math.abs(i.getMaxY()),Math.abs(i.getMinX()),Math.abs(i.getMinY()))+2*(t>0?t:0),o=n-Math.trunc(Math.log(r)/Math.log(10)+1);return Math.pow(10,o)}bufferFixedPrecision(e){const t=new ScaledNoder(new MCIndexSnapRounder(new PrecisionModel(1)),e.getScale()),n=new BufferBuilder(this._bufParams);n.setWorkingPrecisionModel(e),n.setNoder(t),this._resultGeometry=n.buffer(this._argGeom,this._distance)}bufferReducedPrecision(){if(0===arguments.length){for(let e=BufferOp.MAX_PRECISION_DIGITS;e>=0;e--){try{this.bufferReducedPrecision(e)}catch(e){if(!(e instanceof TopologyException))throw e;this._saveException=e}if(null!==this._resultGeometry)return null}throw this._saveException}if(1===arguments.length){const e=arguments[0],t=BufferOp.precisionScaleFactor(this._argGeom,this._distance,e),n=new PrecisionModel(t);this.bufferFixedPrecision(n)}}computeGeometry(){if(this.bufferOriginalPrecision(),null!==this._resultGeometry)return null;const e=this._argGeom.getFactory().getPrecisionModel();e.getType()===PrecisionModel.FIXED?this.bufferFixedPrecision(e):this.bufferReducedPrecision()}setQuadrantSegments(e){this._bufParams.setQuadrantSegments(e)}bufferOriginalPrecision(){try{const e=new BufferBuilder(this._bufParams);this._resultGeometry=e.buffer(this._argGeom,this._distance)}catch(e){if(!(e instanceof RuntimeException))throw e;this._saveException=e}}getResultGeometry(e){return this._distance=e,this.computeGeometry(),this._resultGeometry}setEndCapStyle(e){this._bufParams.setEndCapStyle(e)}}BufferOp.CAP_ROUND=BufferParameters.CAP_ROUND,BufferOp.CAP_BUTT=BufferParameters.CAP_FLAT,BufferOp.CAP_FLAT=BufferParameters.CAP_FLAT,BufferOp.CAP_SQUARE=BufferParameters.CAP_SQUARE,BufferOp.MAX_PRECISION_DIGITS=12;class BoundaryNodeRule{isInBoundary(e){}}class Mod2BoundaryNodeRule{isInBoundary(e){return e%2==1}get interfaces_(){return[BoundaryNodeRule]}}class EndPointBoundaryNodeRule{isInBoundary(e){return e>0}get interfaces_(){return[BoundaryNodeRule]}}class MultiValentEndPointBoundaryNodeRule{isInBoundary(e){return e>1}get interfaces_(){return[BoundaryNodeRule]}}class MonoValentEndPointBoundaryNodeRule{isInBoundary(e){return 1===e}get interfaces_(){return[BoundaryNodeRule]}}BoundaryNodeRule.Mod2BoundaryNodeRule=Mod2BoundaryNodeRule,BoundaryNodeRule.EndPointBoundaryNodeRule=EndPointBoundaryNodeRule,BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule=MultiValentEndPointBoundaryNodeRule,BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule=MonoValentEndPointBoundaryNodeRule,BoundaryNodeRule.MOD2_BOUNDARY_RULE=new Mod2BoundaryNodeRule,BoundaryNodeRule.ENDPOINT_BOUNDARY_RULE=new EndPointBoundaryNodeRule,BoundaryNodeRule.MULTIVALENT_ENDPOINT_BOUNDARY_RULE=new MultiValentEndPointBoundaryNodeRule,BoundaryNodeRule.MONOVALENT_ENDPOINT_BOUNDARY_RULE=new MonoValentEndPointBoundaryNodeRule,BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE=BoundaryNodeRule.MOD2_BOUNDARY_RULE;class PointLocator{constructor(){PointLocator.constructor_.apply(this,arguments)}static constructor_(){if(this._boundaryRule=BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE,this._isIn=null,this._numBoundaries=null,0===arguments.length);else if(1===arguments.length){const e=arguments[0];if(null===e)throw new IllegalArgumentException("Rule must be non-null");this._boundaryRule=e}}locateInPolygonRing(e,t){return t.getEnvelopeInternal().intersects(e)?PointLocation.locateInRing(e,t.getCoordinates()):Location.EXTERIOR}intersects(e,t){return this.locate(e,t)!==Location.EXTERIOR}updateLocationInfo(e){e===Location.INTERIOR&&(this._isIn=!0),e===Location.BOUNDARY&&this._numBoundaries++}computeLocation(e,t){if(t instanceof Point&&this.updateLocationInfo(this.locateOnPoint(e,t)),t instanceof LineString)this.updateLocationInfo(this.locateOnLineString(e,t));else if(t instanceof Polygon)this.updateLocationInfo(this.locateInPolygon(e,t));else if(t instanceof MultiLineString){const n=t;for(let t=0;t<n.getNumGeometries();t++){const i=n.getGeometryN(t);this.updateLocationInfo(this.locateOnLineString(e,i))}}else if(t instanceof MultiPolygon){const n=t;for(let t=0;t<n.getNumGeometries();t++){const i=n.getGeometryN(t);this.updateLocationInfo(this.locateInPolygon(e,i))}}else if(t instanceof GeometryCollection){const n=new GeometryCollectionIterator(t);for(;n.hasNext();){const i=n.next();i!==t&&this.computeLocation(e,i)}}}locateOnPoint(e,t){return t.getCoordinate().equals2D(e)?Location.INTERIOR:Location.EXTERIOR}locateOnLineString(e,t){if(!t.getEnvelopeInternal().intersects(e))return Location.EXTERIOR;const n=t.getCoordinateSequence();return t.isClosed()||!e.equals(n.getCoordinate(0))&&!e.equals(n.getCoordinate(n.size()-1))?PointLocation.isOnLine(e,n)?Location.INTERIOR:Location.EXTERIOR:Location.BOUNDARY}locateInPolygon(e,t){if(t.isEmpty())return Location.EXTERIOR;const n=t.getExteriorRing(),i=this.locateInPolygonRing(e,n);if(i===Location.EXTERIOR)return Location.EXTERIOR;if(i===Location.BOUNDARY)return Location.BOUNDARY;for(let n=0;n<t.getNumInteriorRing();n++){const i=t.getInteriorRingN(n),r=this.locateInPolygonRing(e,i);if(r===Location.INTERIOR)return Location.EXTERIOR;if(r===Location.BOUNDARY)return Location.BOUNDARY}return Location.INTERIOR}locate(e,t){return t.isEmpty()?Location.EXTERIOR:t instanceof LineString?this.locateOnLineString(e,t):t instanceof Polygon?this.locateInPolygon(e,t):(this._isIn=!1,this._numBoundaries=0,this.computeLocation(e,t),this._boundaryRule.isInBoundary(this._numBoundaries)?Location.BOUNDARY:this._numBoundaries>0||this._isIn?Location.INTERIOR:Location.EXTERIOR)}}class BasicSegmentString{constructor(){BasicSegmentString.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._data=null;const e=arguments[0],t=arguments[1];this._pts=e,this._data=t}getCoordinates(){return this._pts}size(){return this._pts.length}getCoordinate(e){return this._pts[e]}isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1])}getSegmentOctant(e){return e===this._pts.length-1?-1:Octant.octant(this.getCoordinate(e),this.getCoordinate(e+1))}setData(e){this._data=e}getData(){return this._data}toString(){return WKTWriter.toLineString(new CoordinateArraySequence(this._pts))}get interfaces_(){return[SegmentString]}}class NodingIntersectionFinder{constructor(){NodingIntersectionFinder.constructor_.apply(this,arguments)}static constructor_(){this._findAllIntersections=!1,this._isCheckEndSegmentsOnly=!1,this._keepIntersections=!0,this._isInteriorIntersectionsOnly=!1,this._li=null,this._interiorIntersection=null,this._intSegments=null,this._intersections=new ArrayList,this._intersectionCount=0;const e=arguments[0];this._li=e,this._interiorIntersection=null}static createAllIntersectionsFinder(e){const t=new NodingIntersectionFinder(e);return t.setFindAllIntersections(!0),t}static isInteriorVertexIntersection(){if(4===arguments.length){const e=arguments[1];return(!arguments[2]||!arguments[3])&&!!arguments[0].equals2D(e)}if(8===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=arguments[4],o=arguments[5],a=arguments[6],s=arguments[7];return!!NodingIntersectionFinder.isInteriorVertexIntersection(e,n,r,a)||(!!NodingIntersectionFinder.isInteriorVertexIntersection(e,i,r,s)||(!!NodingIntersectionFinder.isInteriorVertexIntersection(t,n,o,a)||!!NodingIntersectionFinder.isInteriorVertexIntersection(t,i,o,s)))}}static createInteriorIntersectionCounter(e){const t=new NodingIntersectionFinder(e);return t.setInteriorIntersectionsOnly(!0),t.setFindAllIntersections(!0),t.setKeepIntersections(!1),t}static createIntersectionCounter(e){const t=new NodingIntersectionFinder(e);return t.setFindAllIntersections(!0),t.setKeepIntersections(!1),t}static isEndSegment(e,t){return 0===t||t>=e.size()-2}static createAnyIntersectionFinder(e){return new NodingIntersectionFinder(e)}static createInteriorIntersectionsFinder(e){const t=new NodingIntersectionFinder(e);return t.setFindAllIntersections(!0),t.setInteriorIntersectionsOnly(!0),t}setCheckEndSegmentsOnly(e){this._isCheckEndSegmentsOnly=e}getIntersectionSegments(){return this._intSegments}count(){return this._intersectionCount}getIntersections(){return this._intersections}setFindAllIntersections(e){this._findAllIntersections=e}setKeepIntersections(e){this._keepIntersections=e}getIntersection(){return this._interiorIntersection}processIntersections(e,t,n,i){if(!this._findAllIntersections&&this.hasIntersection())return null;const r=e===n;if(r&&t===i)return null;if(this._isCheckEndSegmentsOnly){if(!(NodingIntersectionFinder.isEndSegment(e,t)||NodingIntersectionFinder.isEndSegment(n,i)))return null}const o=e.getCoordinate(t),a=e.getCoordinate(t+1),s=n.getCoordinate(i),l=n.getCoordinate(i+1),c=0===t,h=t+2===e.size(),u=0===i,d=i+2===n.size();this._li.computeIntersection(o,a,s,l);const g=this._li.hasIntersection()&&this._li.isInteriorIntersection();let m=!1;if(!this._isInteriorIntersectionsOnly){m=!(r&&Math.abs(i-t)<=1)&&NodingIntersectionFinder.isInteriorVertexIntersection(o,a,s,l,c,h,u,d)}(g||m)&&(this._intSegments=new Array(4).fill(null),this._intSegments[0]=o,this._intSegments[1]=a,this._intSegments[2]=s,this._intSegments[3]=l,this._interiorIntersection=this._li.getIntersection(0),this._keepIntersections&&this._intersections.add(this._interiorIntersection),this._intersectionCount++)}hasIntersection(){return null!==this._interiorIntersection}isDone(){return!this._findAllIntersections&&null!==this._interiorIntersection}setInteriorIntersectionsOnly(e){this._isInteriorIntersectionsOnly=e}get interfaces_(){return[ee]}}class FastNodingValidator{constructor(){FastNodingValidator.constructor_.apply(this,arguments)}static constructor_(){this._li=new RobustLineIntersector,this._segStrings=null,this._findAllIntersections=!1,this._segInt=null,this._isValid=!0;const e=arguments[0];this._segStrings=e}static computeIntersections(e){const t=new FastNodingValidator(e);return t.setFindAllIntersections(!0),t.isValid(),t.getIntersections()}execute(){if(null!==this._segInt)return null;this.checkInteriorIntersections()}getIntersections(){return this._segInt.getIntersections()}isValid(){return this.execute(),this._isValid}setFindAllIntersections(e){this._findAllIntersections=e}checkInteriorIntersections(){this._isValid=!0,this._segInt=new NodingIntersectionFinder(this._li),this._segInt.setFindAllIntersections(this._findAllIntersections);const e=new MCIndexNoder;if(e.setSegmentIntersector(this._segInt),e.computeNodes(this._segStrings),this._segInt.hasIntersection())return this._isValid=!1,null}checkValid(){if(this.execute(),!this._isValid)throw new TopologyException(this.getErrorMessage(),this._segInt.getIntersection())}getErrorMessage(){if(this._isValid)return"no intersections found";const e=this._segInt.getIntersectionSegments();return"found non-noded intersection between "+WKTWriter.toLineString(e[0],e[1])+" and "+WKTWriter.toLineString(e[2],e[3])}}class EdgeNodingValidator{constructor(){EdgeNodingValidator.constructor_.apply(this,arguments)}static constructor_(){this._nv=null;const e=arguments[0];this._nv=new FastNodingValidator(EdgeNodingValidator.toSegmentStrings(e))}static toSegmentStrings(e){const t=new ArrayList;for(let n=e.iterator();n.hasNext();){const e=n.next();t.add(new BasicSegmentString(e.getCoordinates(),e))}return t}static checkValid(e){new EdgeNodingValidator(e).checkValid()}checkValid(){this._nv.checkValid()}}class GeometryCollectionMapper{constructor(){GeometryCollectionMapper.constructor_.apply(this,arguments)}static constructor_(){this._mapOp=null;const e=arguments[0];this._mapOp=e}static map(e,t){return new GeometryCollectionMapper(t).map(e)}map(e){const t=new ArrayList;for(let n=0;n<e.getNumGeometries();n++){const i=this._mapOp.map(e.getGeometryN(n));i.isEmpty()||t.add(i)}return e.getFactory().createGeometryCollection(GeometryFactory.toGeometryArray(t))}}class LineBuilder{constructor(){LineBuilder.constructor_.apply(this,arguments)}static constructor_(){this._op=null,this._geometryFactory=null,this._ptLocator=null,this._lineEdgesList=new ArrayList,this._resultLineList=new ArrayList;const e=arguments[0],t=arguments[1],n=arguments[2];this._op=e,this._geometryFactory=t,this._ptLocator=n}collectLines(e){for(let t=this._op.getGraph().getEdgeEnds().iterator();t.hasNext();){const n=t.next();this.collectLineEdge(n,e,this._lineEdgesList),this.collectBoundaryTouchEdge(n,e,this._lineEdgesList)}}labelIsolatedLine(e,t){const n=this._ptLocator.locate(e.getCoordinate(),this._op.getArgGeometry(t));e.getLabel().setLocation(t,n)}build(e){return this.findCoveredLineEdges(),this.collectLines(e),this.buildLines(e),this._resultLineList}collectLineEdge(e,t,n){const i=e.getLabel(),r=e.getEdge();e.isLineEdge()&&(e.isVisited()||!OverlayOp.isResultOfOp(i,t)||r.isCovered()||(n.add(r),e.setVisitedEdge(!0)))}findCoveredLineEdges(){for(let e=this._op.getGraph().getNodes().iterator();e.hasNext();){e.next().getEdges().findCoveredLineEdges()}for(let e=this._op.getGraph().getEdgeEnds().iterator();e.hasNext();){const t=e.next(),n=t.getEdge();if(t.isLineEdge()&&!n.isCoveredSet()){const e=this._op.isCoveredByA(t.getCoordinate());n.setCovered(e)}}}labelIsolatedLines(e){for(let t=e.iterator();t.hasNext();){const e=t.next(),n=e.getLabel();e.isIsolated()&&(n.isNull(0)?this.labelIsolatedLine(e,0):this.labelIsolatedLine(e,1))}}buildLines(e){for(let e=this._lineEdgesList.iterator();e.hasNext();){const t=e.next(),n=this._geometryFactory.createLineString(t.getCoordinates());this._resultLineList.add(n),t.setInResult(!0)}}collectBoundaryTouchEdge(e,t,n){const i=e.getLabel();return e.isLineEdge()||e.isVisited()||e.isInteriorAreaEdge()||e.getEdge().isInResult()?null:(Assert.isTrue(!(e.isInResult()||e.getSym().isInResult())||!e.getEdge().isInResult()),void(OverlayOp.isResultOfOp(i,t)&&t===OverlayOp.INTERSECTION&&(n.add(e.getEdge()),e.setVisitedEdge(!0))))}}class PointBuilder{constructor(){PointBuilder.constructor_.apply(this,arguments)}static constructor_(){this._op=null,this._geometryFactory=null,this._resultPointList=new ArrayList;const e=arguments[0],t=arguments[1];this._op=e,this._geometryFactory=t}filterCoveredNodeToPoint(e){const t=e.getCoordinate();if(!this._op.isCoveredByLA(t)){const e=this._geometryFactory.createPoint(t);this._resultPointList.add(e)}}extractNonCoveredResultNodes(e){for(let t=this._op.getGraph().getNodes().iterator();t.hasNext();){const n=t.next();if(!n.isInResult()&&(!n.isIncidentEdgeInResult()&&(0===n.getEdges().getDegree()||e===OverlayOp.INTERSECTION))){const t=n.getLabel();OverlayOp.isResultOfOp(t,e)&&this.filterCoveredNodeToPoint(n)}}}build(e){return this.extractNonCoveredResultNodes(e),this._resultPointList}}class LineStringSnapper{constructor(){LineStringSnapper.constructor_.apply(this,arguments)}static constructor_(){if(this._snapTolerance=0,this._srcPts=null,this._seg=new LineSegment,this._allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof LineString&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1];LineStringSnapper.constructor_.call(this,e.getCoordinates(),t)}else if(arguments[0]instanceof Array&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1];this._srcPts=e,this._isClosed=LineStringSnapper.isClosed(e),this._snapTolerance=t}}static isClosed(e){return!(e.length<=1)&&e[0].equals2D(e[e.length-1])}snapVertices(e,t){const n=this._isClosed?e.size()-1:e.size();for(let i=0;i<n;i++){const n=e.get(i),r=this.findSnapForVertex(n,t);null!==r&&(e.set(i,new Coordinate(r)),0===i&&this._isClosed&&e.set(e.size()-1,new Coordinate(r)))}}findSnapForVertex(e,t){for(let n=0;n<t.length;n++){if(e.equals2D(t[n]))return null;if(e.distance(t[n])<this._snapTolerance)return t[n]}return null}snapTo(e){const t=new CoordinateList(this._srcPts);this.snapVertices(t,e),this.snapSegments(t,e);return t.toCoordinateArray()}snapSegments(e,t){if(0===t.length)return null;let n=t.length;t[0].equals2D(t[t.length-1])&&(n=t.length-1);for(let i=0;i<n;i++){const n=t[i],r=this.findSegmentIndexToSnap(n,e);r>=0&&e.add(r+1,new Coordinate(n),!1)}}findSegmentIndexToSnap(e,t){let n=p.MAX_VALUE,i=-1;for(let r=0;r<t.size()-1;r++){if(this._seg.p0=t.get(r),this._seg.p1=t.get(r+1),this._seg.p0.equals2D(e)||this._seg.p1.equals2D(e)){if(this._allowSnappingToSourceVertices)continue;return-1}const o=this._seg.distance(e);o<this._snapTolerance&&o<n&&(n=o,i=r)}return i}setAllowSnappingToSourceVertices(e){this._allowSnappingToSourceVertices=e}}class GeometrySnapper{constructor(){GeometrySnapper.constructor_.apply(this,arguments)}static constructor_(){this._srcGeom=null;const e=arguments[0];this._srcGeom=e}static snap(e,t,n){const i=new Array(2).fill(null),r=new GeometrySnapper(e);i[0]=r.snapTo(t,n);const o=new GeometrySnapper(t);return i[1]=o.snapTo(i[0],n),i}static computeOverlaySnapTolerance(){if(1===arguments.length){const e=arguments[0];let t=GeometrySnapper.computeSizeBasedSnapTolerance(e);const n=e.getPrecisionModel();if(n.getType()===PrecisionModel.FIXED){const e=1/n.getScale()*2/1.415;e>t&&(t=e)}return t}if(2===arguments.length){const e=arguments[0],t=arguments[1];return Math.min(GeometrySnapper.computeOverlaySnapTolerance(e),GeometrySnapper.computeOverlaySnapTolerance(t))}}static computeSizeBasedSnapTolerance(e){const t=e.getEnvelopeInternal();return Math.min(t.getHeight(),t.getWidth())*GeometrySnapper.SNAP_PRECISION_FACTOR}static snapToSelf(e,t,n){return new GeometrySnapper(e).snapToSelf(t,n)}snapTo(e,t){const n=this.extractTargetCoordinates(e);return new SnapTransformer(t,n).transform(this._srcGeom)}snapToSelf(e,t){const n=this.extractTargetCoordinates(this._srcGeom),i=new SnapTransformer(e,n,!0).transform(this._srcGeom);let r=i;return t&&b(r,Polygonal)&&(r=i.buffer(0)),r}computeSnapTolerance(e){return this.computeMinimumSegmentLength(e)/10}extractTargetCoordinates(e){const t=new TreeSet,n=e.getCoordinates();for(let e=0;e<n.length;e++)t.add(n[e]);return t.toArray(new Array(0).fill(null))}computeMinimumSegmentLength(e){let t=p.MAX_VALUE;for(let n=0;n<e.length-1;n++){const i=e[n].distance(e[n+1]);i<t&&(t=i)}return t}}GeometrySnapper.SNAP_PRECISION_FACTOR=1e-9;class SnapTransformer extends GeometryTransformer{constructor(){super(),SnapTransformer.constructor_.apply(this,arguments)}static constructor_(){if(this._snapTolerance=null,this._snapPts=null,this._isSelfSnap=!1,2===arguments.length){const e=arguments[0],t=arguments[1];this._snapTolerance=e,this._snapPts=t}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this._snapTolerance=e,this._snapPts=t,this._isSelfSnap=n}}snapLine(e,t){const n=new LineStringSnapper(e,this._snapTolerance);return n.setAllowSnappingToSourceVertices(this._isSelfSnap),n.snapTo(t)}transformCoordinates(e,t){const n=e.toCoordinateArray(),i=this.snapLine(n,this._snapPts);return this._factory.getCoordinateSequenceFactory().create(i)}}class CommonBits{constructor(){this._isFirst=!0,this._commonMantissaBitsCount=53,this._commonBits=new Long,this._commonSignExp=null}getCommon(){return p.longBitsToDouble(this._commonBits)}add(e){const t=p.doubleToLongBits(e);if(this._isFirst)return this._commonBits=t,this._commonSignExp=CommonBits.signExpBits(this._commonBits),this._isFirst=!1,null;if(CommonBits.signExpBits(t)!==this._commonSignExp)return this._commonBits.high=0,this._commonBits.low=0,null;this._commonMantissaBitsCount=CommonBits.numCommonMostSigMantissaBits(this._commonBits,t),this._commonBits=CommonBits.zeroLowerBits(this._commonBits,64-(12+this._commonMantissaBitsCount))}toString(){if(1===arguments.length){const e=arguments[0],t=p.longBitsToDouble(e),n="0000000000000000000000000000000000000000000000000000000000000000"+Long.toBinaryString(e),i=n.substring(n.length-64);return i.substring(0,1)+"  "+i.substring(1,12)+"(exp) "+i.substring(12)+" [ "+t+" ]"}}getClass(){return CommonBits}get interfaces_(){return[]}static getBit(e,t){const n=1<<t%32;return t<32?e.low&n?1:0:e.high&n?1:0}static signExpBits(e){return e.high>>>20}static zeroLowerBits(e,t){let n="low";if(t>32&&(e.low=0,t%=32,n="high"),t>0){const i=t<32?~((1<<t)-1):0;e[n]&=i}return e}static numCommonMostSigMantissaBits(e,t){let n=0;for(let i=52;i>=0;i--){if(CommonBits.getBit(e,i)!==CommonBits.getBit(t,i))return n;n++}return 52}}class CommonBitsRemover{constructor(){CommonBitsRemover.constructor_.apply(this,arguments)}static constructor_(){this._commonCoord=null,this._ccFilter=new CommonCoordinateFilter}addCommonBits(e){const t=new Translater(this._commonCoord);e.apply(t),e.geometryChanged()}removeCommonBits(e){if(0===this._commonCoord.x&&0===this._commonCoord.y)return e;const t=new Coordinate(this._commonCoord);t.x=-t.x,t.y=-t.y;const n=new Translater(t);return e.apply(n),e.geometryChanged(),e}getCommonCoordinate(){return this._commonCoord}add(e){e.apply(this._ccFilter),this._commonCoord=this._ccFilter.getCommonCoordinate()}}class CommonCoordinateFilter{constructor(){CommonCoordinateFilter.constructor_.apply(this,arguments)}static constructor_(){this._commonBitsX=new CommonBits,this._commonBitsY=new CommonBits}filter(e){this._commonBitsX.add(e.x),this._commonBitsY.add(e.y)}getCommonCoordinate(){return new Coordinate(this._commonBitsX.getCommon(),this._commonBitsY.getCommon())}get interfaces_(){return[CoordinateFilter]}}class Translater{constructor(){Translater.constructor_.apply(this,arguments)}static constructor_(){this.trans=null;const e=arguments[0];this.trans=e}filter(e,t){const n=e.getOrdinate(t,0)+this.trans.x,i=e.getOrdinate(t,1)+this.trans.y;e.setOrdinate(t,0,n),e.setOrdinate(t,1,i)}isDone(){return!1}isGeometryChanged(){return!0}get interfaces_(){return[CoordinateSequenceFilter]}}CommonBitsRemover.CommonCoordinateFilter=CommonCoordinateFilter,CommonBitsRemover.Translater=Translater;class SnapOverlayOp{constructor(){SnapOverlayOp.constructor_.apply(this,arguments)}static constructor_(){this._geom=new Array(2).fill(null),this._snapTolerance=null,this._cbr=null;const e=arguments[0],t=arguments[1];this._geom[0]=e,this._geom[1]=t,this.computeSnapTolerance()}static overlayOp(e,t,n){return new SnapOverlayOp(e,t).getResultGeometry(n)}static union(e,t){return SnapOverlayOp.overlayOp(e,t,OverlayOp.UNION)}static intersection(e,t){return SnapOverlayOp.overlayOp(e,t,OverlayOp.INTERSECTION)}static symDifference(e,t){return SnapOverlayOp.overlayOp(e,t,OverlayOp.SYMDIFFERENCE)}static difference(e,t){return SnapOverlayOp.overlayOp(e,t,OverlayOp.DIFFERENCE)}selfSnap(e){return new GeometrySnapper(e).snapTo(e,this._snapTolerance)}removeCommonBits(e){this._cbr=new CommonBitsRemover,this._cbr.add(e[0]),this._cbr.add(e[1]);const t=new Array(2).fill(null);return t[0]=this._cbr.removeCommonBits(e[0].copy()),t[1]=this._cbr.removeCommonBits(e[1].copy()),t}prepareResult(e){return this._cbr.addCommonBits(e),e}getResultGeometry(e){const t=this.snap(this._geom),n=OverlayOp.overlayOp(t[0],t[1],e);return this.prepareResult(n)}checkValid(e){e.isValid()||System.out.println("Snapped geometry is invalid")}computeSnapTolerance(){this._snapTolerance=GeometrySnapper.computeOverlaySnapTolerance(this._geom[0],this._geom[1])}snap(e){const t=this.removeCommonBits(e);return GeometrySnapper.snap(t[0],t[1],this._snapTolerance)}}class SnapIfNeededOverlayOp{constructor(){SnapIfNeededOverlayOp.constructor_.apply(this,arguments)}static constructor_(){this._geom=new Array(2).fill(null);const e=arguments[0],t=arguments[1];this._geom[0]=e,this._geom[1]=t}static overlayOp(e,t,n){return new SnapIfNeededOverlayOp(e,t).getResultGeometry(n)}static union(e,t){return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.UNION)}static intersection(e,t){return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.INTERSECTION)}static symDifference(e,t){return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.SYMDIFFERENCE)}static difference(e,t){return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.DIFFERENCE)}getResultGeometry(e){let t=null,n=!1,i=null;try{t=OverlayOp.overlayOp(this._geom[0],this._geom[1],e);!0&&(n=!0)}catch(e){if(!(e instanceof RuntimeException))throw e;i=e}if(!n)try{t=SnapOverlayOp.overlayOp(this._geom[0],this._geom[1],e)}catch(e){throw e instanceof RuntimeException?i:e}return t}}class MonotoneChain{constructor(){MonotoneChain.constructor_.apply(this,arguments)}static constructor_(){this.mce=null,this.chainIndex=null;const e=arguments[0],t=arguments[1];this.mce=e,this.chainIndex=t}computeIntersections(e,t){this.mce.computeIntersectsForChain(this.chainIndex,e.mce,e.chainIndex,t)}}class SweepLineEvent{constructor(){SweepLineEvent.constructor_.apply(this,arguments)}static constructor_(){if(this._label=null,this._xValue=null,this._eventType=null,this._insertEvent=null,this._deleteEventIndex=null,this._obj=null,2===arguments.length){const e=arguments[0],t=arguments[1];this._eventType=SweepLineEvent.DELETE,this._xValue=e,this._insertEvent=t}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this._eventType=SweepLineEvent.INSERT,this._label=e,this._xValue=t,this._obj=n}}isDelete(){return this._eventType===SweepLineEvent.DELETE}setDeleteEventIndex(e){this._deleteEventIndex=e}getObject(){return this._obj}compareTo(e){const t=e;return this._xValue<t._xValue?-1:this._xValue>t._xValue?1:this._eventType<t._eventType?-1:this._eventType>t._eventType?1:0}getInsertEvent(){return this._insertEvent}isInsert(){return this._eventType===SweepLineEvent.INSERT}isSameLabel(e){return null!==this._label&&this._label===e._label}getDeleteEventIndex(){return this._deleteEventIndex}get interfaces_(){return[d]}}SweepLineEvent.INSERT=1,SweepLineEvent.DELETE=2;class EdgeSetIntersector{}class SegmentIntersector{constructor(){SegmentIntersector.constructor_.apply(this,arguments)}static constructor_(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._properIntersectionPoint=null,this._li=null,this._includeProper=null,this._recordIsolated=null,this._isSelfIntersection=null,this._numIntersections=0,this.numTests=0,this._bdyNodes=null,this._isDone=!1,this._isDoneWhenProperInt=!1;const e=arguments[0],t=arguments[1],n=arguments[2];this._li=e,this._includeProper=t,this._recordIsolated=n}static isAdjacentSegments(e,t){return 1===Math.abs(e-t)}isTrivialIntersection(e,t,n,i){if(e===n&&1===this._li.getIntersectionNum()){if(SegmentIntersector.isAdjacentSegments(t,i))return!0;if(e.isClosed()){const n=e.getNumPoints()-1;if(0===t&&i===n||0===i&&t===n)return!0}}return!1}getProperIntersectionPoint(){return this._properIntersectionPoint}setIsDoneIfProperInt(e){this._isDoneWhenProperInt=e}hasProperInteriorIntersection(){return this._hasProperInterior}isBoundaryPointInternal(e,t){for(let n=t.iterator();n.hasNext();){const t=n.next().getCoordinate();if(e.isIntersection(t))return!0}return!1}hasProperIntersection(){return this._hasProper}hasIntersection(){return this._hasIntersection}isDone(){return this._isDone}isBoundaryPoint(e,t){return null!==t&&(!!this.isBoundaryPointInternal(e,t[0])||!!this.isBoundaryPointInternal(e,t[1]))}setBoundaryNodes(e,t){this._bdyNodes=new Array(2).fill(null),this._bdyNodes[0]=e,this._bdyNodes[1]=t}addIntersections(e,t,n,i){if(e===n&&t===i)return null;this.numTests++;const r=e.getCoordinates()[t],o=e.getCoordinates()[t+1],a=n.getCoordinates()[i],s=n.getCoordinates()[i+1];this._li.computeIntersection(r,o,a,s),this._li.hasIntersection()&&(this._recordIsolated&&(e.setIsolated(!1),n.setIsolated(!1)),this._numIntersections++,this.isTrivialIntersection(e,t,n,i)||(this._hasIntersection=!0,!this._includeProper&&this._li.isProper()||(e.addIntersections(this._li,t,0),n.addIntersections(this._li,i,1)),this._li.isProper()&&(this._properIntersectionPoint=this._li.getIntersection(0).copy(),this._hasProper=!0,this._isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this._li,this._bdyNodes)||(this._hasProperInterior=!0))))}}class SimpleMCSweepLineIntersector extends EdgeSetIntersector{constructor(){super(),SimpleMCSweepLineIntersector.constructor_.apply(this,arguments)}static constructor_(){this.events=new ArrayList,this.nOverlaps=null}prepareEvents(){Z.sort(this.events);for(let e=0;e<this.events.size();e++){const t=this.events.get(e);t.isDelete()&&t.getInsertEvent().setDeleteEventIndex(e)}}computeIntersections(){if(1===arguments.length){const e=arguments[0];this.nOverlaps=0,this.prepareEvents();for(let t=0;t<this.events.size();t++){const n=this.events.get(t);if(n.isInsert()&&this.processOverlaps(t,n.getDeleteEventIndex(),n,e),e.isDone())break}}else if(3===arguments.length)if(arguments[2]instanceof SegmentIntersector&&b(arguments[0],List)&&b(arguments[1],List)){const e=arguments[0],t=arguments[1],n=arguments[2];this.addEdges(e,e),this.addEdges(t,t),this.computeIntersections(n)}else if("boolean"==typeof arguments[2]&&b(arguments[0],List)&&arguments[1]instanceof SegmentIntersector){const e=arguments[0],t=arguments[1];arguments[2]?this.addEdges(e,null):this.addEdges(e),this.computeIntersections(t)}}addEdge(e,t){const n=e.getMonotoneChainEdge(),i=n.getStartIndexes();for(let e=0;e<i.length-1;e++){const i=new MonotoneChain(n,e),r=new SweepLineEvent(t,n.getMinX(e),i);this.events.add(r),this.events.add(new SweepLineEvent(n.getMaxX(e),r))}}processOverlaps(e,t,n,i){const r=n.getObject();for(let o=e;o<t;o++){const e=this.events.get(o);if(e.isInsert()){const t=e.getObject();n.isSameLabel(e)||(r.computeIntersections(t,i),this.nOverlaps++)}}}addEdges(){if(1===arguments.length){for(let e=arguments[0].iterator();e.hasNext();){const t=e.next();this.addEdge(t,t)}}else if(2===arguments.length){const e=arguments[1];for(let t=arguments[0].iterator();t.hasNext();){const n=t.next();this.addEdge(n,e)}}}}class IntervalRTreeNode{constructor(){IntervalRTreeNode.constructor_.apply(this,arguments)}static constructor_(){this._min=p.POSITIVE_INFINITY,this._max=p.NEGATIVE_INFINITY}getMin(){return this._min}intersects(e,t){return!(this._min>t||this._max<e)}getMax(){return this._max}toString(){return WKTWriter.toLineString(new Coordinate(this._min,0),new Coordinate(this._max,0))}}IntervalRTreeNode.NodeComparator=class NodeComparator{compare(e,t){const n=e,i=t,r=(n._min+n._max)/2,o=(i._min+i._max)/2;return r<o?-1:r>o?1:0}get interfaces_(){return[f]}};class IntervalRTreeLeafNode extends IntervalRTreeNode{constructor(){super(),IntervalRTreeLeafNode.constructor_.apply(this,arguments)}static constructor_(){this._item=null;const e=arguments[0],t=arguments[1],n=arguments[2];this._min=e,this._max=t,this._item=n}query(e,t,n){if(!this.intersects(e,t))return null;n.visitItem(this._item)}}class IntervalRTreeBranchNode extends IntervalRTreeNode{constructor(){super(),IntervalRTreeBranchNode.constructor_.apply(this,arguments)}static constructor_(){this._node1=null,this._node2=null;const e=arguments[0],t=arguments[1];this._node1=e,this._node2=t,this.buildExtent(this._node1,this._node2)}buildExtent(e,t){this._min=Math.min(e._min,t._min),this._max=Math.max(e._max,t._max)}query(e,t,n){if(!this.intersects(e,t))return null;null!==this._node1&&this._node1.query(e,t,n),null!==this._node2&&this._node2.query(e,t,n)}}class SortedPackedIntervalRTree{constructor(){SortedPackedIntervalRTree.constructor_.apply(this,arguments)}static constructor_(){this._leaves=new ArrayList,this._root=null,this._level=0}buildTree(){Z.sort(this._leaves,new IntervalRTreeNode.NodeComparator);let e=this._leaves,t=null,n=new ArrayList;for(;;){if(this.buildLevel(e,n),1===n.size())return n.get(0);t=e,e=n,n=t}}insert(e,t,n){if(null!==this._root)throw new IllegalStateException("Index cannot be added to once it has been queried");this._leaves.add(new IntervalRTreeLeafNode(e,t,n))}query(e,t,n){if(this.init(),null===this._root)return null;this._root.query(e,t,n)}buildRoot(){if(null!==this._root)return null;this._root=this.buildTree()}printNode(e){System.out.println(WKTWriter.toLineString(new Coordinate(e._min,this._level),new Coordinate(e._max,this._level)))}init(){return null!==this._root||0===this._leaves.size()?null:void this.buildRoot()}buildLevel(e,t){this._level++,t.clear();for(let n=0;n<e.size();n+=2){const i=e.get(n);if(null===(n+1<e.size()?e.get(n):null))t.add(i);else{const i=new IntervalRTreeBranchNode(e.get(n),e.get(n+1));t.add(i)}}}}class LinearComponentExtracter{constructor(){LinearComponentExtracter.constructor_.apply(this,arguments)}static constructor_(){if(this._lines=null,this._isForcedToLineString=!1,1===arguments.length){const e=arguments[0];this._lines=e}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this._lines=e,this._isForcedToLineString=t}}static getGeometry(){if(1===arguments.length){const e=arguments[0];return e.getFactory().buildGeometry(LinearComponentExtracter.getLines(e))}if(2===arguments.length){const e=arguments[0],t=arguments[1];return e.getFactory().buildGeometry(LinearComponentExtracter.getLines(e,t))}}static getLines(){if(1===arguments.length){const e=arguments[0];return LinearComponentExtracter.getLines(e,!1)}if(2===arguments.length){if(b(arguments[0],Collection)&&b(arguments[1],Collection)){const e=arguments[1];for(let t=arguments[0].iterator();t.hasNext();){const n=t.next();LinearComponentExtracter.getLines(n,e)}return e}if(arguments[0]instanceof Geometry&&"boolean"==typeof arguments[1]){const e=arguments[0],t=arguments[1],n=new ArrayList;return e.apply(new LinearComponentExtracter(n,t)),n}if(arguments[0]instanceof Geometry&&b(arguments[1],Collection)){const e=arguments[0],t=arguments[1];return e instanceof LineString?t.add(e):e.apply(new LinearComponentExtracter(t)),t}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&b(arguments[0],Collection)&&b(arguments[1],Collection)){const e=arguments[1],t=arguments[2];for(let n=arguments[0].iterator();n.hasNext();){const i=n.next();LinearComponentExtracter.getLines(i,e,t)}return e}if("boolean"==typeof arguments[2]&&arguments[0]instanceof Geometry&&b(arguments[1],Collection)){const e=arguments[1],t=arguments[2];return arguments[0].apply(new LinearComponentExtracter(e,t)),e}}}filter(e){if(this._isForcedToLineString&&e instanceof LinearRing){const t=e.getFactory().createLineString(e.getCoordinateSequence());return this._lines.add(t),null}e instanceof LineString&&this._lines.add(e)}setForceToLineString(e){this._isForcedToLineString=e}get interfaces_(){return[GeometryComponentFilter]}}class ArrayListVisitor{constructor(){ArrayListVisitor.constructor_.apply(this,arguments)}static constructor_(){this._items=new ArrayList}visitItem(e){this._items.add(e)}getItems(){return this._items}get interfaces_(){return[ItemVisitor]}}class IndexedPointInAreaLocator{constructor(){IndexedPointInAreaLocator.constructor_.apply(this,arguments)}static constructor_(){this._geom=null,this._index=null;const e=arguments[0];if(!(b(e,Polygonal)||e instanceof LinearRing))throw new IllegalArgumentException("Argument must be Polygonal or LinearRing");this._geom=e}locate(e){null===this._index&&(this._index=new IntervalIndexedGeometry(this._geom),this._geom=null);const t=new RayCrossingCounter(e),n=new SegmentVisitor(t);return this._index.query(e.y,e.y,n),t.getLocation()}get interfaces_(){return[PointOnGeometryLocator]}}class SegmentVisitor{constructor(){SegmentVisitor.constructor_.apply(this,arguments)}static constructor_(){this._counter=null;const e=arguments[0];this._counter=e}visitItem(e){const t=e;this._counter.countSegment(t.getCoordinate(0),t.getCoordinate(1))}get interfaces_(){return[ItemVisitor]}}class IntervalIndexedGeometry{constructor(){IntervalIndexedGeometry.constructor_.apply(this,arguments)}static constructor_(){this._isEmpty=!1,this._index=new SortedPackedIntervalRTree;const e=arguments[0];e.isEmpty()?this._isEmpty=!0:this.init(e)}init(e){for(let t=LinearComponentExtracter.getLines(e).iterator();t.hasNext();){const e=t.next().getCoordinates();this.addLine(e)}}addLine(e){for(let t=1;t<e.length;t++){const n=new LineSegment(e[t-1],e[t]),i=Math.min(n.p0.y,n.p1.y),r=Math.max(n.p0.y,n.p1.y);this._index.insert(i,r,n)}}query(){if(2===arguments.length){const e=arguments[0],t=arguments[1];if(this._isEmpty)return new ArrayList;const n=new ArrayListVisitor;return this._index.query(e,t,n),n.getItems()}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];if(this._isEmpty)return null;this._index.query(e,t,n)}}}IndexedPointInAreaLocator.SegmentVisitor=SegmentVisitor,IndexedPointInAreaLocator.IntervalIndexedGeometry=IntervalIndexedGeometry;class GeometryGraph extends PlanarGraph{constructor(){super(),GeometryGraph.constructor_.apply(this,arguments)}static constructor_(){if(this._parentGeom=null,this._lineEdgeMap=new HashMap,this._boundaryNodeRule=null,this._useBoundaryDeterminationRule=!0,this._argIndex=null,this._boundaryNodes=null,this._hasTooFewPoints=!1,this._invalidPoint=null,this._areaPtLocator=null,this._ptLocator=new PointLocator,2===arguments.length){const e=arguments[0],t=arguments[1];GeometryGraph.constructor_.call(this,e,t,BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];this._argIndex=e,this._parentGeom=t,this._boundaryNodeRule=n,null!==t&&this.add(t)}}static determineBoundary(e,t){return e.isInBoundary(t)?Location.BOUNDARY:Location.INTERIOR}insertBoundaryPoint(e,t){const n=this._nodes.addNode(t).getLabel();let i=1,r=Location.NONE;r=n.getLocation(e,Position.ON),r===Location.BOUNDARY&&i++;const o=GeometryGraph.determineBoundary(this._boundaryNodeRule,i);n.setLocation(e,o)}computeSelfNodes(){if(2===arguments.length){const e=arguments[0],t=arguments[1];return this.computeSelfNodes(e,t,!1)}if(3===arguments.length){const e=arguments[1],t=arguments[2],n=new SegmentIntersector(arguments[0],!0,!1);n.setIsDoneIfProperInt(t);const i=this.createEdgeSetIntersector(),r=this._parentGeom instanceof LinearRing||this._parentGeom instanceof Polygon||this._parentGeom instanceof MultiPolygon,o=e||!r;return i.computeIntersections(this._edges,n,o),this.addSelfIntersectionNodes(this._argIndex),n}}computeSplitEdges(e){for(let t=this._edges.iterator();t.hasNext();){t.next().eiList.addSplitEdges(e)}}computeEdgeIntersections(e,t,n){const i=new SegmentIntersector(t,n,!0);i.setBoundaryNodes(this.getBoundaryNodes(),e.getBoundaryNodes());return this.createEdgeSetIntersector().computeIntersections(this._edges,e._edges,i),i}getGeometry(){return this._parentGeom}getBoundaryNodeRule(){return this._boundaryNodeRule}hasTooFewPoints(){return this._hasTooFewPoints}addPoint(){if(arguments[0]instanceof Point){const e=arguments[0].getCoordinate();this.insertPoint(this._argIndex,e,Location.INTERIOR)}else if(arguments[0]instanceof Coordinate){const e=arguments[0];this.insertPoint(this._argIndex,e,Location.INTERIOR)}}addPolygon(e){this.addPolygonRing(e.getExteriorRing(),Location.EXTERIOR,Location.INTERIOR);for(let t=0;t<e.getNumInteriorRing();t++){const n=e.getInteriorRingN(t);this.addPolygonRing(n,Location.INTERIOR,Location.EXTERIOR)}}addEdge(e){this.insertEdge(e);const t=e.getCoordinates();this.insertPoint(this._argIndex,t[0],Location.BOUNDARY),this.insertPoint(this._argIndex,t[t.length-1],Location.BOUNDARY)}addLineString(e){const t=CoordinateArrays.removeRepeatedPoints(e.getCoordinates());if(t.length<2)return this._hasTooFewPoints=!0,this._invalidPoint=t[0],null;const n=new Edge(t,new Label(this._argIndex,Location.INTERIOR));this._lineEdgeMap.put(e,n),this.insertEdge(n),Assert.isTrue(t.length>=2,"found LineString with single point"),this.insertBoundaryPoint(this._argIndex,t[0]),this.insertBoundaryPoint(this._argIndex,t[t.length-1])}getInvalidPoint(){return this._invalidPoint}getBoundaryPoints(){const e=this.getBoundaryNodes(),t=new Array(e.size()).fill(null);let n=0;for(let i=e.iterator();i.hasNext();){const e=i.next();t[n++]=e.getCoordinate().copy()}return t}getBoundaryNodes(){return null===this._boundaryNodes&&(this._boundaryNodes=this._nodes.getBoundaryNodes(this._argIndex)),this._boundaryNodes}addSelfIntersectionNode(e,t,n){if(this.isBoundaryNode(e,t))return null;n===Location.BOUNDARY&&this._useBoundaryDeterminationRule?this.insertBoundaryPoint(e,t):this.insertPoint(e,t,n)}addPolygonRing(e,t,n){if(e.isEmpty())return null;const i=CoordinateArrays.removeRepeatedPoints(e.getCoordinates());if(i.length<4)return this._hasTooFewPoints=!0,this._invalidPoint=i[0],null;let r=t,o=n;Orientation.isCCW(i)&&(r=n,o=t);const a=new Edge(i,new Label(this._argIndex,Location.BOUNDARY,r,o));this._lineEdgeMap.put(e,a),this.insertEdge(a),this.insertPoint(this._argIndex,i[0],Location.BOUNDARY)}insertPoint(e,t,n){const i=this._nodes.addNode(t),r=i.getLabel();null===r?i._label=new Label(e,n):r.setLocation(e,n)}createEdgeSetIntersector(){return new SimpleMCSweepLineIntersector}addSelfIntersectionNodes(e){for(let t=this._edges.iterator();t.hasNext();){const n=t.next(),i=n.getLabel().getLocation(e);for(let t=n.eiList.iterator();t.hasNext();){const n=t.next();this.addSelfIntersectionNode(e,n.coord,i)}}}add(){if(!(1===arguments.length&&arguments[0]instanceof Geometry))return super.add.apply(this,arguments);{const e=arguments[0];if(e.isEmpty())return null;if(e instanceof MultiPolygon&&(this._useBoundaryDeterminationRule=!1),e instanceof Polygon)this.addPolygon(e);else if(e instanceof LineString)this.addLineString(e);else if(e instanceof Point)this.addPoint(e);else if(e instanceof MultiPoint)this.addCollection(e);else if(e instanceof MultiLineString)this.addCollection(e);else if(e instanceof MultiPolygon)this.addCollection(e);else{if(!(e instanceof GeometryCollection))throw new UnsupportedOperationException(e.getGeometryType());this.addCollection(e)}}}addCollection(e){for(let t=0;t<e.getNumGeometries();t++){const n=e.getGeometryN(t);this.add(n)}}locate(e){return b(this._parentGeom,Polygonal)&&this._parentGeom.getNumGeometries()>50?(null===this._areaPtLocator&&(this._areaPtLocator=new IndexedPointInAreaLocator(this._parentGeom)),this._areaPtLocator.locate(e)):this._ptLocator.locate(e,this._parentGeom)}findEdge(){if(1===arguments.length&&arguments[0]instanceof LineString){const e=arguments[0];return this._lineEdgeMap.get(e)}return super.findEdge.apply(this,arguments)}}class GeometryGraphOperation{constructor(){GeometryGraphOperation.constructor_.apply(this,arguments)}static constructor_(){if(this._li=new RobustLineIntersector,this._resultPrecisionModel=null,this._arg=null,1===arguments.length){const e=arguments[0];this.setComputationPrecision(e.getPrecisionModel()),this._arg=new Array(1).fill(null),this._arg[0]=new GeometryGraph(0,e)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];GeometryGraphOperation.constructor_.call(this,e,t,BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];e.getPrecisionModel().compareTo(t.getPrecisionModel())>=0?this.setComputationPrecision(e.getPrecisionModel()):this.setComputationPrecision(t.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new GeometryGraph(0,e,n),this._arg[1]=new GeometryGraph(1,t,n)}}getArgGeometry(e){return this._arg[e].getGeometry()}setComputationPrecision(e){this._resultPrecisionModel=e,this._li.setPrecisionModel(this._resultPrecisionModel)}}class OverlayOp extends GeometryGraphOperation{constructor(){super(),OverlayOp.constructor_.apply(this,arguments)}static constructor_(){this._ptLocator=new PointLocator,this._geomFact=null,this._resultGeom=null,this._graph=null,this._edgeList=new EdgeList,this._resultPolyList=new ArrayList,this._resultLineList=new ArrayList,this._resultPointList=new ArrayList;const e=arguments[0],t=arguments[1];GeometryGraphOperation.constructor_.call(this,e,t),this._graph=new PlanarGraph(new OverlayNodeFactory),this._geomFact=e.getFactory()}static overlayOp(e,t,n){return new OverlayOp(e,t).getResultGeometry(n)}static union(e,t){if(e.isEmpty()||t.isEmpty()){if(e.isEmpty()&&t.isEmpty())return OverlayOp.createEmptyResult(OverlayOp.UNION,e,t,e.getFactory());if(e.isEmpty())return t.copy();if(t.isEmpty())return e.copy()}if(e.isGeometryCollection()||t.isGeometryCollection())throw new IllegalArgumentException("This method does not support GeometryCollection arguments");return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.UNION)}static intersection(e,t){if(e.isEmpty()||t.isEmpty())return OverlayOp.createEmptyResult(OverlayOp.INTERSECTION,e,t,e.getFactory());if(e.isGeometryCollection()){const n=t;return GeometryCollectionMapper.map(e,new class{get interfaces_(){return[MapOp]}map(e){return OverlayOp.intersection(e,n)}})}return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.INTERSECTION)}static symDifference(e,t){if(e.isEmpty()||t.isEmpty()){if(e.isEmpty()&&t.isEmpty())return OverlayOp.createEmptyResult(OverlayOp.SYMDIFFERENCE,e,t,e.getFactory());if(e.isEmpty())return t.copy();if(t.isEmpty())return e.copy()}if(e.isGeometryCollection()||t.isGeometryCollection())throw new IllegalArgumentException("This method does not support GeometryCollection arguments");return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.SYMDIFFERENCE)}static resultDimension(e,t,n){const i=t.getDimension(),r=n.getDimension();let o=-1;switch(e){case OverlayOp.INTERSECTION:o=Math.min(i,r);break;case OverlayOp.UNION:o=Math.max(i,r);break;case OverlayOp.DIFFERENCE:o=i;break;case OverlayOp.SYMDIFFERENCE:o=Math.max(i,r)}return o}static createEmptyResult(e,t,n,i){const r=OverlayOp.resultDimension(e,t,n);return i.createEmpty(r)}static difference(e,t){if(e.isEmpty())return OverlayOp.createEmptyResult(OverlayOp.DIFFERENCE,e,t,e.getFactory());if(t.isEmpty())return e.copy();if(e.isGeometryCollection()||t.isGeometryCollection())throw new IllegalArgumentException("This method does not support GeometryCollection arguments");return SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.DIFFERENCE)}static isResultOfOp(){if(2===arguments.length){const e=arguments[0],t=arguments[1],n=e.getLocation(0),i=e.getLocation(1);return OverlayOp.isResultOfOp(n,i,t)}if(3===arguments.length){let e=arguments[0],t=arguments[1],n=arguments[2];switch(e===Location.BOUNDARY&&(e=Location.INTERIOR),t===Location.BOUNDARY&&(t=Location.INTERIOR),n){case OverlayOp.INTERSECTION:return e===Location.INTERIOR&&t===Location.INTERIOR;case OverlayOp.UNION:return e===Location.INTERIOR||t===Location.INTERIOR;case OverlayOp.DIFFERENCE:return e===Location.INTERIOR&&t!==Location.INTERIOR;case OverlayOp.SYMDIFFERENCE:return e===Location.INTERIOR&&t!==Location.INTERIOR||e!==Location.INTERIOR&&t===Location.INTERIOR}return!1}}insertUniqueEdge(e){const t=this._edgeList.findEqualEdge(e);if(null!==t){const n=t.getLabel();let i=e.getLabel();t.isPointwiseEqual(e)||(i=new Label(e.getLabel()),i.flip());const r=t.getDepth();r.isNull()&&r.add(n),r.add(i),n.merge(i)}else this._edgeList.add(e)}getGraph(){return this._graph}cancelDuplicateResultEdges(){for(let e=this._graph.getEdgeEnds().iterator();e.hasNext();){const t=e.next(),n=t.getSym();t.isInResult()&&n.isInResult()&&(t.setInResult(!1),n.setInResult(!1))}}isCoveredByLA(e){return!!this.isCovered(e,this._resultLineList)||!!this.isCovered(e,this._resultPolyList)}computeGeometry(e,t,n,i){const r=new ArrayList;return r.addAll(e),r.addAll(t),r.addAll(n),r.isEmpty()?OverlayOp.createEmptyResult(i,this._arg[0].getGeometry(),this._arg[1].getGeometry(),this._geomFact):this._geomFact.buildGeometry(r)}mergeSymLabels(){for(let e=this._graph.getNodes().iterator();e.hasNext();){e.next().getEdges().mergeSymLabels()}}isCovered(e,t){for(let n=t.iterator();n.hasNext();){const t=n.next();if(this._ptLocator.locate(e,t)!==Location.EXTERIOR)return!0}return!1}replaceCollapsedEdges(){const e=new ArrayList;for(let t=this._edgeList.iterator();t.hasNext();){const n=t.next();n.isCollapsed()&&(t.remove(),e.add(n.getCollapsedEdge()))}this._edgeList.addAll(e)}updateNodeLabelling(){for(let e=this._graph.getNodes().iterator();e.hasNext();){const t=e.next(),n=t.getEdges().getLabel();t.getLabel().merge(n)}}getResultGeometry(e){return this.computeOverlay(e),this._resultGeom}insertUniqueEdges(e){for(let t=e.iterator();t.hasNext();){const e=t.next();this.insertUniqueEdge(e)}}computeOverlay(e){this.copyPoints(0),this.copyPoints(1),this._arg[0].computeSelfNodes(this._li,!1),this._arg[1].computeSelfNodes(this._li,!1),this._arg[0].computeEdgeIntersections(this._arg[1],this._li,!0);const t=new ArrayList;this._arg[0].computeSplitEdges(t),this._arg[1].computeSplitEdges(t),this.insertUniqueEdges(t),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),EdgeNodingValidator.checkValid(this._edgeList.getEdges()),this._graph.addEdges(this._edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(e),this.cancelDuplicateResultEdges();const n=new PolygonBuilder(this._geomFact);n.add(this._graph),this._resultPolyList=n.getPolygons();const i=new LineBuilder(this,this._geomFact,this._ptLocator);this._resultLineList=i.build(e);const r=new PointBuilder(this,this._geomFact,this._ptLocator);this._resultPointList=r.build(e),this._resultGeom=this.computeGeometry(this._resultPointList,this._resultLineList,this._resultPolyList,e)}labelIncompleteNode(e,t){const n=this._ptLocator.locate(e.getCoordinate(),this._arg[t].getGeometry());e.getLabel().setLocation(t,n)}copyPoints(e){for(let t=this._arg[e].getNodeIterator();t.hasNext();){const n=t.next();this._graph.addNode(n.getCoordinate()).setLabel(e,n.getLabel().getLocation(e))}}findResultAreaEdges(e){for(let t=this._graph.getEdgeEnds().iterator();t.hasNext();){const n=t.next(),i=n.getLabel();i.isArea()&&!n.isInteriorAreaEdge()&&OverlayOp.isResultOfOp(i.getLocation(0,Position.RIGHT),i.getLocation(1,Position.RIGHT),e)&&n.setInResult(!0)}}computeLabelsFromDepths(){for(let e=this._edgeList.iterator();e.hasNext();){const t=e.next(),n=t.getLabel(),i=t.getDepth();if(!i.isNull()){i.normalize();for(let e=0;e<2;e++)n.isNull(e)||!n.isArea()||i.isNull(e)||(0===i.getDelta(e)?n.toLine(e):(Assert.isTrue(!i.isNull(e,Position.LEFT),"depth of LEFT side has not been initialized"),n.setLocation(e,Position.LEFT,i.getLocation(e,Position.LEFT)),Assert.isTrue(!i.isNull(e,Position.RIGHT),"depth of RIGHT side has not been initialized"),n.setLocation(e,Position.RIGHT,i.getLocation(e,Position.RIGHT))))}}}computeLabelling(){for(let e=this._graph.getNodes().iterator();e.hasNext();){e.next().getEdges().computeLabelling(this._arg)}this.mergeSymLabels(),this.updateNodeLabelling()}labelIncompleteNodes(){for(let e=this._graph.getNodes().iterator();e.hasNext();){const t=e.next(),n=t.getLabel();t.isIsolated()&&(n.isNull(0)?this.labelIncompleteNode(t,0):this.labelIncompleteNode(t,1)),t.getEdges().updateLabelling(n)}}isCoveredByA(e){return!!this.isCovered(e,this._resultPolyList)}}OverlayOp.INTERSECTION=1,OverlayOp.UNION=2,OverlayOp.DIFFERENCE=3,OverlayOp.SYMDIFFERENCE=4;class EdgeEndBuilder{createEdgeEndForNext(e,t,n,i){const r=n.segmentIndex+1;if(r>=e.getNumPoints()&&null===i)return null;let o=e.getCoordinate(r);null!==i&&i.segmentIndex===n.segmentIndex&&(o=i.coord);const a=new EdgeEnd(e,n.coord,o,new Label(e.getLabel()));t.add(a)}createEdgeEndForPrev(e,t,n,i){let r=n.segmentIndex;if(0===n.dist){if(0===r)return null;r--}let o=e.getCoordinate(r);null!==i&&i.segmentIndex>=r&&(o=i.coord);const a=new Label(e.getLabel());a.flip();const s=new EdgeEnd(e,n.coord,o,a);t.add(s)}computeEdgeEnds(){if(1===arguments.length){const e=arguments[0],t=new ArrayList;for(let n=e;n.hasNext();){const e=n.next();this.computeEdgeEnds(e,t)}return t}if(2===arguments.length){const e=arguments[0],t=arguments[1],n=e.getEdgeIntersectionList();n.addEndpoints();const i=n.iterator();let r=null,o=null;if(!i.hasNext())return null;let a=i.next();do{r=o,o=a,a=null,i.hasNext()&&(a=i.next()),null!==o&&(this.createEdgeEndForPrev(e,t,o,r),this.createEdgeEndForNext(e,t,o,a))}while(null!==o)}}}class EdgeEndBundle extends EdgeEnd{constructor(){super(),EdgeEndBundle.constructor_.apply(this,arguments)}static constructor_(){if(this._edgeEnds=new ArrayList,1===arguments.length){const e=arguments[0];EdgeEndBundle.constructor_.call(this,null,e)}else if(2===arguments.length){const e=arguments[1];EdgeEnd.constructor_.call(this,e.getEdge(),e.getCoordinate(),e.getDirectedCoordinate(),new Label(e.getLabel())),this.insert(e)}}insert(e){this._edgeEnds.add(e)}print(e){e.println("EdgeEndBundle--\x3e Label: "+this._label);for(let t=this.iterator();t.hasNext();){t.next().print(e),e.println()}}iterator(){return this._edgeEnds.iterator()}getEdgeEnds(){return this._edgeEnds}computeLabelOn(e,t){let n=0,i=!1;for(let t=this.iterator();t.hasNext();){const r=t.next().getLabel().getLocation(e);r===Location.BOUNDARY&&n++,r===Location.INTERIOR&&(i=!0)}let r=Location.NONE;i&&(r=Location.INTERIOR),n>0&&(r=GeometryGraph.determineBoundary(t,n)),this._label.setLocation(e,r)}computeLabelSide(e,t){for(let n=this.iterator();n.hasNext();){const i=n.next();if(i.getLabel().isArea()){const n=i.getLabel().getLocation(e,t);if(n===Location.INTERIOR)return this._label.setLocation(e,t,Location.INTERIOR),null;n===Location.EXTERIOR&&this._label.setLocation(e,t,Location.EXTERIOR)}}}getLabel(){return this._label}computeLabelSides(e){this.computeLabelSide(e,Position.LEFT),this.computeLabelSide(e,Position.RIGHT)}updateIM(e){Edge.updateIM(this._label,e)}computeLabel(e){let t=!1;for(let e=this.iterator();e.hasNext();){e.next().getLabel().isArea()&&(t=!0)}this._label=t?new Label(Location.NONE,Location.NONE,Location.NONE):new Label(Location.NONE);for(let n=0;n<2;n++)this.computeLabelOn(n,e),t&&this.computeLabelSides(n)}}class EdgeEndBundleStar extends EdgeEndStar{constructor(){super()}updateIM(e){for(let t=this.iterator();t.hasNext();){t.next().updateIM(e)}}insert(e){let t=this._edgeMap.get(e);null===t?(t=new EdgeEndBundle(e),this.insertEdgeEnd(e,t)):t.insert(e)}}class RelateNode extends Y{constructor(){super(),RelateNode.constructor_.apply(this,arguments)}static constructor_(){const e=arguments[0],t=arguments[1];Y.constructor_.call(this,e,t)}updateIMFromEdges(e){this._edges.updateIM(e)}computeIM(e){e.setAtLeastIfValid(this._label.getLocation(0),this._label.getLocation(1),0)}}class RelateNodeFactory extends NodeFactory{constructor(){super()}createNode(e){return new RelateNode(e,new EdgeEndBundleStar)}}class RelateComputer{constructor(){RelateComputer.constructor_.apply(this,arguments)}static constructor_(){this._li=new RobustLineIntersector,this._ptLocator=new PointLocator,this._arg=null,this._nodes=new NodeMap(new RelateNodeFactory),this._im=null,this._isolatedEdges=new ArrayList,this._invalidPoint=null;const e=arguments[0];this._arg=e}insertEdgeEnds(e){for(let t=e.iterator();t.hasNext();){const e=t.next();this._nodes.add(e)}}computeProperIntersectionIM(e,t){const n=this._arg[0].getGeometry().getDimension(),i=this._arg[1].getGeometry().getDimension(),r=e.hasProperIntersection(),o=e.hasProperInteriorIntersection();2===n&&2===i?r&&t.setAtLeast("212101212"):2===n&&1===i?(r&&t.setAtLeast("FFF0FFFF2"),o&&t.setAtLeast("1FFFFF1FF")):1===n&&2===i?(r&&t.setAtLeast("F0FFFFFF2"),o&&t.setAtLeast("1F1FFFFFF")):1===n&&1===i&&o&&t.setAtLeast("0FFFFFFFF")}labelIsolatedEdges(e,t){for(let n=this._arg[e].getEdgeIterator();n.hasNext();){const e=n.next();e.isIsolated()&&(this.labelIsolatedEdge(e,t,this._arg[t].getGeometry()),this._isolatedEdges.add(e))}}labelIsolatedEdge(e,t,n){if(n.getDimension()>0){const i=this._ptLocator.locate(e.getCoordinate(),n);e.getLabel().setAllLocations(t,i)}else e.getLabel().setAllLocations(t,Location.EXTERIOR)}computeIM(){const e=new IntersectionMatrix;if(e.set(Location.EXTERIOR,Location.EXTERIOR,2),!this._arg[0].getGeometry().getEnvelopeInternal().intersects(this._arg[1].getGeometry().getEnvelopeInternal()))return this.computeDisjointIM(e),e;this._arg[0].computeSelfNodes(this._li,!1),this._arg[1].computeSelfNodes(this._li,!1);const t=this._arg[0].computeEdgeIntersections(this._arg[1],this._li,!1);this.computeIntersectionNodes(0),this.computeIntersectionNodes(1),this.copyNodesAndLabels(0),this.copyNodesAndLabels(1),this.labelIsolatedNodes(),this.computeProperIntersectionIM(t,e);const n=new EdgeEndBuilder,i=n.computeEdgeEnds(this._arg[0].getEdgeIterator());this.insertEdgeEnds(i);const r=n.computeEdgeEnds(this._arg[1].getEdgeIterator());return this.insertEdgeEnds(r),this.labelNodeEdges(),this.labelIsolatedEdges(0,1),this.labelIsolatedEdges(1,0),this.updateIM(e),e}labelNodeEdges(){for(let e=this._nodes.iterator();e.hasNext();){e.next().getEdges().computeLabelling(this._arg)}}copyNodesAndLabels(e){for(let t=this._arg[e].getNodeIterator();t.hasNext();){const n=t.next();this._nodes.addNode(n.getCoordinate()).setLabel(e,n.getLabel().getLocation(e))}}labelIntersectionNodes(e){for(let t=this._arg[e].getEdgeIterator();t.hasNext();){const n=t.next(),i=n.getLabel().getLocation(e);for(let t=n.getEdgeIntersectionList().iterator();t.hasNext();){const n=t.next(),r=this._nodes.find(n.coord);r.getLabel().isNull(e)&&(i===Location.BOUNDARY?r.setLabelBoundary(e):r.setLabel(e,Location.INTERIOR))}}}labelIsolatedNode(e,t){const n=this._ptLocator.locate(e.getCoordinate(),this._arg[t].getGeometry());e.getLabel().setAllLocations(t,n)}computeIntersectionNodes(e){for(let t=this._arg[e].getEdgeIterator();t.hasNext();){const n=t.next(),i=n.getLabel().getLocation(e);for(let t=n.getEdgeIntersectionList().iterator();t.hasNext();){const n=t.next(),r=this._nodes.addNode(n.coord);i===Location.BOUNDARY?r.setLabelBoundary(e):r.getLabel().isNull(e)&&r.setLabel(e,Location.INTERIOR)}}}labelIsolatedNodes(){for(let e=this._nodes.iterator();e.hasNext();){const t=e.next(),n=t.getLabel();Assert.isTrue(n.getGeometryCount()>0,"node with empty label found"),t.isIsolated()&&(n.isNull(0)?this.labelIsolatedNode(t,0):this.labelIsolatedNode(t,1))}}updateIM(e){for(let t=this._isolatedEdges.iterator();t.hasNext();){t.next().updateIM(e)}for(let t=this._nodes.iterator();t.hasNext();){const n=t.next();n.updateIM(e),n.updateIMFromEdges(e)}}computeDisjointIM(e){const t=this._arg[0].getGeometry();t.isEmpty()||(e.set(Location.INTERIOR,Location.EXTERIOR,t.getDimension()),e.set(Location.BOUNDARY,Location.EXTERIOR,t.getBoundaryDimension()));const n=this._arg[1].getGeometry();n.isEmpty()||(e.set(Location.EXTERIOR,Location.INTERIOR,n.getDimension()),e.set(Location.EXTERIOR,Location.BOUNDARY,n.getBoundaryDimension()))}}class RectangleContains{constructor(){RectangleContains.constructor_.apply(this,arguments)}static constructor_(){this._rectEnv=null;const e=arguments[0];this._rectEnv=e.getEnvelopeInternal()}static contains(e,t){return new RectangleContains(e).contains(t)}isContainedInBoundary(e){if(e instanceof Polygon)return!1;if(e instanceof Point)return this.isPointContainedInBoundary(e);if(e instanceof LineString)return this.isLineStringContainedInBoundary(e);for(let t=0;t<e.getNumGeometries();t++){const n=e.getGeometryN(t);if(!this.isContainedInBoundary(n))return!1}return!0}isLineSegmentContainedInBoundary(e,t){if(e.equals(t))return this.isPointContainedInBoundary(e);if(e.x===t.x){if(e.x===this._rectEnv.getMinX()||e.x===this._rectEnv.getMaxX())return!0}else if(e.y===t.y&&(e.y===this._rectEnv.getMinY()||e.y===this._rectEnv.getMaxY()))return!0;return!1}isLineStringContainedInBoundary(e){const t=e.getCoordinateSequence(),n=new Coordinate,i=new Coordinate;for(let e=0;e<t.size()-1;e++)if(t.getCoordinate(e,n),t.getCoordinate(e+1,i),!this.isLineSegmentContainedInBoundary(n,i))return!1;return!0}isPointContainedInBoundary(){if(arguments[0]instanceof Point){const e=arguments[0];return this.isPointContainedInBoundary(e.getCoordinate())}if(arguments[0]instanceof Coordinate){const e=arguments[0];return e.x===this._rectEnv.getMinX()||e.x===this._rectEnv.getMaxX()||e.y===this._rectEnv.getMinY()||e.y===this._rectEnv.getMaxY()}}contains(e){return!!this._rectEnv.contains(e.getEnvelopeInternal())&&!this.isContainedInBoundary(e)}}class RectangleLineIntersector{constructor(){RectangleLineIntersector.constructor_.apply(this,arguments)}static constructor_(){this._li=new RobustLineIntersector,this._rectEnv=null,this._diagUp0=null,this._diagUp1=null,this._diagDown0=null,this._diagDown1=null;const e=arguments[0];this._rectEnv=e,this._diagUp0=new Coordinate(e.getMinX(),e.getMinY()),this._diagUp1=new Coordinate(e.getMaxX(),e.getMaxY()),this._diagDown0=new Coordinate(e.getMinX(),e.getMaxY()),this._diagDown1=new Coordinate(e.getMaxX(),e.getMinY())}intersects(e,t){const n=new Envelope(e,t);if(!this._rectEnv.intersects(n))return!1;if(this._rectEnv.intersects(e))return!0;if(this._rectEnv.intersects(t))return!0;if(e.compareTo(t)>0){const n=e;e=t,t=n}let i=!1;return t.y>e.y&&(i=!0),i?this._li.computeIntersection(e,t,this._diagDown0,this._diagDown1):this._li.computeIntersection(e,t,this._diagUp0,this._diagUp1),!!this._li.hasIntersection()}}class ShortCircuitedGeometryVisitor{constructor(){ShortCircuitedGeometryVisitor.constructor_.apply(this,arguments)}static constructor_(){this._isDone=!1}applyTo(e){for(let t=0;t<e.getNumGeometries()&&!this._isDone;t++){const n=e.getGeometryN(t);if(n instanceof GeometryCollection)this.applyTo(n);else if(this.visit(n),this.isDone())return this._isDone=!0,null}}}class RectangleIntersects{constructor(){RectangleIntersects.constructor_.apply(this,arguments)}static constructor_(){this._rectangle=null,this._rectEnv=null;const e=arguments[0];this._rectangle=e,this._rectEnv=e.getEnvelopeInternal()}static intersects(e,t){return new RectangleIntersects(e).intersects(t)}intersects(e){if(!this._rectEnv.intersects(e.getEnvelopeInternal()))return!1;const t=new EnvelopeIntersectsVisitor(this._rectEnv);if(t.applyTo(e),t.intersects())return!0;const n=new GeometryContainsPointVisitor(this._rectangle);if(n.applyTo(e),n.containsPoint())return!0;const i=new RectangleIntersectsSegmentVisitor(this._rectangle);return i.applyTo(e),!!i.intersects()}}class EnvelopeIntersectsVisitor extends ShortCircuitedGeometryVisitor{constructor(){super(),EnvelopeIntersectsVisitor.constructor_.apply(this,arguments)}static constructor_(){this._rectEnv=null,this._intersects=!1;const e=arguments[0];this._rectEnv=e}isDone(){return!0===this._intersects}visit(e){const t=e.getEnvelopeInternal();return this._rectEnv.intersects(t)?this._rectEnv.contains(t)||t.getMinX()>=this._rectEnv.getMinX()&&t.getMaxX()<=this._rectEnv.getMaxX()||t.getMinY()>=this._rectEnv.getMinY()&&t.getMaxY()<=this._rectEnv.getMaxY()?(this._intersects=!0,null):void 0:null}intersects(){return this._intersects}}class GeometryContainsPointVisitor extends ShortCircuitedGeometryVisitor{constructor(){super(),GeometryContainsPointVisitor.constructor_.apply(this,arguments)}static constructor_(){this._rectSeq=null,this._rectEnv=null,this._containsPoint=!1;const e=arguments[0];this._rectSeq=e.getExteriorRing().getCoordinateSequence(),this._rectEnv=e.getEnvelopeInternal()}isDone(){return!0===this._containsPoint}visit(e){if(!(e instanceof Polygon))return null;const t=e.getEnvelopeInternal();if(!this._rectEnv.intersects(t))return null;const n=new Coordinate;for(let i=0;i<4;i++)if(this._rectSeq.getCoordinate(i,n),t.contains(n)&&SimplePointInAreaLocator.containsPointInPolygon(n,e))return this._containsPoint=!0,null}containsPoint(){return this._containsPoint}}class RectangleIntersectsSegmentVisitor extends ShortCircuitedGeometryVisitor{constructor(){super(),RectangleIntersectsSegmentVisitor.constructor_.apply(this,arguments)}static constructor_(){this._rectEnv=null,this._rectIntersector=null,this._hasIntersection=!1,this._p0=new Coordinate,this._p1=new Coordinate;const e=arguments[0];this._rectEnv=e.getEnvelopeInternal(),this._rectIntersector=new RectangleLineIntersector(this._rectEnv)}intersects(){return this._hasIntersection}isDone(){return!0===this._hasIntersection}visit(e){const t=e.getEnvelopeInternal();if(!this._rectEnv.intersects(t))return null;const n=LinearComponentExtracter.getLines(e);this.checkIntersectionWithLineStrings(n)}checkIntersectionWithLineStrings(e){for(let t=e.iterator();t.hasNext();){const e=t.next();if(this.checkIntersectionWithSegments(e),this._hasIntersection)return null}}checkIntersectionWithSegments(e){const t=e.getCoordinateSequence();for(let e=1;e<t.size();e++)if(t.getCoordinate(e-1,this._p0),t.getCoordinate(e,this._p1),this._rectIntersector.intersects(this._p0,this._p1))return this._hasIntersection=!0,null}}class RelateOp extends GeometryGraphOperation{constructor(){super(),RelateOp.constructor_.apply(this,arguments)}static constructor_(){if(this._relate=null,2===arguments.length){const e=arguments[0],t=arguments[1];GeometryGraphOperation.constructor_.call(this,e,t),this._relate=new RelateComputer(this._arg)}else if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];GeometryGraphOperation.constructor_.call(this,e,t,n),this._relate=new RelateComputer(this._arg)}}static covers(e,t){return!(2===t.getDimension()&&e.getDimension()<2)&&(!(1===t.getDimension()&&e.getDimension()<1&&t.getLength()>0)&&(!!e.getEnvelopeInternal().covers(t.getEnvelopeInternal())&&(!!e.isRectangle()||new RelateOp(e,t).getIntersectionMatrix().isCovers())))}static intersects(e,t){if(!e.getEnvelopeInternal().intersects(t.getEnvelopeInternal()))return!1;if(e.isRectangle())return RectangleIntersects.intersects(e,t);if(t.isRectangle())return RectangleIntersects.intersects(t,e);if(e.isGeometryCollection()||t.isGeometryCollection()){for(let n=0;n<e.getNumGeometries();n++)for(let i=0;i<t.getNumGeometries();i++)if(e.getGeometryN(n).intersects(t.getGeometryN(i)))return!0;return!1}return new RelateOp(e,t).getIntersectionMatrix().isIntersects()}static touches(e,t){return!!e.getEnvelopeInternal().intersects(t.getEnvelopeInternal())&&new RelateOp(e,t).getIntersectionMatrix().isTouches(e.getDimension(),t.getDimension())}static equalsTopo(e,t){return!!e.getEnvelopeInternal().equals(t.getEnvelopeInternal())&&RelateOp.relate(e,t).isEquals(e.getDimension(),t.getDimension())}static relate(){if(2===arguments.length){return new RelateOp(arguments[0],arguments[1]).getIntersectionMatrix()}if(3===arguments.length){return new RelateOp(arguments[0],arguments[1],arguments[2]).getIntersectionMatrix()}}static overlaps(e,t){return!!e.getEnvelopeInternal().intersects(t.getEnvelopeInternal())&&new RelateOp(e,t).getIntersectionMatrix().isOverlaps(e.getDimension(),t.getDimension())}static crosses(e,t){return!!e.getEnvelopeInternal().intersects(t.getEnvelopeInternal())&&new RelateOp(e,t).getIntersectionMatrix().isCrosses(e.getDimension(),t.getDimension())}static contains(e,t){return!(2===t.getDimension()&&e.getDimension()<2)&&(!(1===t.getDimension()&&e.getDimension()<1&&t.getLength()>0)&&(!!e.getEnvelopeInternal().contains(t.getEnvelopeInternal())&&(e.isRectangle()?RectangleContains.contains(e,t):new RelateOp(e,t).getIntersectionMatrix().isContains())))}getIntersectionMatrix(){return this._relate.computeIM()}}class UnionOp{get interfaces_(){return[]}getClass(){return UnionOp}static union(e,t){if(e.isEmpty()||t.isEmpty()){if(e.isEmpty()&&t.isEmpty())return OverlayOp.createEmptyResult(OverlayOp.UNION,e,t,e.getFactory());if(e.isEmpty())return t.copy();if(t.isEmpty())return e.copy()}return e.checkNotGeometryCollection(e),e.checkNotGeometryCollection(t),SnapIfNeededOverlayOp.overlayOp(e,t,OverlayOp.UNION)}}class ConnectedInteriorTester{constructor(){ConnectedInteriorTester.constructor_.apply(this,arguments)}static constructor_(){this._geometryFactory=new GeometryFactory,this._geomGraph=null,this._disconnectedRingcoord=null;const e=arguments[0];this._geomGraph=e}static findDifferentPoint(e,t){for(let n=0;n<e.length;n++)if(!e[n].equals(t))return e[n];return null}visitInteriorRing(e,t){if(e.isEmpty())return null;const n=e.getCoordinates(),i=n[0],r=ConnectedInteriorTester.findDifferentPoint(n,i),o=t.findEdgeInSameDirection(i,r),a=t.findEdgeEnd(o);let s=null;a.getLabel().getLocation(0,Position.RIGHT)===Location.INTERIOR?s=a:a.getSym().getLabel().getLocation(0,Position.RIGHT)===Location.INTERIOR&&(s=a.getSym()),Assert.isTrue(null!==s,"unable to find dirEdge with Interior on RHS"),this.visitLinkedDirectedEdges(s)}visitShellInteriors(e,t){if(e instanceof Polygon){const n=e;this.visitInteriorRing(n.getExteriorRing(),t)}if(e instanceof MultiPolygon){const n=e;for(let e=0;e<n.getNumGeometries();e++){const i=n.getGeometryN(e);this.visitInteriorRing(i.getExteriorRing(),t)}}}getCoordinate(){return this._disconnectedRingcoord}setInteriorEdgesInResult(e){for(let t=e.getEdgeEnds().iterator();t.hasNext();){const e=t.next();e.getLabel().getLocation(0,Position.RIGHT)===Location.INTERIOR&&e.setInResult(!0)}}visitLinkedDirectedEdges(e){const t=e;let n=e;do{Assert.isTrue(null!==n,"found null Directed Edge"),n.setVisited(!0),n=n.getNext()}while(n!==t)}buildEdgeRings(e){const t=new ArrayList;for(let n=e.iterator();n.hasNext();){const e=n.next();if(e.isInResult()&&null===e.getEdgeRing()){const n=new MaximalEdgeRing(e,this._geometryFactory);n.linkDirectedEdgesForMinimalEdgeRings();const i=n.buildMinimalRings();t.addAll(i)}}return t}hasUnvisitedShellEdge(e){for(let t=0;t<e.size();t++){const n=e.get(t);if(n.isHole())continue;const i=n.getEdges();let r=i.get(0);if(r.getLabel().getLocation(0,Position.RIGHT)===Location.INTERIOR)for(let e=0;e<i.size();e++)if(r=i.get(e),!r.isVisited())return this._disconnectedRingcoord=r.getCoordinate(),!0}return!1}isInteriorsConnected(){const e=new ArrayList;this._geomGraph.computeSplitEdges(e);const t=new PlanarGraph(new OverlayNodeFactory);t.addEdges(e),this.setInteriorEdgesInResult(t),t.linkResultDirectedEdges();const n=this.buildEdgeRings(t.getEdgeEnds());return this.visitShellInteriors(this._geomGraph.getGeometry(),t),!this.hasUnvisitedShellEdge(n)}}class RelateNodeGraph{constructor(){RelateNodeGraph.constructor_.apply(this,arguments)}static constructor_(){this._nodes=new NodeMap(new RelateNodeFactory)}insertEdgeEnds(e){for(let t=e.iterator();t.hasNext();){const e=t.next();this._nodes.add(e)}}getNodeIterator(){return this._nodes.iterator()}copyNodesAndLabels(e,t){for(let n=e.getNodeIterator();n.hasNext();){const e=n.next();this._nodes.addNode(e.getCoordinate()).setLabel(t,e.getLabel().getLocation(t))}}build(e){this.computeIntersectionNodes(e,0),this.copyNodesAndLabels(e,0);const t=(new EdgeEndBuilder).computeEdgeEnds(e.getEdgeIterator());this.insertEdgeEnds(t)}computeIntersectionNodes(e,t){for(let n=e.getEdgeIterator();n.hasNext();){const e=n.next(),i=e.getLabel().getLocation(t);for(let n=e.getEdgeIntersectionList().iterator();n.hasNext();){const e=n.next(),r=this._nodes.addNode(e.coord);i===Location.BOUNDARY?r.setLabelBoundary(t):r.getLabel().isNull(t)&&r.setLabel(t,Location.INTERIOR)}}}}class ConsistentAreaTester{constructor(){ConsistentAreaTester.constructor_.apply(this,arguments)}static constructor_(){this._li=new RobustLineIntersector,this._geomGraph=null,this._nodeGraph=new RelateNodeGraph,this._invalidPoint=null;const e=arguments[0];this._geomGraph=e}isNodeEdgeAreaLabelsConsistent(){for(let e=this._nodeGraph.getNodeIterator();e.hasNext();){const t=e.next();if(!t.getEdges().isAreaLabelsConsistent(this._geomGraph))return this._invalidPoint=t.getCoordinate().copy(),!1}return!0}getInvalidPoint(){return this._invalidPoint}hasDuplicateRings(){for(let e=this._nodeGraph.getNodeIterator();e.hasNext();){for(let t=e.next().getEdges().iterator();t.hasNext();){const e=t.next();if(e.getEdgeEnds().size()>1)return this._invalidPoint=e.getEdge().getCoordinate(0),!0}}return!1}isNodeConsistentArea(){const e=this._geomGraph.computeSelfNodes(this._li,!0,!0);return e.hasProperIntersection()?(this._invalidPoint=e.getProperIntersectionPoint(),!1):(this._nodeGraph.build(this._geomGraph),this.isNodeEdgeAreaLabelsConsistent())}}class IndexedNestedRingTester{constructor(){IndexedNestedRingTester.constructor_.apply(this,arguments)}static constructor_(){this._graph=null,this._rings=new ArrayList,this._totalEnv=new Envelope,this._index=null,this._nestedPt=null;const e=arguments[0];this._graph=e}buildIndex(){this._index=new STRtree;for(let e=0;e<this._rings.size();e++){const t=this._rings.get(e),n=t.getEnvelopeInternal();this._index.insert(n,t)}}getNestedPoint(){return this._nestedPt}isNonNested(){this.buildIndex();for(let e=0;e<this._rings.size();e++){const t=this._rings.get(e),n=t.getCoordinates(),i=this._index.query(t.getEnvelopeInternal());for(let e=0;e<i.size();e++){const r=i.get(e),o=r.getCoordinates();if(t===r)continue;if(!t.getEnvelopeInternal().intersects(r.getEnvelopeInternal()))continue;const a=IsValidOp.findPtNotNode(n,r,this._graph);if(null===a)continue;if(PointLocation.isInRing(a,o))return this._nestedPt=a,!1}}return!0}add(e){this._rings.add(e),this._totalEnv.expandToInclude(e.getEnvelopeInternal())}}class TopologyValidationError{constructor(){TopologyValidationError.constructor_.apply(this,arguments)}static constructor_(){if(this._errorType=null,this._pt=null,1===arguments.length){const e=arguments[0];TopologyValidationError.constructor_.call(this,e,null)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this._errorType=e,null!==t&&(this._pt=t.copy())}}getErrorType(){return this._errorType}getMessage(){return TopologyValidationError.errMsg[this._errorType]}getCoordinate(){return this._pt}toString(){let e="";return null!==this._pt&&(e=" at or near point "+this._pt),this.getMessage()+e}}TopologyValidationError.ERROR=0,TopologyValidationError.REPEATED_POINT=1,TopologyValidationError.HOLE_OUTSIDE_SHELL=2,TopologyValidationError.NESTED_HOLES=3,TopologyValidationError.DISCONNECTED_INTERIOR=4,TopologyValidationError.SELF_INTERSECTION=5,TopologyValidationError.RING_SELF_INTERSECTION=6,TopologyValidationError.NESTED_SHELLS=7,TopologyValidationError.DUPLICATE_RINGS=8,TopologyValidationError.TOO_FEW_POINTS=9,TopologyValidationError.INVALID_COORDINATE=10,TopologyValidationError.RING_NOT_CLOSED=11,TopologyValidationError.errMsg=["Topology Validation Error","Repeated Point","Hole lies outside shell","Holes are nested","Interior is disconnected","Self-intersection","Ring Self-intersection","Nested shells","Duplicate Rings","Too few distinct points in geometry component","Invalid Coordinate","Ring is not closed"];class IsValidOp{constructor(){IsValidOp.constructor_.apply(this,arguments)}static constructor_(){this._parentGeometry=null,this._isSelfTouchingRingFormingHoleValid=!1,this._validErr=null;const e=arguments[0];this._parentGeometry=e}static findPtNotNode(e,t,n){const i=n.findEdge(t).getEdgeIntersectionList();for(let t=0;t<e.length;t++){const n=e[t];if(!i.isIntersection(n))return n}return null}static isValid(){if(arguments[0]instanceof Geometry){return new IsValidOp(arguments[0]).isValid()}if(arguments[0]instanceof Coordinate){const e=arguments[0];return!p.isNaN(e.x)&&(!p.isInfinite(e.x)&&(!p.isNaN(e.y)&&!p.isInfinite(e.y)))}}checkInvalidCoordinates(){if(arguments[0]instanceof Array){const e=arguments[0];for(let t=0;t<e.length;t++)if(!IsValidOp.isValid(e[t]))return this._validErr=new TopologyValidationError(TopologyValidationError.INVALID_COORDINATE,e[t]),null}else if(arguments[0]instanceof Polygon){const e=arguments[0];if(this.checkInvalidCoordinates(e.getExteriorRing().getCoordinates()),null!==this._validErr)return null;for(let t=0;t<e.getNumInteriorRing();t++)if(this.checkInvalidCoordinates(e.getInteriorRingN(t).getCoordinates()),null!==this._validErr)return null}}checkHolesNotNested(e,t){if(e.getNumInteriorRing()<=0)return null;const n=new IndexedNestedRingTester(t);for(let t=0;t<e.getNumInteriorRing();t++){const i=e.getInteriorRingN(t);i.isEmpty()||n.add(i)}n.isNonNested()||(this._validErr=new TopologyValidationError(TopologyValidationError.NESTED_HOLES,n.getNestedPoint()))}checkConsistentArea(e){const t=new ConsistentAreaTester(e);if(!t.isNodeConsistentArea())return this._validErr=new TopologyValidationError(TopologyValidationError.SELF_INTERSECTION,t.getInvalidPoint()),null;t.hasDuplicateRings()&&(this._validErr=new TopologyValidationError(TopologyValidationError.DUPLICATE_RINGS,t.getInvalidPoint()))}isValid(){return this.checkValid(this._parentGeometry),null===this._validErr}checkShellInsideHole(e,t,n){const i=e.getCoordinates(),r=t.getCoordinates(),o=IsValidOp.findPtNotNode(i,t,n);if(null!==o){if(!PointLocation.isInRing(o,r))return o}const a=IsValidOp.findPtNotNode(r,e,n);if(null!==a){return PointLocation.isInRing(a,i)?a:null}return Assert.shouldNeverReachHere("points in shell and hole appear to be equal"),null}checkNoSelfIntersectingRings(e){for(let t=e.getEdgeIterator();t.hasNext();){const e=t.next();if(this.checkNoSelfIntersectingRing(e.getEdgeIntersectionList()),null!==this._validErr)return null}}checkConnectedInteriors(e){const t=new ConnectedInteriorTester(e);t.isInteriorsConnected()||(this._validErr=new TopologyValidationError(TopologyValidationError.DISCONNECTED_INTERIOR,t.getCoordinate()))}checkNoSelfIntersectingRing(e){const t=new TreeSet;let n=!0;for(let i=e.iterator();i.hasNext();){const e=i.next();if(n)n=!1;else{if(t.contains(e.coord))return this._validErr=new TopologyValidationError(TopologyValidationError.RING_SELF_INTERSECTION,e.coord),null;t.add(e.coord)}}}checkHolesInShell(e,t){if(e.getNumInteriorRing()<=0)return null;const n=e.getExteriorRing(),i=n.isEmpty(),r=new IndexedPointInAreaLocator(n);for(let o=0;o<e.getNumInteriorRing();o++){const a=e.getInteriorRingN(o);let s=null;if(a.isEmpty())continue;if(s=IsValidOp.findPtNotNode(a.getCoordinates(),n,t),null===s)return null;if(i||Location.EXTERIOR===r.locate(s))return this._validErr=new TopologyValidationError(TopologyValidationError.HOLE_OUTSIDE_SHELL,s),null}}checkTooFewPoints(e){if(e.hasTooFewPoints())return this._validErr=new TopologyValidationError(TopologyValidationError.TOO_FEW_POINTS,e.getInvalidPoint()),null}getValidationError(){return this.checkValid(this._parentGeometry),this._validErr}checkValid(){if(arguments[0]instanceof Point){const e=arguments[0];this.checkInvalidCoordinates(e.getCoordinates())}else if(arguments[0]instanceof MultiPoint){const e=arguments[0];this.checkInvalidCoordinates(e.getCoordinates())}else if(arguments[0]instanceof LinearRing){const e=arguments[0];if(this.checkInvalidCoordinates(e.getCoordinates()),null!==this._validErr)return null;if(this.checkClosedRing(e),null!==this._validErr)return null;const t=new GeometryGraph(0,e);if(this.checkTooFewPoints(t),null!==this._validErr)return null;const n=new RobustLineIntersector;t.computeSelfNodes(n,!0,!0),this.checkNoSelfIntersectingRings(t)}else if(arguments[0]instanceof LineString){const e=arguments[0];if(this.checkInvalidCoordinates(e.getCoordinates()),null!==this._validErr)return null;const t=new GeometryGraph(0,e);this.checkTooFewPoints(t)}else if(arguments[0]instanceof Polygon){const e=arguments[0];if(this.checkInvalidCoordinates(e),null!==this._validErr)return null;if(this.checkClosedRings(e),null!==this._validErr)return null;const t=new GeometryGraph(0,e);if(this.checkTooFewPoints(t),null!==this._validErr)return null;if(this.checkConsistentArea(t),null!==this._validErr)return null;if(!this._isSelfTouchingRingFormingHoleValid&&(this.checkNoSelfIntersectingRings(t),null!==this._validErr))return null;if(this.checkHolesInShell(e,t),null!==this._validErr)return null;if(this.checkHolesNotNested(e,t),null!==this._validErr)return null;this.checkConnectedInteriors(t)}else if(arguments[0]instanceof MultiPolygon){const e=arguments[0];for(let t=0;t<e.getNumGeometries();t++){const n=e.getGeometryN(t);if(this.checkInvalidCoordinates(n),null!==this._validErr)return null;if(this.checkClosedRings(n),null!==this._validErr)return null}const t=new GeometryGraph(0,e);if(this.checkTooFewPoints(t),null!==this._validErr)return null;if(this.checkConsistentArea(t),null!==this._validErr)return null;if(!this._isSelfTouchingRingFormingHoleValid&&(this.checkNoSelfIntersectingRings(t),null!==this._validErr))return null;for(let n=0;n<e.getNumGeometries();n++){const i=e.getGeometryN(n);if(this.checkHolesInShell(i,t),null!==this._validErr)return null}for(let n=0;n<e.getNumGeometries();n++){const i=e.getGeometryN(n);if(this.checkHolesNotNested(i,t),null!==this._validErr)return null}if(this.checkShellsNotNested(e,t),null!==this._validErr)return null;this.checkConnectedInteriors(t)}else if(arguments[0]instanceof GeometryCollection){const e=arguments[0];for(let t=0;t<e.getNumGeometries();t++){const n=e.getGeometryN(t);if(this.checkValid(n),null!==this._validErr)return null}}else if(arguments[0]instanceof Geometry){const e=arguments[0];if(this._validErr=null,e.isEmpty())return null;if(e instanceof Point)this.checkValid(e);else if(e instanceof MultiPoint)this.checkValid(e);else if(e instanceof LinearRing)this.checkValid(e);else if(e instanceof LineString)this.checkValid(e);else if(e instanceof Polygon)this.checkValid(e);else if(e instanceof MultiPolygon)this.checkValid(e);else{if(!(e instanceof GeometryCollection))throw new UnsupportedOperationException(e.getGeometryType());this.checkValid(e)}}}setSelfTouchingRingFormingHoleValid(e){this._isSelfTouchingRingFormingHoleValid=e}checkShellNotNested(e,t,n){const i=e.getCoordinates(),r=t.getExteriorRing();if(r.isEmpty())return null;const o=r.getCoordinates(),a=IsValidOp.findPtNotNode(i,r,n);if(null===a)return null;if(!PointLocation.isInRing(a,o))return null;if(t.getNumInteriorRing()<=0)return this._validErr=new TopologyValidationError(TopologyValidationError.NESTED_SHELLS,a),null;let s=null;for(let i=0;i<t.getNumInteriorRing();i++){const r=t.getInteriorRingN(i);if(s=this.checkShellInsideHole(e,r,n),null===s)return null}this._validErr=new TopologyValidationError(TopologyValidationError.NESTED_SHELLS,s)}checkClosedRings(e){if(this.checkClosedRing(e.getExteriorRing()),null!==this._validErr)return null;for(let t=0;t<e.getNumInteriorRing();t++)if(this.checkClosedRing(e.getInteriorRingN(t)),null!==this._validErr)return null}checkClosedRing(e){if(e.isEmpty())return null;if(!e.isClosed()){let t=null;e.getNumPoints()>=1&&(t=e.getCoordinateN(0)),this._validErr=new TopologyValidationError(TopologyValidationError.RING_NOT_CLOSED,t)}}checkShellsNotNested(e,t){for(let n=0;n<e.getNumGeometries();n++){const i=e.getGeometryN(n).getExteriorRing();for(let r=0;r<e.getNumGeometries();r++){if(n===r)continue;const o=e.getGeometryN(r);if(this.checkShellNotNested(i,o,t),null!==this._validErr)return null}}}}class NodeBase{constructor(){NodeBase.constructor_.apply(this,arguments)}static constructor_(){this._items=new ArrayList,this._subnode=new Array(4).fill(null)}static getSubnodeIndex(e,t,n){let i=-1;return e.getMinX()>=t&&(e.getMinY()>=n&&(i=3),e.getMaxY()<=n&&(i=1)),e.getMaxX()<=t&&(e.getMinY()>=n&&(i=2),e.getMaxY()<=n&&(i=0)),i}hasChildren(){for(let e=0;e<4;e++)if(null!==this._subnode[e])return!0;return!1}isPrunable(){return!(this.hasChildren()||this.hasItems())}addAllItems(e){e.addAll(this._items);for(let t=0;t<4;t++)null!==this._subnode[t]&&this._subnode[t].addAllItems(e);return e}getNodeCount(){let e=0;for(let t=0;t<4;t++)null!==this._subnode[t]&&(e+=this._subnode[t].size());return e+1}size(){let e=0;for(let t=0;t<4;t++)null!==this._subnode[t]&&(e+=this._subnode[t].size());return e+this._items.size()}addAllItemsFromOverlapping(e,t){if(!this.isSearchMatch(e))return null;t.addAll(this._items);for(let n=0;n<4;n++)null!==this._subnode[n]&&this._subnode[n].addAllItemsFromOverlapping(e,t)}visitItems(e,t){for(let e=this._items.iterator();e.hasNext();)t.visitItem(e.next())}hasItems(){return!this._items.isEmpty()}remove(e,t){if(!this.isSearchMatch(e))return!1;let n=!1;for(let i=0;i<4;i++)if(null!==this._subnode[i]&&(n=this._subnode[i].remove(e,t),n)){this._subnode[i].isPrunable()&&(this._subnode[i]=null);break}return n||(n=this._items.remove(t),n)}visit(e,t){if(!this.isSearchMatch(e))return null;this.visitItems(e,t);for(let n=0;n<4;n++)null!==this._subnode[n]&&this._subnode[n].visit(e,t)}getItems(){return this._items}depth(){let e=0;for(let t=0;t<4;t++)if(null!==this._subnode[t]){const n=this._subnode[t].depth();n>e&&(e=n)}return e+1}isEmpty(){let e=!0;if(this._items.isEmpty()){for(let t=0;t<4;t++)if(null!==this._subnode[t]&&!this._subnode[t].isEmpty()){e=!1;break}}else e=!1;return e}add(e){this._items.add(e)}get interfaces_(){return[m]}}function te(){}te.exponent=function(e){return function(e,t){let n,i,r,o;const a={32:{d:127,c:128,b:0,a:0},64:{d:32752,c:0,b:0,a:0}},s={32:8,64:11}[e];o||(n=t<0||1/t<0,isFinite(t)||(o=a[e],n&&(o.d+=1<<e/4-1),i=Math.pow(2,s)-1,r=0));if(!o){for(i={32:127,64:1023}[e],r=Math.abs(t);r>=2;)i++,r/=2;for(;r<1&&i>0;)i--,r*=2;i<=0&&(r/=2)}return i}(64,e)-1023},te.powerOf2=function(e){return Math.pow(2,e)};class Key{constructor(){Key.constructor_.apply(this,arguments)}static constructor_(){this._pt=new Coordinate,this._level=0,this._env=null;const e=arguments[0];this.computeKey(e)}static computeQuadLevel(e){const t=e.getWidth(),n=e.getHeight(),i=t>n?t:n;return te.exponent(i)+1}getLevel(){return this._level}computeKey(){if(1===arguments.length){const e=arguments[0];for(this._level=Key.computeQuadLevel(e),this._env=new Envelope,this.computeKey(this._level,e);!this._env.contains(e);)this._level+=1,this.computeKey(this._level,e)}else if(2===arguments.length){const e=arguments[0],t=arguments[1],n=te.powerOf2(e);this._pt.x=Math.floor(t.getMinX()/n)*n,this._pt.y=Math.floor(t.getMinY()/n)*n,this._env.init(this._pt.x,this._pt.x+n,this._pt.y,this._pt.y+n)}}getEnvelope(){return this._env}getCentre(){return new Coordinate((this._env.getMinX()+this._env.getMaxX())/2,(this._env.getMinY()+this._env.getMaxY())/2)}getPoint(){return this._pt}}class Node extends NodeBase{constructor(){super(),Node.constructor_.apply(this,arguments)}static constructor_(){this._env=null,this._centrex=null,this._centrey=null,this._level=null;const e=arguments[0],t=arguments[1];this._env=e,this._level=t,this._centrex=(e.getMinX()+e.getMaxX())/2,this._centrey=(e.getMinY()+e.getMaxY())/2}static createNode(e){const t=new Key(e);return new Node(t.getEnvelope(),t.getLevel())}static createExpanded(e,t){const n=new Envelope(t);null!==e&&n.expandToInclude(e._env);const i=Node.createNode(n);return null!==e&&i.insertNode(e),i}find(e){const t=NodeBase.getSubnodeIndex(e,this._centrex,this._centrey);if(-1===t)return this;if(null!==this._subnode[t]){return this._subnode[t].find(e)}return this}isSearchMatch(e){return null!==e&&this._env.intersects(e)}getSubnode(e){return null===this._subnode[e]&&(this._subnode[e]=this.createSubnode(e)),this._subnode[e]}getEnvelope(){return this._env}getNode(e){const t=NodeBase.getSubnodeIndex(e,this._centrex,this._centrey);if(-1!==t){return this.getSubnode(t).getNode(e)}return this}createSubnode(e){let t=0,n=0,i=0,r=0;switch(e){case 0:t=this._env.getMinX(),n=this._centrex,i=this._env.getMinY(),r=this._centrey;break;case 1:t=this._centrex,n=this._env.getMaxX(),i=this._env.getMinY(),r=this._centrey;break;case 2:t=this._env.getMinX(),n=this._centrex,i=this._centrey,r=this._env.getMaxY();break;case 3:t=this._centrex,n=this._env.getMaxX(),i=this._centrey,r=this._env.getMaxY()}const o=new Envelope(t,n,i,r);return new Node(o,this._level-1)}insertNode(e){Assert.isTrue(null===this._env||this._env.contains(e._env));const t=NodeBase.getSubnodeIndex(e._env,this._centrex,this._centrey);if(e._level===this._level-1)this._subnode[t]=e;else{const n=this.createSubnode(t);n.insertNode(e),this._subnode[t]=n}}}class IntervalSize{static isZeroWidth(e,t){const n=t-e;if(0===n)return!0;const i=n/Math.max(Math.abs(e),Math.abs(t));return te.exponent(i)<=IntervalSize.MIN_BINARY_EXPONENT}}IntervalSize.MIN_BINARY_EXPONENT=-50;class Root extends NodeBase{constructor(){super()}insert(e,t){const n=NodeBase.getSubnodeIndex(e,Root.origin.x,Root.origin.y);if(-1===n)return this.add(t),null;const i=this._subnode[n];if(null===i||!i.getEnvelope().contains(e)){const t=Node.createExpanded(i,e);this._subnode[n]=t}this.insertContained(this._subnode[n],e,t)}isSearchMatch(e){return!0}insertContained(e,t,n){Assert.isTrue(e.getEnvelope().contains(t));const i=IntervalSize.isZeroWidth(t.getMinX(),t.getMaxX()),r=IntervalSize.isZeroWidth(t.getMinY(),t.getMaxY());let o=null;o=i||r?e.find(t):e.getNode(t),o.add(n)}}Root.origin=new Coordinate(0,0);class Quadtree{constructor(){Quadtree.constructor_.apply(this,arguments)}static constructor_(){this._root=null,this._minExtent=1,this._root=new Root}static ensureExtent(e,t){let n=e.getMinX(),i=e.getMaxX(),r=e.getMinY(),o=e.getMaxY();return n!==i&&r!==o?e:(n===i&&(n-=t/2,i+=t/2),r===o&&(r-=t/2,o+=t/2),new Envelope(n,i,r,o))}size(){return null!==this._root?this._root.size():0}insert(e,t){this.collectStats(e);const n=Quadtree.ensureExtent(e,this._minExtent);this._root.insert(n,t)}query(){if(1===arguments.length){const e=arguments[0],t=new ArrayListVisitor;return this.query(e,t),t.getItems()}if(2===arguments.length){const e=arguments[0],t=arguments[1];this._root.visit(e,t)}}queryAll(){const e=new ArrayList;return this._root.addAllItems(e),e}remove(e,t){const n=Quadtree.ensureExtent(e,this._minExtent);return this._root.remove(n,t)}collectStats(e){const t=e.getWidth();t<this._minExtent&&t>0&&(this._minExtent=t);const n=e.getHeight();n<this._minExtent&&n>0&&(this._minExtent=n)}depth(){return null!==this._root?this._root.depth():0}isEmpty(){return null===this._root||this._root.isEmpty()}get interfaces_(){return[SpatialIndex,m]}}class TaggedLineSegment extends LineSegment{constructor(){super(),TaggedLineSegment.constructor_.apply(this,arguments)}static constructor_(){if(this._parent=null,this._index=null,2===arguments.length){const e=arguments[0],t=arguments[1];TaggedLineSegment.constructor_.call(this,e,t,null,-1)}else if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];LineSegment.constructor_.call(this,e,t),this._parent=n,this._index=i}}getIndex(){return this._index}getParent(){return this._parent}}class TaggedLineString{constructor(){TaggedLineString.constructor_.apply(this,arguments)}static constructor_(){if(this._parentLine=null,this._segs=null,this._resultSegs=new ArrayList,this._minimumSize=null,1===arguments.length){const e=arguments[0];TaggedLineString.constructor_.call(this,e,2)}else if(2===arguments.length){const e=arguments[0],t=arguments[1];this._parentLine=e,this._minimumSize=t,this.init()}}static extractCoordinates(e){const t=new Array(e.size()+1).fill(null);let n=null;for(let i=0;i<e.size();i++)n=e.get(i),t[i]=n.p0;return t[t.length-1]=n.p1,t}addToResult(e){this._resultSegs.add(e)}asLineString(){return this._parentLine.getFactory().createLineString(TaggedLineString.extractCoordinates(this._resultSegs))}getResultSize(){const e=this._resultSegs.size();return 0===e?0:e+1}getParent(){return this._parentLine}getSegment(e){return this._segs[e]}getParentCoordinates(){return this._parentLine.getCoordinates()}getMinimumSize(){return this._minimumSize}asLinearRing(){return this._parentLine.getFactory().createLinearRing(TaggedLineString.extractCoordinates(this._resultSegs))}getSegments(){return this._segs}init(){const e=this._parentLine.getCoordinates();this._segs=new Array(e.length-1).fill(null);for(let t=0;t<e.length-1;t++){const n=new TaggedLineSegment(e[t],e[t+1],this._parentLine,t);this._segs[t]=n}}getResultCoordinates(){return TaggedLineString.extractCoordinates(this._resultSegs)}}class LineSegmentIndex{constructor(){LineSegmentIndex.constructor_.apply(this,arguments)}static constructor_(){this._index=new Quadtree}remove(e){this._index.remove(new Envelope(e.p0,e.p1),e)}add(){if(arguments[0]instanceof TaggedLineString){const e=arguments[0].getSegments();for(let t=0;t<e.length;t++){const n=e[t];this.add(n)}}else if(arguments[0]instanceof LineSegment){const e=arguments[0];this._index.insert(new Envelope(e.p0,e.p1),e)}}query(e){const t=new Envelope(e.p0,e.p1),n=new LineSegmentVisitor(e);this._index.query(t,n);return n.getItems()}}class LineSegmentVisitor{constructor(){LineSegmentVisitor.constructor_.apply(this,arguments)}static constructor_(){this._querySeg=null,this._items=new ArrayList;const e=arguments[0];this._querySeg=e}visitItem(e){const t=e;Envelope.intersects(t.p0,t.p1,this._querySeg.p0,this._querySeg.p1)&&this._items.add(e)}getItems(){return this._items}get interfaces_(){return[ItemVisitor]}}class TaggedLineStringSimplifier{constructor(){TaggedLineStringSimplifier.constructor_.apply(this,arguments)}static constructor_(){this._li=new RobustLineIntersector,this._inputIndex=new LineSegmentIndex,this._outputIndex=new LineSegmentIndex,this._line=null,this._linePts=null,this._distanceTolerance=0;const e=arguments[0],t=arguments[1];this._inputIndex=e,this._outputIndex=t}static isInLineSection(e,t,n){if(n.getParent()!==e.getParent())return!1;const i=n.getIndex();return i>=t[0]&&i<t[1]}flatten(e,t){const n=this._linePts[e],i=this._linePts[t],r=new LineSegment(n,i);return this.remove(this._line,e,t),this._outputIndex.add(r),r}hasBadIntersection(e,t,n){return!!this.hasBadOutputIntersection(n)||!!this.hasBadInputIntersection(e,t,n)}setDistanceTolerance(e){this._distanceTolerance=e}simplifySection(e,t,n){n+=1;const i=new Array(2).fill(null);if(e+1===t){const t=this._line.getSegment(e);return this._line.addToResult(t),null}let r=!0;if(this._line.getResultSize()<this._line.getMinimumSize()){n+1<this._line.getMinimumSize()&&(r=!1)}const o=new Array(1).fill(null),a=this.findFurthestPoint(this._linePts,e,t,o);o[0]>this._distanceTolerance&&(r=!1);const s=new LineSegment;if(s.p0=this._linePts[e],s.p1=this._linePts[t],i[0]=e,i[1]=t,this.hasBadIntersection(this._line,i,s)&&(r=!1),r){const n=this.flatten(e,t);return this._line.addToResult(n),null}this.simplifySection(e,a,n),this.simplifySection(a,t,n)}hasBadOutputIntersection(e){for(let t=this._outputIndex.query(e).iterator();t.hasNext();){const n=t.next();if(this.hasInteriorIntersection(n,e))return!0}return!1}findFurthestPoint(e,t,n,i){const r=new LineSegment;r.p0=e[t],r.p1=e[n];let o=-1,a=t;for(let i=t+1;i<n;i++){const t=e[i],n=r.distance(t);n>o&&(o=n,a=i)}return i[0]=o,a}simplify(e){this._line=e,this._linePts=e.getParentCoordinates(),this.simplifySection(0,this._linePts.length-1,0)}remove(e,t,n){for(let i=t;i<n;i++){const t=e.getSegment(i);this._inputIndex.remove(t)}}hasInteriorIntersection(e,t){return this._li.computeIntersection(e.p0,e.p1,t.p0,t.p1),this._li.isInteriorIntersection()}hasBadInputIntersection(e,t,n){for(let i=this._inputIndex.query(n).iterator();i.hasNext();){const r=i.next();if(this.hasInteriorIntersection(r,n)){if(TaggedLineStringSimplifier.isInLineSection(e,t,r))continue;return!0}}return!1}}class TaggedLinesSimplifier{constructor(){TaggedLinesSimplifier.constructor_.apply(this,arguments)}static constructor_(){this._inputIndex=new LineSegmentIndex,this._outputIndex=new LineSegmentIndex,this._distanceTolerance=0}setDistanceTolerance(e){this._distanceTolerance=e}simplify(e){for(let t=e.iterator();t.hasNext();)this._inputIndex.add(t.next());for(let t=e.iterator();t.hasNext();){const e=new TaggedLineStringSimplifier(this._inputIndex,this._outputIndex);e.setDistanceTolerance(this._distanceTolerance),e.simplify(t.next())}}}class TopologyPreservingSimplifier{constructor(){TopologyPreservingSimplifier.constructor_.apply(this,arguments)}static constructor_(){this._inputGeom=null,this._lineSimplifier=new TaggedLinesSimplifier,this._linestringMap=null;const e=arguments[0];this._inputGeom=e}static simplify(e,t){const n=new TopologyPreservingSimplifier(e);return n.setDistanceTolerance(t),n.getResultGeometry()}getResultGeometry(){if(this._inputGeom.isEmpty())return this._inputGeom.copy();this._linestringMap=new HashMap,this._inputGeom.apply(new LineStringMapBuilderFilter(this)),this._lineSimplifier.simplify(this._linestringMap.values());return new LineStringTransformer(this._linestringMap).transform(this._inputGeom)}setDistanceTolerance(e){if(e<0)throw new IllegalArgumentException("Tolerance must be non-negative");this._lineSimplifier.setDistanceTolerance(e)}}class LineStringTransformer extends GeometryTransformer{constructor(){super(),LineStringTransformer.constructor_.apply(this,arguments)}static constructor_(){this._linestringMap=null;const e=arguments[0];this._linestringMap=e}transformCoordinates(e,t){if(0===e.size())return null;if(t instanceof LineString){const e=this._linestringMap.get(t);return this.createCoordinateSequence(e.getResultCoordinates())}return super.transformCoordinates.call(this,e,t)}}class LineStringMapBuilderFilter{constructor(){LineStringMapBuilderFilter.constructor_.apply(this,arguments)}static constructor_(){this.tps=null;const e=arguments[0];this.tps=e}filter(e){if(e instanceof LineString){const t=e;if(t.isEmpty())return null;const n=t.isClosed()?4:2,i=new TaggedLineString(t,n);this.tps._linestringMap.put(t,i)}}get interfaces_(){return[GeometryComponentFilter]}}TopologyPreservingSimplifier.LineStringTransformer=LineStringTransformer,TopologyPreservingSimplifier.LineStringMapBuilderFilter=LineStringMapBuilderFilter;class NoninvertibleTransformationException extends Exception{constructor(){super(),NoninvertibleTransformationException.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)Exception.constructor_.call(this);else if(1===arguments.length){const e=arguments[0];Exception.constructor_.call(this,e)}}}class AffineTransformation{constructor(){AffineTransformation.constructor_.apply(this,arguments)}static constructor_(){if(this._m00=null,this._m01=null,this._m02=null,this._m10=null,this._m11=null,this._m12=null,0===arguments.length)this.setToIdentity();else if(1===arguments.length){if(arguments[0]instanceof Array){const e=arguments[0];this._m00=e[0],this._m01=e[1],this._m02=e[2],this._m10=e[3],this._m11=e[4],this._m12=e[5]}else if(arguments[0]instanceof AffineTransformation){const e=arguments[0];this.setTransformation(e)}}else if(6===arguments.length&&"number"==typeof arguments[5]&&"number"==typeof arguments[4]&&"number"==typeof arguments[3]&&"number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=arguments[4],o=arguments[5];this.setTransformation(e,t,n,i,r,o)}}static translationInstance(e,t){const n=new AffineTransformation;return n.setToTranslation(e,t),n}static shearInstance(e,t){const n=new AffineTransformation;return n.setToShear(e,t),n}static reflectionInstance(){if(2===arguments.length){const e=arguments[0],t=arguments[1],n=new AffineTransformation;return n.setToReflection(e,t),n}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=new AffineTransformation;return r.setToReflection(e,t,n,i),r}}static rotationInstance(){if(1===arguments.length){const e=arguments[0];return AffineTransformation.rotationInstance(Math.sin(e),Math.cos(e))}if(2===arguments.length){const e=arguments[0],t=arguments[1],n=new AffineTransformation;return n.setToRotation(e,t),n}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];return AffineTransformation.rotationInstance(Math.sin(e),Math.cos(e),t,n)}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=new AffineTransformation;return r.setToRotation(e,t,n,i),r}}static scaleInstance(){if(2===arguments.length){const e=arguments[0],t=arguments[1],n=new AffineTransformation;return n.setToScale(e,t),n}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=new AffineTransformation;return r.translate(-n,-i),r.scale(e,t),r.translate(n,i),r}}setToReflectionBasic(e,t,n,i){if(e===n&&t===i)throw new IllegalArgumentException("Reflection line points must be distinct");const r=n-e,o=i-t,a=Math.sqrt(r*r+o*o),s=o/a,l=r/a,c=2*s*l,h=l*l-s*s;return this._m00=h,this._m01=c,this._m02=0,this._m10=c,this._m11=-h,this._m12=0,this}getInverse(){const e=this.getDeterminant();if(0===e)throw new NoninvertibleTransformationException("Transformation is non-invertible");const t=this._m11/e,n=-this._m10/e,i=-this._m01/e,r=this._m00/e,o=(this._m01*this._m12-this._m02*this._m11)/e,a=(-this._m00*this._m12+this._m10*this._m02)/e;return new AffineTransformation(t,i,o,n,r,a)}compose(e){const t=e._m00*this._m00+e._m01*this._m10,n=e._m00*this._m01+e._m01*this._m11,i=e._m00*this._m02+e._m01*this._m12+e._m02,r=e._m10*this._m00+e._m11*this._m10,o=e._m10*this._m01+e._m11*this._m11,a=e._m10*this._m02+e._m11*this._m12+e._m12;return this._m00=t,this._m01=n,this._m02=i,this._m10=r,this._m11=o,this._m12=a,this}equals(e){if(null===e)return!1;if(!(e instanceof AffineTransformation))return!1;const t=e;return this._m00===t._m00&&this._m01===t._m01&&this._m02===t._m02&&this._m10===t._m10&&this._m11===t._m11&&this._m12===t._m12}setToScale(e,t){return this._m00=e,this._m01=0,this._m02=0,this._m10=0,this._m11=t,this._m12=0,this}isIdentity(){return 1===this._m00&&0===this._m01&&0===this._m02&&0===this._m10&&1===this._m11&&0===this._m12}scale(e,t){return this.compose(AffineTransformation.scaleInstance(e,t)),this}setToIdentity(){return this._m00=1,this._m01=0,this._m02=0,this._m10=0,this._m11=1,this._m12=0,this}isGeometryChanged(){return!0}setTransformation(){if(1===arguments.length){const e=arguments[0];return this._m00=e._m00,this._m01=e._m01,this._m02=e._m02,this._m10=e._m10,this._m11=e._m11,this._m12=e._m12,this}if(6===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3],r=arguments[4],o=arguments[5];return this._m00=e,this._m01=t,this._m02=n,this._m10=i,this._m11=r,this._m12=o,this}}setToRotation(){if(1===arguments.length){const e=arguments[0];return this.setToRotation(Math.sin(e),Math.cos(e)),this}if(2===arguments.length){const e=arguments[0],t=arguments[1];return this._m00=t,this._m01=-e,this._m02=0,this._m10=e,this._m11=t,this._m12=0,this}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];return this.setToRotation(Math.sin(e),Math.cos(e),t,n),this}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];return this._m00=t,this._m01=-e,this._m02=n-n*t+i*e,this._m10=e,this._m11=t,this._m12=i-n*e-i*t,this}}getMatrixEntries(){return[this._m00,this._m01,this._m02,this._m10,this._m11,this._m12]}filter(e,t){this.transform(e,t)}rotate(){if(1===arguments.length){const e=arguments[0];return this.compose(AffineTransformation.rotationInstance(e)),this}if(2===arguments.length){const e=arguments[0],t=arguments[1];return this.compose(AffineTransformation.rotationInstance(e,t)),this}if(3===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2];return this.compose(AffineTransformation.rotationInstance(e,t,n)),this}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];return this.compose(AffineTransformation.rotationInstance(e,t,n,i)),this}}getDeterminant(){return this._m00*this._m11-this._m01*this._m10}composeBefore(e){const t=this._m00*e._m00+this._m01*e._m10,n=this._m00*e._m01+this._m01*e._m11,i=this._m00*e._m02+this._m01*e._m12+this._m02,r=this._m10*e._m00+this._m11*e._m10,o=this._m10*e._m01+this._m11*e._m11,a=this._m10*e._m02+this._m11*e._m12+this._m12;return this._m00=t,this._m01=n,this._m02=i,this._m10=r,this._m11=o,this._m12=a,this}setToShear(e,t){return this._m00=1,this._m01=e,this._m02=0,this._m10=t,this._m11=1,this._m12=0,this}isDone(){return!1}clone(){try{return null}catch(e){if(!(e instanceof Exception))throw e;Assert.shouldNeverReachHere()}return null}translate(e,t){return this.compose(AffineTransformation.translationInstance(e,t)),this}setToReflection(){if(2===arguments.length){const e=arguments[0],t=arguments[1];if(0===e&&0===t)throw new IllegalArgumentException("Reflection vector must be non-zero");if(e===t)return this._m00=0,this._m01=1,this._m02=0,this._m10=1,this._m11=0,this._m12=0,this;const n=Math.sqrt(e*e+t*t),i=t/n,r=e/n;return this.rotate(-i,r),this.scale(1,-1),this.rotate(i,r),this}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];if(e===n&&t===i)throw new IllegalArgumentException("Reflection line points must be distinct");this.setToTranslation(-e,-t);const r=n-e,o=i-t,a=Math.sqrt(r*r+o*o),s=o/a,l=r/a;return this.rotate(-s,l),this.scale(1,-1),this.rotate(s,l),this.translate(e,t),this}}toString(){return"AffineTransformation[["+this._m00+", "+this._m01+", "+this._m02+"], ["+this._m10+", "+this._m11+", "+this._m12+"]]"}setToTranslation(e,t){return this._m00=1,this._m01=0,this._m02=e,this._m10=0,this._m11=1,this._m12=t,this}shear(e,t){return this.compose(AffineTransformation.shearInstance(e,t)),this}transform(){if(1===arguments.length){const e=arguments[0].copy();return e.apply(this),e}if(2===arguments.length){if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){const e=arguments[0],t=arguments[1],n=this._m00*e.x+this._m01*e.y+this._m02,i=this._m10*e.x+this._m11*e.y+this._m12;return t.x=n,t.y=i,t}if(b(arguments[0],CoordinateSequence)&&Number.isInteger(arguments[1])){const e=arguments[0],t=arguments[1],n=this._m00*e.getOrdinate(t,0)+this._m01*e.getOrdinate(t,1)+this._m02,i=this._m10*e.getOrdinate(t,0)+this._m11*e.getOrdinate(t,1)+this._m12;e.setOrdinate(t,0,n),e.setOrdinate(t,1,i)}}}reflect(){if(2===arguments.length){const e=arguments[0],t=arguments[1];return this.compose(AffineTransformation.reflectionInstance(e,t)),this}if(4===arguments.length){const e=arguments[0],t=arguments[1],n=arguments[2],i=arguments[3];return this.compose(AffineTransformation.reflectionInstance(e,t,n,i)),this}}get interfaces_(){return[g,CoordinateSequenceFilter]}}class GeometricShapeFactory{constructor(){GeometricShapeFactory.constructor_.apply(this,arguments)}static constructor_(){if(this._geomFact=null,this._precModel=null,this._dim=new Dimensions,this._nPts=100,this._rotationAngle=0,0===arguments.length)GeometricShapeFactory.constructor_.call(this,new GeometryFactory);else if(1===arguments.length){const e=arguments[0];this._geomFact=e,this._precModel=e.getPrecisionModel()}}createSupercircle(e){const t=1/e,n=this._dim.getMinSize()/2,i=this._dim.getCentre(),r=Math.pow(n,e),o=n,a=Math.pow(r/2,t),s=Math.trunc(this._nPts/8),l=new Array(8*s+1).fill(null),c=a/s;for(let n=0;n<=s;n++){let a=0,h=o;if(0!==n){a=c*n;const i=Math.pow(a,e);h=Math.pow(r-i,t)}l[n]=this.coordTrans(a,h,i),l[2*s-n]=this.coordTrans(h,a,i),l[2*s+n]=this.coordTrans(h,-a,i),l[4*s-n]=this.coordTrans(a,-h,i),l[4*s+n]=this.coordTrans(-a,-h,i),l[6*s-n]=this.coordTrans(-h,-a,i),l[6*s+n]=this.coordTrans(-h,a,i),l[8*s-n]=this.coordTrans(-a,h,i)}l[l.length-1]=new Coordinate(l[0]);const h=this._geomFact.createLinearRing(l),u=this._geomFact.createPolygon(h);return this.rotate(u)}setNumPoints(e){this._nPts=e}setBase(e){this._dim.setBase(e)}setRotation(e){this._rotationAngle=e}setWidth(e){this._dim.setWidth(e)}createEllipse(){const e=this._dim.getEnvelope(),t=e.getWidth()/2,n=e.getHeight()/2,i=e.getMinX()+t,r=e.getMinY()+n,o=new Array(this._nPts+1).fill(null);let a=0;for(let e=0;e<this._nPts;e++){const s=e*(2*Math.PI/this._nPts),l=t*Math.cos(s)+i,c=n*Math.sin(s)+r;o[a++]=this.coord(l,c)}o[a]=new Coordinate(o[0]);const s=this._geomFact.createLinearRing(o),l=this._geomFact.createPolygon(s);return this.rotate(l)}coordTrans(e,t,n){return this.coord(e+n.x,t+n.y)}createSquircle(){return this.createSupercircle(4)}setEnvelope(e){this._dim.setEnvelope(e)}setCentre(e){this._dim.setCentre(e)}createArc(e,t){const n=this._dim.getEnvelope(),i=n.getWidth()/2,r=n.getHeight()/2,o=n.getMinX()+i,a=n.getMinY()+r;let s=t;(s<=0||s>2*Math.PI)&&(s=2*Math.PI);const l=s/(this._nPts-1),c=new Array(this._nPts).fill(null);let h=0;for(let t=0;t<this._nPts;t++){const n=e+t*l,s=i*Math.cos(n)+o,u=r*Math.sin(n)+a;c[h++]=this.coord(s,u)}const u=this._geomFact.createLineString(c);return this.rotate(u)}rotate(e){if(0!==this._rotationAngle){const t=AffineTransformation.rotationInstance(this._rotationAngle,this._dim.getCentre().x,this._dim.getCentre().y);e.apply(t)}return e}coord(e,t){const n=new Coordinate(e,t);return this._precModel.makePrecise(n),n}createArcPolygon(e,t){const n=this._dim.getEnvelope(),i=n.getWidth()/2,r=n.getHeight()/2,o=n.getMinX()+i,a=n.getMinY()+r;let s=t;(s<=0||s>2*Math.PI)&&(s=2*Math.PI);const l=s/(this._nPts-1),c=new Array(this._nPts+2).fill(null);let h=0;c[h++]=this.coord(o,a);for(let t=0;t<this._nPts;t++){const n=e+l*t,s=i*Math.cos(n)+o,u=r*Math.sin(n)+a;c[h++]=this.coord(s,u)}c[h++]=this.coord(o,a);const u=this._geomFact.createLinearRing(c),d=this._geomFact.createPolygon(u);return this.rotate(d)}createRectangle(){let e=null,t=0,n=Math.trunc(this._nPts/4);n<1&&(n=1);const i=this._dim.getEnvelope().getWidth()/n,r=this._dim.getEnvelope().getHeight()/n,o=new Array(4*n+1).fill(null),a=this._dim.getEnvelope();for(e=0;e<n;e++){const n=a.getMinX()+e*i,r=a.getMinY();o[t++]=this.coord(n,r)}for(e=0;e<n;e++){const n=a.getMaxX(),i=a.getMinY()+e*r;o[t++]=this.coord(n,i)}for(e=0;e<n;e++){const n=a.getMaxX()-e*i,r=a.getMaxY();o[t++]=this.coord(n,r)}for(e=0;e<n;e++){const n=a.getMinX(),i=a.getMaxY()-e*r;o[t++]=this.coord(n,i)}o[t++]=new Coordinate(o[0]);const s=this._geomFact.createLinearRing(o),l=this._geomFact.createPolygon(s);return this.rotate(l)}createCircle(){return this.createEllipse()}setHeight(e){this._dim.setHeight(e)}setSize(e){this._dim.setSize(e)}}class Dimensions{constructor(){Dimensions.constructor_.apply(this,arguments)}static constructor_(){this.base=null,this.centre=null,this.width=null,this.height=null}setBase(e){this.base=e}setWidth(e){this.width=e}getBase(){return this.base}getWidth(){return this.width}setEnvelope(e){this.width=e.getWidth(),this.height=e.getHeight(),this.base=new Coordinate(e.getMinX(),e.getMinY()),this.centre=new Coordinate(e.centre())}setCentre(e){this.centre=e}getMinSize(){return Math.min(this.width,this.height)}getEnvelope(){return null!==this.base?new Envelope(this.base.x,this.base.x+this.width,this.base.y,this.base.y+this.height):null!==this.centre?new Envelope(this.centre.x-this.width/2,this.centre.x+this.width/2,this.centre.y-this.height/2,this.centre.y+this.height/2):new Envelope(0,this.width,0,this.height)}getCentre(){return null===this.centre&&(this.centre=new Coordinate(this.base.x+this.width/2,this.base.y+this.height/2)),this.centre}getHeight(){return this.height}setHeight(e){this.height=e}setSize(e){this.height=e,this.width=e}}GeometricShapeFactory.Dimensions=Dimensions;const ne=e=>IsValidOp.isValid(e),ie=(e,t)=>RelateOp.intersects(e,t),re=(e,t)=>UnionOp.union(e,t),oe=(e,t)=>RelateOp.contains(e,t),ae=(e,t)=>BufferOp.bufferOp(e,t).norm(),se=e=>{if(!e)return null;const t=new PrecisionModel,n=new GeometryFactory(t);return new WKTWriter(n).write(e)},le=e=>{const t=new WKTReader,n=ce(e);return t.read(n)},ce=e=>{const t=[e.x,e.y,e.x+e.width,e.y,e.x+e.width,e.y+e.height,e.x,e.y+e.height,e.x,e.y];return`POLYGON((${t[0]} ${t[1]}, ${t[2]} ${t[3]}, ${t[4]} ${t[5]}, ${t[6]} ${t[7]}, ${t[8]} ${t[9]}))`},he=(e,t,n,i)=>(new GeometryFactory).createLineString([new Coordinate(e,t),new Coordinate(n,i)]),ue=e=>{const t=e.map((e=>new Coordinate(e[0],e[1])));return(new GeometryFactory).createPolygon(t)},de=(e,t,n,i)=>{const r=new GeometricShapeFactory,o=r.coord(e,t);return r.setCentre(o),r.setWidth(n),r.setHeight(i),r.createEllipse()},ge=(e,t,n,i)=>Math.sqrt(Math.pow(n-e,2)+Math.pow(i-t,2)),me=(e,t,n,i)=>e<n||e===n&&t<i?-1:e===n&&t===i?0:1,pe=(e,t,n,i)=>-1===me(e,t,n,i)?[e,t]:[n,i],fe=(e,t,n,i)=>-1!==me(e,t,n,i)?[e,t]:[n,i],_e=(e,t,n,i,r)=>{const o=((e,t,n,i)=>e===n?1/0:(i-t)/(n-e))(t,n,i,r),a=e/2;if(0===o)return[t,n+a,i,n+a,i,n-a,t,n-a];if(o===1/0)return[t-a,n,t-a,r,i+a,r,i+a,n];const s=Math.atan(o),l=a*Math.cos(s),c=a*Math.sin(s);return[t-c,n+l,i-c,r+l,i+c,r-l,t+c,n-l,t+l,n-c]},ye=(e,t=5)=>TopologyPreservingSimplifier.simplify(e,t),Ce=e=>{const t=[];for(let n=0;n<e.getNumGeometries();n++){let i=be(e.getGeometryN(n));i=ae(i,0),t.push(i)}return(new GeometryFactory).createMultiPolygon(t)},be=e=>{const t=e.getCoordinates(),n=[];n.push(t[0]);for(let e=0;e<t.length-1;e++){const i=t[e],r=t[e+1],o=new Coordinate(.75*i.x+.25*r.x,.75*i.y+.25*r.y),a=new Coordinate(.25*i.x+.75*r.x,.25*i.y+.75*r.y);n.push(o),n.push(a)}return n.push(t[t.length-1]),(new GeometryFactory).createPolygon(n)},Se=(e,t,n,i,r)=>{const o=he(e,t,n,i);for(const a of r){const r=he(a[0],a[1],a[2],a[3]);if(oe(o,r)){const r=pe(e,t,n,i),o=fe(e,t,n,i),s=pe(a[0],a[1],a[2],a[3]),l=fe(a[0],a[1],a[2],a[3]);return[[r[0],r[1],s[0],s[1]],[l[0],l[1],o[0],o[1]]]}}return[[e,t,n,i]]},xe=(e,t)=>e.c.length==t.c.length&&e.c[0]==t.c[0]&&e.c[1]==t.c[1]&&e.c[2]==t.c[2]&&e.c[3]==t.c[3]&&e.door==t.door&&JSON.stringify(e.flags)==JSON.stringify(t.flags),Ie=()=>{const t=canvas.scene.getEmbeddedCollection("Wall"),n=[];for(const i of t){i.getFlag(e,"dungeonVersion")&&n.push(i)}return n},Te=(e,t,n)=>{let i=[];for(let r=0;r<t.getNumGeometries();r++){const o=t.getGeometryN(r);i=i.concat(ve(e,o,n))}return i},ve=(e,t,n)=>{const i=[],r=t.getExteriorRing().getCoordinates();for(let t=0;t<r.length-1;t++){const o=r[t].x,a=r[t].y,s=r[t+1].x,l=r[t+1].y,c=Se(o,a,s,l,n);for(const t of c){const n=De(e,t[0],t[1],t[2],t[3]);i.push(n)}}const o=t.getNumInteriorRing();for(let n=0;n<o;n++){const r=t.getInteriorRingN(n).getCoordinates();for(let t=0;t<r.length-1;t++){const n=De(e,r[t].x,r[t].y,r[t+1].x,r[t+1].y);i.push(n)}}return i},Ee=(e,t)=>{const n=[];for(const i of t){const t=De(e,i[0],i[1],i[2],i[3]);n.push(t)}return n},we=(e,t)=>{const n=[];for(const i of t){const t=Pe(e,i[0],i[1],i[2],i[3]);n.push(t)}return n},Ae=(e,t)=>{const n=[];for(const i of t){const t=Me(e,i[0],i[1],i[2],i[3]);n.push(t)}return n},Le=(e,t)=>{const n=[];for(const i of t){const t=Ne(e,i[0],i[1],i[2],i[3]);n.push(t)}return n},De=(t,n,i,r,o)=>{const a={c:[n,i,r,o],door:0,flags:{}};return a.flags[e]={},a.flags[e].dungeonVersion="1.0",Settings.threeDCanvasEnabled()&&(a.flags["levels-3d-preview"]={joinWall:!0,wallDepth:t.wallThickness,wallSidesTexture:t.threeDWallSidesTexture,wallSidesTint:t.threeDWallSidesTextureTint,wallTexture:t.threeDWallTexture,wallTint:t.threeDWallTextureTint}),a},Me=(e,t,n,i,r)=>{const o=De(e,t,n,i,r);return o.door=1,Settings.threeDCanvasEnabled()&&(o.flags["levels-3d-preview"].joinWall=!1,o.flags["levels-3d-preview"].wallTexture=e.threeDDoorTexture,o.flags["levels-3d-preview"].wallTint=e.threeDDoorTextureTint),o},Ne=(e,t,n,i,r)=>{const o=De(e,t,n,i,r);return o.door=2,o},Pe=(e,t,n,i,r)=>{const o=De(e,t,n,i,r);return o.door=0,o.light=0,o.sight=0,o};class DungeonState{static FLAG_KEY="dungeonState";constructor(e,t,n,i,r,o,a){this.geometry=e,this.themeAreas=t,this.doors=n,this.secretDoors=i,this.interiorWalls=r,this.invisibleWalls=o,this.config=a}static startState(){return new DungeonState(null,[],[],[],[],[],{doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8})}clone(){return new DungeonState(this.geometry?this.geometry.copy():null,JSON.parse(JSON.stringify(this.themeAreas)),JSON.parse(JSON.stringify(this.doors)),this.secretDoors?[...this.secretDoors]:[],this.interiorWalls?[...this.interiorWalls]:[],this.invisibleWalls?[...this.invisibleWalls]:[],JSON.parse(JSON.stringify(this.config)))}toString(){return JSON.stringify({wkt:se(this.geometry),themeAreas:this.themeAreas,doors:this.doors,secretDoors:this.secretDoors,interiorWalls:this.interiorWalls,invisibleWalls:this.invisibleWalls,config:this.config})}static fromString(e){if(!e)return DungeonState.startState();const t=JSON.parse(e),n=(i=t.wkt)?(new WKTReader).read(i):null;var i;const r=t.themeAreas?t.themeAreas:[],o=t.doors?t.doors:[],a=t.secretDoors?t.secretDoors:[],s=t.interiorWalls?t.interiorWalls:[],l=t.invisibleWalls?t.invisibleWalls:[],c=foundry.utils.mergeObject({doorColor:"#000000",doorFillColor:"#ffffff",doorFillOpacity:1,doorLineThickness:8,doorThickness:25,exteriorShadowColor:"#000000",exteriorShadowThickness:20,exteriorShadowOpacity:.5,floorColor:"#F2EDDF",floorOpacity:1,floorTexture:"",floorTextureRotation:0,floorTextureTint:"",interiorShadowColor:"#000000",interiorShadowThickness:8,interiorShadowOpacity:.5,invisibleWallColor:"#000000",invisibleWallFillColor:"#ffffff",invisibleWallLineThickness:2,invisibleWallFillOpacity:1,invisibleWallThickness:6,matchBaseWalls:!0,sceneBackgroundColor:"#999999",sceneGridColor:"#000000",sceneGridOpacity:.2,secretDoorSColor:"#ffffff",secretDoorStyleGM:"secret",secretDoorStylePlayer:"wall",threeDDoorTexture:"modules/dungeon-draw/assets/textures/3d_arena-gate-texture.webp",threeDDoorTextureTint:"",threeDWallTexture:"",threeDWallTextureTint:"",threeDWallSidesTexture:"",threeDWallSidesTextureTint:"",wallColor:"#000000",wallTexture:"",wallTextureTint:"",wallThickness:8},t.config);return new DungeonState(n,r,o,a,s,l,c)}async saveToJournalEntry(n){const i=this.toString();Settings.makeFoundryWalls()&&await(async e=>{if(!game.user.isGM)return;let t=[];if(e.geometry){const n=ye(e.geometry,10),i=e.doors.concat(e.secretDoors,e.invisibleWalls);t=Te(e.config,n,i)}const n=Ee(e.config,e.interiorWalls),i=we(e.config,e.invisibleWalls),r=Ae(e.config,e.doors),o=Le(e.config,e.secretDoors),a=t.concat(n,i,r,o),s=Ie(),l=[],c=[];for(const e of a){let t=!1;for(const n of s)if(xe(e,n)){l.push(n),t=!0;break}t||c.push(e)}const h=l.map((e=>e.id)),u=s.filter((e=>!h.includes(e.id))).map((e=>e.id));if(c.length&&await canvas.scene.createEmbeddedDocuments("Wall",c),u.length)try{await canvas.scene.deleteEmbeddedDocuments("Wall",u)}catch(e){console.error(e)}})(this),await n.setFlag(e,t,i)}static async loadFromJournalEntry(n){await this.maybeMigrateJournalEntry(n);const i=n.getFlag(e,t);return DungeonState.fromString(i)}static async maybeMigrateJournalEntry(e){if(game.user.isGM)if(e.pages){const t=e.pages.find((e=>"text"===e.type));if(t?.text?.content){console.log("Migrating v10 page.text.content");const n=DungeonState.fromString(t.text.content);await n.saveToJournalEntry(e),await t.delete()}}else if(e.data.content){console.log("Migrating v9 journalEntry.data.content");const t=DungeonState.fromString(e.data.content);await t.saveToJournalEntry(e),await e.update({content:null})}}}const Re=e=>{const t=e?.baseTexture?.resource?.source;t&&"VIDEO"===t.tagName&&(t.loop=!0,t.muted=!0,game.video.play(t))},Oe=async(e,t)=>{if(!t.geometry)return;const n=new PIXI.Graphics,i=new PIXI.Graphics,r=new PIXI.Graphics,o=new PIXI.Graphics;ke(e,t.config,t.geometry);const a=new PIXI.Graphics;ze(a,t.geometry),e.addChild(a),i.mask=a;const s=new PIXI.AlphaFilter(t.config.interiorShadowOpacity),l=new PIXI.BlurFilter;i.filters=[s,l],Ve(n,i,r,t.config,t.geometry);const c=new PIXI.Graphics,h=JSON.parse(JSON.stringify(t.config));h.wallColor="#000000";for(const e of t.interiorWalls)je(i,t.config,e),t.config.wallTexture?qe(c,h,e):qe(r,t.config,e);for(const e of t.invisibleWalls)Ze(i,t.config,e),Ke(o,r,c,t.config,e);for(const e of t.doors)Qe(i,t.config,e),Xe(o,r,c,t.config,e);for(const e of t.secretDoors)je(i,t.config,e),Je(o,r,c,t.config,e);if(e.addChild(n),e.addChild(i),t.config.wallTexture){Ue(c,t.geometry,t.config.wallThickness),e.addChild(c);const n=ae(t.geometry,t.config.wallThickness/2),i=await Ge(t.config.wallTexture);if(i?.valid){let e=null;t.config.wallTextureRotation&&(e=PIXI.Matrix.IDENTITY.clone(),e.rotate(t.config.wallTextureRotation*PIXI.DEG_TO_RAD)),Re(i),r.beginTextureFill({texture:i,alpha:1,matrix:e});const o=n.getCoordinates().map((e=>[e.x,e.y])).flat();r.drawPolygon(o),r.endFill(),r.mask=c,t.config.wallTextureTint&&(r.tint=PIXI.utils.string2hex(t.config.wallTextureTint))}}e.addChild(r),e.addChild(o)},Be=async(e,t)=>{for(const n of t.themeAreas){const i=t.clone();i.config=n.config,i.config.doorColor=t.config.doorColor,i.config.doorFillColor=t.config.doorFillColor,i.config.doorFillOpacity=t.config.doorFillOpacity,i.config.doorThickness=t.config.doorThickness,i.config.matchBaseWalls&&(i.config.wallColor=t.config.wallColor,i.config.wallTexture=t.config.wallTexture,i.config.wallTextureTint=t.config.wallTextureTint,i.config.wallThickness=t.config.wallThickness),i.config.exteriorShadowOpacity=0;const r=new PIXI.Container,o=new PIXI.Graphics;o.beginFill(16777215,1),o.drawPolygon(n.points.flat()),o.endFill(),r.mask=o,ue(n.points),await Oe(r,i),e.addChild(o),e.addChild(r)}},Ge=async e=>{try{const t=await loadTexture(e);return t||ui.notifications.error(`${game.i18n.localize("DD.TextureLoadFailure")}: ${e}`),t}catch(e){console.log(e)}},ke=(e,t,n)=>{if(!t.exteriorShadowThickness||!t.exteriorShadowOpacity||!n)return;const i=new PIXI.Graphics;i.lineStyle({width:t.wallThickness+t.exteriorShadowThickness,color:PIXI.utils.string2hex(t.interiorShadowColor),alignment:.5,join:"round"});for(let e=0;e<n.getNumGeometries();e++){const r=n.getGeometryN(e);Fe(i,t,r)}const r=new PIXI.AlphaFilter(t.exteriorShadowOpacity),o=new PIXI.BlurFilter;i.filters=[r,o],e.addChild(i)},Fe=(e,t,n)=>{const i=n.getExteriorRing();e.drawPolygon(i.getCoordinates().map((e=>[e.x,e.y])).flat());const r=n.getNumInteriorRing();for(let t=0;t<r;t++){const i=n.getInteriorRingN(t);e.drawPolygon(i.getCoordinates().map((e=>[e.x,e.y])).flat())}},We=(e,t)=>{const n=t.getExteriorRing().getCoordinates().map((e=>[e.x,e.y])).flat();e.beginFill(16777215,1),e.drawPolygon(n),e.endFill();const i=t.getNumInteriorRing();for(let n=0;n<i;n++){const i=t.getInteriorRingN(n).getCoordinates().map((e=>[e.x,e.y])).flat();e.lineStyle(0,0,1,1,.5),e.beginHole(),e.drawPolygon(i),e.endHole()}},ze=(e,t)=>{for(let n=0;n<t.getNumGeometries();n++){const i=t.getGeometryN(n);We(e,i)}},He=(e,t,n)=>{const i=t.getExteriorRing().getCoordinates().map((e=>[e.x,e.y])).flat();e.lineStyle(n,PIXI.utils.string2hex("#000000"),1,.5),e.drawPolygon(i);const r=t.getNumInteriorRing();for(let i=0;i<r;i++){const r=t.getInteriorRingN(i).getCoordinates().map((e=>[e.x,e.y])).flat();e.lineStyle(n,PIXI.utils.string2hex("#000000"),1),e.drawPolygon(r)}},Ue=(e,t,n)=>{for(let i=0;i<t.getNumGeometries();i++){const r=t.getGeometryN(i);He(e,r,n)}},Ve=(e,t,n,i,r)=>{for(let o=0;o<r.getNumGeometries();o++){const a=r.getGeometryN(o);Ye(e,t,n,i,a)}},Ye=async(e,t,n,i,r)=>{const o=r.getExteriorRing().getCoordinates().map((e=>[e.x,e.y])).flat();if(i.floorTexture){const t=await Ge(i.floorTexture);if(t?.valid){let n=null;i.floorTextureRotation&&(n=PIXI.Matrix.IDENTITY.clone(),n.rotate(i.floorTextureRotation*PIXI.DEG_TO_RAD)),Re(t),e.beginTextureFill({texture:t,alpha:i.floorOpacity,matrix:n}),e.drawPolygon(o),e.endFill(),i.floorTextureTint&&(e.tint=PIXI.utils.string2hex(i.floorTextureTint))}}else e.beginFill(PIXI.utils.string2hex(i.floorColor),i.floorOpacity),e.drawPolygon(o),e.endFill();const a=r.getNumInteriorRing();for(let t=0;t<a;t++){const n=r.getInteriorRingN(t).getCoordinates().map((e=>[e.x,e.y])).flat();e.lineStyle(0,0,1,1,.5),e.beginHole(),e.drawPolygon(n),e.endHole()}i.interiorShadowOpacity&&(t.lineStyle({width:i.wallThickness+i.interiorShadowThickness,color:PIXI.utils.string2hex(i.interiorShadowColor),alignment:.5,join:"round"}),t.drawPolygon(o)),i.wallTexture||(n.lineStyle(i.wallThickness,PIXI.utils.string2hex(i.wallColor),1,.5),n.drawPolygon(o));for(let e=0;e<a;e++){const o=r.getInteriorRingN(e).getCoordinates().map((e=>[e.x,e.y])).flat();t.drawPolygon(o),i.wallTexture||(n.lineStyle(i.wallThickness,PIXI.utils.string2hex(i.wallColor),1),n.drawPolygon(o))}},qe=(e,t,n)=>{e.lineStyle({width:t.wallThickness,color:PIXI.utils.string2hex(t.wallColor),alpha:1,alignment:.5,cap:"round"}),e.moveTo(n[0],n[1]),e.lineTo(n[2],n[3])},Ke=(e,t,n,i,r)=>{const o={doorColor:i.invisibleWallColor,doorLineThickness:i.invisibleWallLineThickness,doorFillColor:i.invisibleWallFillColor,doorFillOpacity:i.invisibleWallFillOpacity,doorThickness:i.invisibleWallThickness,wallColor:i.wallColor,wallTexture:i.wallTexture,wallThickness:i.wallThickness};Xe(e,t,n,o,r),e.lineStyle({width:i.invisibleWallLineThickness,color:PIXI.utils.string2hex(i.invisibleWallColor),alpha:1,alignment:.5}),e.moveTo(r[0],r[1]),e.lineTo(r[2],r[3])},je=(e,t,n)=>{e.lineStyle({width:t.wallThickness+t.interiorShadowThickness,color:PIXI.utils.string2hex(t.interiorShadowColor),alignment:.5,join:"round",cap:"round"}),e.moveTo(n[2],n[3]),e.lineTo(n[0],n[1])},Xe=(e,t,n,i,r)=>{const o=ge(r[0],r[1],r[2],r[3]),a=20/o,s=a+(o-40)/o,l=r[2]-r[0],c=r[3]-r[1],h=[r[0]+l*a,r[1]+c*a],u=[r[0]+l*s,r[1]+c*s],d=_e(i.doorThickness,h[0],h[1],u[0],u[1]);i.wallTexture?(n.lineStyle({width:i.wallThickness,color:PIXI.utils.string2hex(i.wallColor),alpha:1,alignment:.5,cap:"round"}),n.moveTo(r[0],r[1]),n.lineTo(h[0],h[1]),n.moveTo(u[0],u[1]),n.lineTo(r[2],r[3])):(t.lineStyle({width:i.wallThickness,color:PIXI.utils.string2hex(i.wallColor),alpha:1,alignment:.5,cap:"round"}),t.moveTo(r[0],r[1]),t.lineTo(h[0],h[1]),t.moveTo(u[0],u[1]),t.lineTo(r[2],r[3])),i.doorFillOpacity&&e.beginFill(PIXI.utils.string2hex(i.doorFillColor),i.doorFillOpacity),e.lineStyle(i.doorLineThickness,PIXI.utils.string2hex(i.doorColor),1,.5),e.drawPolygon(d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[0],d[1]),i.doorFillColor&&e.endFill()},Je=(e,t,n,i,r)=>{const o=game.user.isGM;if(o&&"door"===i.secretDoorStyleGM||!o&&"door"===i.secretDoorStylePlayer)return void Xe(e,t,n,i,r);const a=ge(r[0],r[1],r[2],r[3]),s=(a-40)/2/a,l=s+40/a,c=r[2]-r[0],h=r[3]-r[1],u=[r[0]+c*s,r[1]+h*s],d=[r[0]+.5*c,r[1]+.5*h],g=[r[0]+c*l,r[1]+h*l],m=_e(30,u[0],u[1],g[0],g[1]);if(i.wallTexture?(n.lineStyle({width:i.wallThickness,color:PIXI.utils.string2hex("#000000"),alpha:1,alignment:.5,cap:"round"}),n.moveTo(r[0],r[1]),n.lineTo(r[2],r[3])):(t.lineStyle({width:i.wallThickness,color:PIXI.utils.string2hex(i.wallColor),alpha:1,alignment:.5,cap:"round"}),t.moveTo(r[0],r[1]),t.lineTo(r[2],r[3])),o&&"secret"===i.secretDoorStyleGM||!o&&"secret"===i.secretDoorStylePlayer){const t=_e(50,u[0],u[1],d[0],d[1]),n=_e(50,d[0],d[1],g[0],g[1]);e.lineStyle({width:5,color:PIXI.utils.string2hex(i.secretDoorSColor),alpha:1,alignment:.5,cap:"round"}),e.moveTo(m[6],m[7]),e.bezierCurveTo(t[0],t[1],t[2],t[3],d[0],d[1]),e.bezierCurveTo(n[6],n[7],n[4],n[5],m[2],m[3])}},Ze=(e,t,n)=>{const i={doorLineThickness:t.invisibleWallLineThickness,doorThickness:t.invisibleWallThickness,interiorShadowColor:t.interiorShadowColor,interiorShadowThickness:t.interiorShadowThickness,wallThickness:t.wallThickness};Qe(e,i,n)},Qe=(e,t,n)=>{const i=ge(n[0],n[1],n[2],n[3]),r=20/i,o=r+(i-40)/i,a=n[2]-n[0],s=n[3]-n[1],l=[n[0]+a*r,n[1]+s*r],c=[n[0]+a*o,n[1]+s*o],h=_e(t.doorThickness,l[0],l[1],c[0],c[1]);e.lineStyle({width:t.wallThickness+t.interiorShadowThickness,color:PIXI.utils.string2hex(t.interiorShadowColor),alignment:.5,join:"round"}),e.moveTo(n[2],n[3]),e.lineTo(c[0],c[1]),e.moveTo(l[0],l[1]),e.lineTo(n[0],n[1]),e.lineStyle({width:t.doorLineThickness+t.interiorShadowThickness,color:PIXI.utils.string2hex(t.interiorShadowColor),alignment:.5,join:"round"}),e.drawPolygon(h[0],h[1],h[2],h[3],h[4],h[5],h[6],h[7],h[0],h[1])};let $e=class Dungeon extends PlaceableObject{constructor(e,t){super(t),this.journalEntry=e,this.history=[DungeonState.startState()],this.historyIndex=0}static embeddedName="Drawing";state(){return this.history[this.historyIndex]}async deleteAll(){const e=this.state(),t=DungeonState.startState();t.config=e.config,this.history=[t],this.historyIndex=0,await this.history[this.historyIndex].saveToJournalEntry(this.journalEntry),this.refresh()}async saveToSceneBackground(){const e=new PIXI.Container,t=new PIXI.Graphics,n=Math.ceil(canvas.scene.width*canvas.scene.padding/canvas.scene.grid.size)*canvas.scene.grid.size,i=Math.ceil(canvas.scene.height*canvas.scene.padding/canvas.scene.grid.size)*canvas.scene.grid.size,r=[n,i,n+canvas.scene.width,i,n+canvas.scene.width,i+canvas.scene.height,n,i+canvas.scene.height,n,i];t.beginFill(PIXI.utils.string2hex("#FFFFFF"),1),t.drawPolygon(r),t.endFill(),e.mask=t,this.mask=t;const o=new PIXI.Sprite;o.height=canvas.scene.height,o.width=canvas.scene.width,o.position.x=n,o.position.y=i,e.addChild(o),e.addChild(this);const a=`${canvas.scene.name}-dungeon.png`,s=await canvas.app.renderer.extract.base64(e),l=await fetch(s),c=await l.blob(),h=new File([c],a,{type:"image/png"});await FilePicker.upload("data","",h,{});const u=a;console.log(u),canvas.scene.img===u&&await canvas.scene.update({img:null},{render:!1}),await canvas.scene.update({img:u}),this.mask=null}draw(){return this.refresh(),this}refresh(){(async(e,t)=>{e.clear(),await Oe(e,t),await Be(e,t)})(this,this.state())}async maybeRefresh(e){if(e.id===this.journalEntry.id){const e=await DungeonState.loadFromJournalEntry(this.journalEntry);await this.pushState(e,!1)}}async loadFromJournalEntry(){const e=await DungeonState.loadFromJournalEntry(this.journalEntry);this.history=[e],this.historyIndex=0,this.refresh()}async undo(){this.historyIndex=Math.max(0,this.historyIndex-1),await this.history[this.historyIndex].saveToJournalEntry(this.journalEntry),await this.refresh()}async redo(){this.historyIndex=Math.min(this.history.length-1,this.historyIndex+1),await this.history[this.historyIndex].saveToJournalEntry(this.journalEntry),await this.refresh()}async pushState(e,t=!0){for(let e=this.history.length-1;e>this.historyIndex;e--)this.history.pop();this.history.push(e),this.historyIndex++,t&&await e.saveToJournalEntry(this.journalEntry),await this.refresh()}async setConfig(e){const t=this.state().clone();t.config=e,await this.pushState(t)}async addDoor(e,t,n,i){await this._addDoor(e,t,n,i,"doors")}async addSecretDoor(e,t,n,i){await this._addDoor(e,t,n,i,"secretDoors")}async addInvisibleWall(e,t,n,i){await this._addDoor(e,t,n,i,"invisibleWalls")}async _addDoor(e,t,n,i,r){const o=this.history[this.historyIndex].clone(),a=he(e,t,n,i),s=[],l=[];for(const r of o.interiorWalls){const o=he(r[0],r[1],r[2],r[3]);if(oe(o,a)){s.push(r);const o=pe(r[0],r[1],r[2],r[3]),a=fe(r[0],r[1],r[2],r[3]),c=pe(e,t,n,i),h=fe(e,t,n,i);l.push([o[0],o[1],c[0],c[1]]),l.push([h[0],h[1],a[0],a[1]])}}o.interiorWalls=o.interiorWalls.filter((e=>-1===s.indexOf(e))),o.interiorWalls=o.interiorWalls.concat(l),o[r].push([e,t,n,i]),await this.pushState(o)}async addInteriorWall(e,t,n,i){const r=this.history[this.historyIndex].clone(),o=Se(e,t,n,i,r.doors);r.interiorWalls=r.interiorWalls.concat(o),await this.pushState(r)}async removeInteriorWalls(e){const t=le(e),n=this.history[this.historyIndex].interiorWalls.filter((e=>{const n=he(e[0],e[1],e[2],e[3]);return!ie(t,n)}));if(n.length!=this.history[this.historyIndex].interiorWalls.length){const e=this.history[this.historyIndex].clone();e.interiorWalls=n,await this.pushState(e)}}async removeInvisibleWalls(e){const t=le(e),n=this.history[this.historyIndex].invisibleWalls.filter((e=>{const n=he(e[0],e[1],e[2],e[3]);return!ie(t,n)}));if(n.length!=this.history[this.historyIndex].invisibleWalls.length){const e=this.history[this.historyIndex].clone();e.invisibleWalls=n,await this.pushState(e)}}async removeDoors(e){const t=le(e),n=this.history[this.historyIndex],i=n.doors.filter((e=>{const n=he(e[0],e[1],e[2],e[3]);return!ie(t,n)}));if(i.length!=n.doors.length){const e=n.clone();e.doors=i,await this.pushState(e)}}async removeSecretDoors(e){const t=le(e),n=this.history[this.historyIndex],i=n.secretDoors.filter((e=>{const n=he(e[0],e[1],e[2],e[3]);return!ie(t,n)}));if(i.length!=n.secretDoors.length){const e=n.clone();e.secretDoors=i,await this.pushState(e)}}async _addPoly(e){const t=this.history[this.historyIndex],n=t.clone();if(n.geometry){n.geometry=re(n.geometry,e);if(i=t.geometry,r=e,RelateOp.touches(i,r)){const i=((e,t)=>OverlayOp.intersection(e,t))(t.geometry,e),r=i.getCoordinates();if(r.length>1&&r.length%2==0)for(let e=0;e<r.length;e+=2){const t=Se(r[e].x,r[e].y,r[e+1].x,r[e+1].y,n.doors);n.interiorWalls=n.interiorWalls.concat(t)}}else{const t=n.interiorWalls.filter((t=>{const n=he(t[0],t[1],t[2],t[3]);return!ie(e,n)}));t.length!=n.interiorWalls.length&&(n.interiorWalls=t)}}else n.geometry=e;var i,r;await this.pushState(n)}async addRectangle(e){const t=le(e);this._addPoly(t)}async removeRectangle(e){const t=le(e);await this._removePoly(t)}async addGridPaintedArea(e){if(ne(e))try{this._addPoly(e)}catch(e){console.log(e),ui.notifications.error(game.i18n.localize("DD.ErrorAddingPolygon"))}else ui.notifications.error(game.i18n.localize("DD.ErrorInvalidShape"))}async removeGridPaintedArea(e){if(ne(e))try{this._removePoly(e)}catch(e){console.log(e),ui.notifications.error(game.i18n.localize("DD.ErrorAddingPolygon"))}else ui.notifications.error(game.i18n.localize("DD.ErrorInvalidShape"))}async _removePoly(e){if(!this.history[this.historyIndex].geometry)return;if(!ie(this.history[this.historyIndex].geometry,e))return;const t=this.history[this.historyIndex].clone();var n,i;t.geometry=(n=t.geometry,i=e,OverlayOp.difference(n,i)),await this.pushState(t)}async addPolygon(e){const t=ue(e);if(ne(t))try{await this._addPoly(t)}catch(e){console.log(e),ui.notifications.error(game.i18n.localize("DD.ErrorAddingPolygon"))}else ui.notifications.error(game.i18n.localize("DD.ErrorInvalidShape"))}async removePolygon(e){const t=ue(e);if(ne(t))try{await this._removePoly(t)}catch(e){console.log(e),ui.notifications.error(game.i18n.localize("DD.ErrorRemovingPolygon"))}else ui.notifications.error(game.i18n.localize("DD.ErrorInvalidShape"))}async addEllipse(e,t,n,i){const r=de(e,t,n,i);if(ne(r))try{await this._addPoly(r)}catch(e){console.log(e),ui.notifications.error(game.i18n.localize("DD.ErrorAddingPolygon"))}else ui.notifications.error(game.i18n.localize("DD.ErrorInvalidShape"))}async removeEllipse(e,t,n,i){const r=de(e,t,n,i);if(ne(r))try{await this._removePoly(r)}catch(e){console.log(e),ui.notifications.error(game.i18n.localize("DD.ErrorRemovingPolygon"))}else ui.notifications.error(game.i18n.localize("DD.ErrorInvalidShape"))}async addThemeArea(e){const t=ue(e);if(!ne(t))return void ui.notifications.error(game.i18n.localize("DD.ErrorInvalidShape"));const n=(e=>{const t=e.split("."),n=t[0],i=t[1];if("custom"===n)return s()[i];return u[i]})(c()),i={points:e,config:n.config},r=this.history[this.historyIndex].clone();r.themeAreas.push(i),await this.pushState(r)}async removeThemeAreas(e){const t=le(e),n=this.history[this.historyIndex].themeAreas.filter((e=>{try{const n=ue(e.points);return!ie(t,n)}catch(e){return console.log(e),!1}}));if(n.length!=this.history[this.historyIndex].themeAreas.length){const e=this.history[this.historyIndex].clone();e.themeAreas=n,await this.pushState(e)}}};var et="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function tt(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var nt={},it={},rt={},ot={exports:{}};!function(e,t){function n(e,t){var n=[],i=[];return null==t&&(t=function(e,t){return n[0]===t?"[Circular ~]":"[Circular ~."+i.slice(0,n.indexOf(t)).join(".")+"]"}),function(r,o){if(n.length>0){var a=n.indexOf(this);~a?n.splice(a+1):n.push(this),~a?i.splice(a,1/0,r):i.push(r),~n.indexOf(o)&&(o=t.call(this,r,o))}else n.push(o);return null==e?o:e.call(this,r,o)}}(ot.exports=function(e,t,i,r){return JSON.stringify(e,n(t,r),i)}).getSerialize=n}();var at=ot.exports,st=function(){var e=4022871197;return function(t){if(t){t=t.toString();for(var n=0;n<t.length;n++){var i=.02519603282416938*(e+=t.charCodeAt(n));i-=e=i>>>0,e=(i*=e)>>>0,e+=4294967296*(i-=e)}return 2.3283064365386963e-10*(e>>>0)}e=4022871197}},lt=function(e){return function(){var t,n,i=48,r=1,o=i,a=new Array(i),s=0,l=new st;for(t=0;t<i;t++)a[t]=l(Math.random());var c=function(){++o>=i&&(o=0);var e=1768863*a[o]+2.3283064365386963e-10*r;return a[o]=e-(r=0|e)},h=function(e){return Math.floor(e*(c()+11102230246251565e-32*(2097152*c()|0)))};h.string=function(e){var t,n="";for(t=0;t<e;t++)n+=String.fromCharCode(33+h(94));return n};return h.cleanString=function(e){return e=(e=(e=e.replace(/(^\s*)|(\s*$)/gi,"")).replace(/[\x00-\x1F]/gi,"")).replace(/\n /,"\n")},h.hashString=function(e){for(e=h.cleanString(e),l(e),t=0;t<e.length;t++)for(s=e.charCodeAt(t),n=0;n<i;n++)a[n]-=l(s),a[n]<0&&(a[n]+=1)},h.seed=function(e){null==e&&(e=Math.random()),"string"!=typeof e&&(e=at(e,(function(e,t){return"function"==typeof t?t.toString():t}))),h.initState(),h.hashString(e)},h.addEntropy=function(){var e=[];for(t=0;t<arguments.length;t++)e.push(arguments[t]);!function(){var e=Array.prototype.slice.call(arguments);for(t=0;t<e.length;t++)for(n=0;n<i;n++)a[n]-=l(e[t]),a[n]<0&&(a[n]+=1)}(s+++(new Date).getTime()+e.join("")+Math.random())},h.initState=function(){for(l(),t=0;t<i;t++)a[t]=l(" ");r=1,o=i},h.done=function(){l=null},void 0!==e&&h.seed(e),h.range=function(e){return h(e)},h.random=function(){return h(Number.MAX_VALUE-1)/Number.MAX_VALUE},h.floatBetween=function(e,t){return h.random()*(t-e)+e},h.intBetween=function(e,t){return Math.floor(h.random()*(t-e+1))+e},h}()};lt.create=function(e){return new lt(e)};var ct=lt;Object.defineProperty(rt,"__esModule",{value:!0});var ht,ut=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),dt=(ht=ct)&&ht.__esModule?ht:{default:ht};var gt=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rng=dt.default.create(t)}return ut(e,[{key:"int",value:function(e,t){return this.rng.intBetween(e,t)}},{key:"float",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return this.rng.floatBetween(e,t)}},{key:"vec",value:function(e,t){return[this.int(e[0],t[0]),this.int(e[1],t[1])]}},{key:"choose",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.rng.intBetween(0,e.length-1);return t?e.splice(n,1)[0]:e[n]}},{key:"maybe",value:function(e){return this.float()<=e}}]),e}();rt.default=gt;var mt={},pt={};Object.defineProperty(pt,"__esModule",{value:!0});var ft=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_t=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var yt=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[0,0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rows=[],this.size=[];for(var i=0;i<t[1];i++){for(var r=[],o=0;o<t[0];o++)r.push(n);this.rows.push(r)}}return _t(e,[{key:"iter",value:function(e,t){for(var n=0;n<this.size[1];n++)for(var i=0;i<this.size[0];i++)e.apply(t,[[i,n],this.get([i,n])])}},{key:"get",value:function(e){var t=ft(e,2),n=t[0],i=t[1];if(void 0!==this.rows[i])return this.rows[i][n]}},{key:"set",value:function(e,t){var n=ft(e,2),i=n[0],r=n[1];this.rows[r][i]=t}},{key:"set_horizontal_line",value:function(e,t,n){for(var i=ft(e,2),r=i[0],o=i[1],a=Math.abs(t),s=t<0?-1:1,l=0;l<=a;l++)this.set([r+l*s,o],n)}},{key:"set_vertical_line",value:function(e,t,n){for(var i=ft(e,2),r=i[0],o=i[1],a=Math.abs(t),s=t<0?-1:1,l=0;l<=a;l++)this.set([r,o+l*s],n)}},{key:"get_square",value:function(t,n){for(var i=ft(t,2),r=i[0],o=i[1],a=ft(n,2),s=a[0],l=a[1],c=new e([s,l]),h=0;h<s;h++)for(var u=0;u<l;u++)c.set([h,u],this.get([r+h,o+u]));return c}},{key:"set_square",value:function(e,t,n){var i=ft(e,2),r=i[0],o=i[1],a=ft(t,2),s=a[0],l=a[1];if(arguments.length>3&&void 0!==arguments[3]&&arguments[3])for(var c=0;c<s;c++)for(var h=0;h<l;h++)this.set([r+c,o+h],n);else this.line_h([r,o],s-1,n),this.line_h([r,o+l-1],s-1,n),this.line_v([r,o],l-1,n),this.line_v([r+s-1,o],l-1,n)}}]),e}();pt.default=yt;var Ct={};Object.defineProperty(Ct,"__esModule",{value:!0});var bt=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function St(e,t,n,i){if(Array.isArray(e)&&Array.isArray(t)){var r=bt(t,2);n=r[0],i=r[1];var o=bt(e,2);e=o[0],t=o[1]}this.setValues(e,t,n,i)}var xt=St.prototype;xt.setValues=function(e,t,n,i){return this.x=e||0,this.y=t||0,this.width=n||0,this.height=i||0,this},xt.extend=function(e,t,n,i){return i=i||0,e+(n=n||0)>this.x+this.width&&(this.width=e+n-this.x),t+i>this.y+this.height&&(this.height=t+i-this.y),e<this.x&&(this.width+=this.x-e,this.x=e),t<this.y&&(this.height+=this.y-t,this.y=t),this},xt.pad=function(e,t,n,i){return this.x-=t,this.y-=e,this.width+=t+i,this.height+=e+n,this},xt.copy=function(e){return this.setValues(e.x,e.y,e.width,e.height)},xt.contains=function(e,t,n,i){return n=n||0,i=i||0,e>=this.x&&e+n<=this.x+this.width&&t>=this.y&&t+i<=this.y+this.height},xt.union=function(e){return this.clone().extend(e.x,e.y,e.width,e.height)},xt.intersection=function(e){var t=e.x,n=e.y,i=t+e.width,r=n+e.height;return this.x>t&&(t=this.x),this.y>n&&(n=this.y),this.x+this.width<i&&(i=this.x+this.width),this.y+this.height<r&&(r=this.y+this.height),i<=t||r<=n?null:new St(t,n,i-t,r-n)},xt.intersects=function(e){return e.x<=this.x+this.width&&this.x<=e.x+e.width&&e.y<=this.y+this.height&&this.y<=e.y+e.height},xt.isEmpty=function(){return this.width<=0||this.height<=0},xt.clone=function(){return new St(this.x,this.y,this.width,this.height)},xt.toString=function(){return"[Rectangle (x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+")]"},Ct.default=St;var It,Tt,vt,Et,wt,At={},Lt={};function Dt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(Lt,"__esModule",{value:!0});var Mt=Lt.TOP=0,Nt=Lt.RIGHT=90,Pt=Lt.BOTTOM=180,Rt=Lt.LEFT=270;Lt.FACING=[Mt,Nt,Pt,Rt],Lt.FACING_TO_STRING=(Dt(It={},Mt,"top"),Dt(It,Nt,"right"),Dt(It,Pt,"bottom"),Dt(It,Rt,"left"),It),Lt.FACING_TO_MOD=(Dt(Tt={},Mt,[0,-1]),Dt(Tt,Nt,[1,0]),Dt(Tt,Pt,[0,1]),Dt(Tt,Rt,[-1,0]),Tt),Lt.FACING_INVERSE=(Dt(vt={},Mt,Pt),Dt(vt,Nt,Rt),Dt(vt,Pt,Mt),Dt(vt,Rt,Nt),vt),Lt.FACING_MOD_RIGHT=(Dt(Et={},Mt,Nt),Dt(Et,Nt,Pt),Dt(Et,Pt,Rt),Dt(Et,Rt,Mt),Et),Lt.FACING_MOD_LEFT=(Dt(wt={},Mt,Rt),Dt(wt,Nt,Mt),Dt(wt,Pt,Nt),Dt(wt,Rt,Pt),wt),Object.defineProperty(At,"__esModule",{value:!0});var Ot=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};At.iter_adjacent=function(e,t){var n=Ot(e,2),i=n[0],r=n[1];t([i-1,r]),t([i,r-1]),t([i+1,r]),t([i,r+1])},At.iter_2d=function(e,t){for(var n=0;n<e[1];n++)for(var i=0;i<e[0];i++)t([i,n])},At.iter_range=function(e,t,n){var i=void 0,r=void 0,o=void 0,a=void 0;e[0]<t[0]?(i=e[0],o=t[0]):(i=t[0],o=e[0]);e[1]<t[1]?(r=e[1],a=t[1]):(r=t[1],a=e[1]);for(var s=i;s<=o;s++)for(var l=r;l<=a;l++)n([s,l])},At.intersects=function(e,t,n,i){return!n[0]>e[0]+t[0]||n[0]+i[0]<e[0]||n[1]>e[1]+t[1]||n[1]+i[1]<t[1]},At.array_test=function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return!0;return!1},At.add=Gt,At.shift=kt,At.shift_left=function(e,t){return kt(e,(t-90+360)%360)},At.shift_right=function(e,t){return kt(e,(t+90+360)%360)};var Bt=Lt;function Gt(e,t){return[e[0]+t[0],e[1]+t[1]]}function kt(e,t){return Gt(e,Bt.FACING_TO_MOD[t])}Object.defineProperty(mt,"__esModule",{value:!0});var Ft=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},Wt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),zt=Vt(pt),Ht=Vt(Ct),Ut=At;function Vt(e){return e&&e.__esModule?e:{default:e}}var Yt=0,qt=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t=Object.assign({size:[1,1],position:[0,0],parent:null,max_exits:10,tag:""},t),Object.assign(this,t),this.options=t,this.id=Yt++,this.walls=new zt.default(this.size,!0),this.perimeter=[],this.exits=[],this.children=[]}return Wt(e,[{key:"is_exit",value:function(e){var t=Ft(e,2),n=t[0],i=t[1];return 0!==this.exits.filter((function(e){var t,r=(t=e,Array.isArray(t)?t:Array.from(t)),o=r[0],a=r[1];return r.slice(2),o===n&&a===i})).length}},{key:"get_non_wall_tiles",value:function(){var e=[];return this.walls.iter((function(t,n){n||e.push(t)})),e}},{key:"get_perimeter_by_facing",value:function(e){return this.perimeter.filter((function(t){var n=Ft(t,2),i=Ft(n[0],2);i[0],i[1];var r=n[1];return e===r}))}},{key:"get_inner_perimeter",value:function(){var e=this,t=[],n=void 0,i=void 0;return this.walls.iter((function(r,o){o||e.is_exit(r)||(n=!1,i=!1,(0,Ut.iter_adjacent)(r,(function(t){n=n||e.walls.get(t),i=i||e.is_exit(t)})),n&&!i&&t.push(r))})),t}},{key:"parent_pos",value:function(e){var t=Ft(e,2),n=t[0],i=t[1];return[this.position[0]+n,this.position[1]+i]}},{key:"global_pos",value:function(e){return e=this.parent_pos(e),this.parent&&(e=this.parent.global_pos(e)),e}},{key:"local_pos",value:function(e){return[e[0]-this.position[0],e[1]-this.position[1]]}},{key:"get_center_pos",value:function(){return[Math.floor(this.size[0]/2),Math.floor(this.size[1]/2)]}},{key:"add_perimeter",value:function(e,t,n){var i=this;(0,Ut.iter_range)(e,t,(function(e){i.perimeter.push([e,n])}))}},{key:"remove_perimeter",value:function(e){this.perimeter=this.perimeter.filter((function(t){var n=Ft(t,3),i=n[0],r=n[1];return n[2],!e.contains(i,r,1,1)}))}},{key:"intersects",value:function(e){return(0,Ut.intersects)(this.position,this.size,e.position,e.size)}},{key:"add_piece",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;(0,Ut.array_test)(this.children,(function(t){return t.id===e.id}))||(e.parent=this,t&&(e.position=t),this.children.push(e),this.paste_in(e))}},{key:"paste_in",value:function(e){var t=this;(0,Ut.iter_2d)(e.size,(function(n){e.walls.get(n)||t.walls.set(e.parent_pos(n),!1)}))}},{key:"add_exit",value:function(e,t){this.walls.set(e[0],!1),this.parent&&this.parent.paste_in(this),this.exits.push([e[0],e[1],t])}},{key:"print",value:function(){for(var e=0;e<this.size[1];e++){for(var t="",n=0;n<this.size[0];n++)this.start_pos&&this.start_pos[0]===n&&this.start_pos[1]===e?t+="s":t+=this.walls.get([n,e])?"x":" ";console.log(t)}}},{key:"rect",get:function(){return new Ht.default(this.position[0],this.position[1],this.size[0],this.size[1])}}]),e}();mt.default=qt,Object.defineProperty(it,"__esModule",{value:!0});var Kt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),jt=function e(t,n,i){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,i)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(i):void 0},Xt=$t(rt),Jt=$t(mt),Zt=$t(Ct),Qt=Lt;function $t(e){return e&&e.__esModule?e:{default:e}}var en=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.random=new Xt.default(n.seed),n.start_pos=[0,0],n.minx=n.size[0],n.maxx=0,n.miny=n.size[1],n.maxy=0,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Jt.default),Kt(t,[{key:"add_piece",value:function(e,n){jt(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"add_piece",this).call(this,e,n),this.minx=Math.min(this.minx,e.position[0]),this.maxx=Math.max(this.maxx,e.position[0]+e.size[0]),this.miny=Math.min(this.miny,e.position[1]),this.maxy=Math.max(this.maxy,e.position[1]+e.size[1])}},{key:"trim",value:function(){var e=this;this.size=[this.maxx-this.minx,this.maxy-this.miny],this.children.forEach((function(t){t.position=[t.position[0]-e.minx,t.position[1]-e.miny]})),this.start_pos=[this.start_pos[0]-this.minx,this.start_pos[1]-this.miny],this.walls=this.walls.get_square([this.minx,this.miny],this.size),this.minx=0,this.maxx=this.size[0],this.miny=0,this.maxy=this.size[1]}},{key:"generate",value:function(){throw new Error("not implemented")}},{key:"fits",value:function(e,t){var n=void 0,i=void 0,r=void 0;for(i=0;i<e.size[0];i++)for(r=0;r<e.size[1];r++)if(!1===(n=this.walls.get([t[0]+i,t[1]+r]))||null==n)return!1;return!0}},{key:"join_exits",value:function(e,t,n,i){e.add_exit(t,n),n.add_exit(i,e);var r=e.rect.intersection(n.rect);r&&(e.remove_perimeter(new Zt.default(e.local_pos([r[0],r[1]],[r.width,r.height]))),n.remove_perimeter(new Zt.default(n.local_pos([r[0],r[1]],[r.width,r.height]))))}},{key:"join",value:function(e,t,n,i){i||(i=this.random.choose(e.get_perimeter_by_facing(Qt.FACING_INVERSE[t[1]])));var r=e.parent_pos(i[0]),o=[r[0]-t[0][0],r[1]-t[0][1]];return!!this.fits(n,o)&&(this.join_exits(e,i,n,t),this.add_piece(n,o),!0)}},{key:"get_open_pieces",value:function(e){return e.filter((function(e){return e.exits.length<e.max_exits&&e.perimeter.length}))}}]),t}();it.default=en;var tn={},nn={};Object.defineProperty(nn,"__esModule",{value:!0});var rn=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},on=function(e){return e&&e.__esModule?e:{default:e}}(mt);var an=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e.room_size=e.size,e.size=[e.size[0]+2,e.size[1]+2],e=Object.assign({},{symmetric:!1},e);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(n.walls.set_square([1,1],n.room_size,!1,!0),n.symmetric){var i=n.get_center_pos(),r=rn(i,2),o=r[0],a=r[1];n.perimeter=[[[o,0],180],[[n.size[0]-1,a],270],[[o,n.size[1]-1],0],[[0,a],90]]}else n.add_perimeter([1,0],[n.size[0]-2,0],180),n.add_perimeter([0,1],[0,n.size[1]-2],90),n.add_perimeter([1,n.size[1]-1],[n.size[0]-2,n.size[1]-1],0),n.add_perimeter([n.size[0]-1,1],[n.size[0]-1,n.size[1]-2],270);return n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,on.default),t}();nn.default=an,Object.defineProperty(tn,"__esModule",{value:!0});var sn=function(e){return e&&e.__esModule?e:{default:e}}(nn);var ln=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=Object.assign({},{length:2,facing:0,max_exits:4},e)).size=0===e.facing||180===e.facing?[1,e.length]:[e.length,1];var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),i=n.size[0]-1,r=n.size[1]-1;return 180===n.facing?n.perimeter=[[[1,r],0],[[0,1],90],[[2,1],270],[[1,0],180]]:270===n.facing?n.perimeter=[[[0,1],90],[[i-1,0],180],[[i-1,2],0],[[i,1],270]]:0===n.facing?n.perimeter=[[[1,0],180],[[2,r-1],270],[[0,r-1],90],[[1,r],0]]:90===n.facing&&(n.perimeter=[[[i,1],270],[[1,2],0],[[1,0],180],[[0,1],90]]),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,sn.default),t}();tn.default=ln,Object.defineProperty(nt,"__esModule",{value:!0});var cn=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),hn=pn(it),un=pn(tn),dn=pn(nn),gn=Lt,mn=At;function pn(e){return e&&e.__esModule?e:{default:e}}var fn=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=Object.assign({},{max_iterations:50,size:[100,100],rooms:{initial:{min_size:[3,3],max_size:[3,3],max_exits:1},any:{min_size:[2,2],max_size:[5,5],max_exits:4}},max_corridor_length:6,min_corridor_length:2,corridor_density:.5,symmetric_rooms:!1,interconnects:1,max_interconnect_length:10,room_count:10},e);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.room_tags=Object.keys(n.rooms).filter((function(e){return"any"!==e&&"initial"!==e}));for(var i=n.room_tags.length;i<n.room_count;i++)n.room_tags.push("any");return n.rooms=[],n.corridors=[],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,hn.default),cn(t,[{key:"add_room",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=void 0,r=void 0;if(n)r=n,n=null;else{if(!(i=this.get_open_pieces(this.children))||!i.length)return console.log("ran out of choices connecting"),!1;r=this.random.choose(i)}if(t){if(this.join(r,t,e))return!0}else for(var o=e.perimeter.slice();o.length;)if(this.join(r,this.random.choose(o,!0),e))return!0;return!1}},{key:"new_corridor",value:function(){return new un.default({length:this.random.int(this.min_corridor_length,this.max_corridor_length),facing:this.random.choose(gn.FACING)})}},{key:"add_interconnect",value:function(){var e={},t=void 0,n=void 0,i=void 0;this.children.forEach((function(n){n.exits.length<n.max_exits&&n.perimeter.forEach((function(r){i=n.parent_pos(r[0]),t=i[0]+"_"+i[1],e[t]=[r,n]}))}));for(var r=void 0,o=void 0,a=void 0,s=void 0,l=this.children.length-1;l--;l>=0)if((r=this.children[l]).exits.length<r.max_exits)for(var c=0;c<r.perimeter.length;c++)for(n=r.perimeter[c],i=r.parent_pos(n[0]),o=-1;o<=this.max_interconnect_length&&this.walls.get(i)&&this.walls.get((0,mn.shift_left)(i,n[1]))&&this.walls.get((0,mn.shift_right)(i,n[1]));){if(t=i[0]+"_"+i[1],e[t]&&e[t][1].id!==r.id)return s=e[t][1],o>-1?(a=new un.default({length:o,facing:n[1]}),!!this.join(r,a.perimeter[0],a,n)&&(this.join_exits(s,e[t][0],a,a.perimeter[a.perimeter.length-1]),!0)):(this.join_exits(s,e[t][0],r,n),!0);i=(0,mn.shift)(i,n[1]),o++}}},{key:"new_room",value:function(e){e=e||this.random.choose(this.room_tags,!1);var t=this.options.rooms[e],n=new dn.default({size:this.random.vec(t.min_size,t.max_size),max_exits:t.max_exits,symmetric:this.symmetric_rooms,tag:e});return this.room_tags.splice(this.room_tags.indexOf(e),1),"initial"===e&&(this.initial_room=n),n}},{key:"generate",value:function(){var e=this.options.room_count-1,t=this.new_room(this.options.rooms.initial?"initial":void 0),n=Math.round(this.corridor_density*e);this.add_piece(t,this.options.rooms.initial&&this.options.rooms.initial.position?this.options.rooms.initial.position:this.get_center_pos());for(var i=void 0,r=this.max_iterations;(n||e)&&--r;)if((i=this.random.int(1,e+n))<=n){var o=this.new_corridor(),a=this.add_room(o,o.perimeter[0]);n--,e>0&&a&&(this.add_room(this.new_room(),null,o),e--)}else this.add_room(this.new_room()),e--;for(i=0;i<this.interconnects;i++)this.add_interconnect();return this.trim(),this.initial_room&&(this.start_pos=this.initial_room.global_pos(this.initial_room.get_center_pos())),r>0}}]),t}();nt.default=fn;var _n,yn,Cn=tt(nt.default),bn={exports:{}};_n=bn,yn=bn.exports,function(){var e=9007199254740992,t=-e,n="0123456789",i="abcdefghijklmnopqrstuvwxyz",r=i.toUpperCase(),o=n+"abcdef";function a(e){this.name="UnsupportedError",this.message=e||"This feature is not supported on this platform"}a.prototype=new Error,a.prototype.constructor=a;var s=Array.prototype.slice;function l(e){if(!(this instanceof l))return e||(e=null),null===e?new l:new l(e);if("function"==typeof e)return this.random=e,this;arguments.length&&(this.seed=0);for(var t=0;t<arguments.length;t++){var n=0;if("[object String]"===Object.prototype.toString.call(arguments[t]))for(var i=0;i<arguments[t].length;i++){for(var r=0,o=0;o<arguments[t].length;o++)r=arguments[t].charCodeAt(o)+(r<<6)+(r<<16)-r;n+=r}else n=arguments[t];this.seed+=(arguments.length-t)*n}return this.mt=this.mersenne_twister(this.seed),this.bimd5=this.blueimp_md5(),this.random=function(){return this.mt.random(this.seed)},this}function c(e,t){if(e=e||{},t)for(var n in t)void 0===e[n]&&(e[n]=t[n]);return e}function h(e,t){if(e)throw new RangeError(t)}l.prototype.VERSION="1.1.8";var u=function(){throw new Error("No Base64 encoder available.")};function d(e){this.c=e}function g(e){this.c=e}function m(e){this.c=e}function p(e){return function(){return this.natural(e)}}"function"==typeof btoa?u=btoa:"function"==typeof Buffer&&(u=function(e){return new Buffer(e).toString("base64")}),l.prototype.bool=function(e){return h((e=c(e,{likelihood:50})).likelihood<0||e.likelihood>100,"Chance: Likelihood accepts values from 0 to 100."),100*this.random()<e.likelihood},l.prototype.falsy=function(e){var t=(e=c(e,{pool:[!1,null,0,NaN,""]})).pool;return t[this.integer({min:0,max:t.length})]},l.prototype.animal=function(e){return void 0!==(e=c(e)).type?(h(!this.get("animals")[e.type.toLowerCase()],"Please pick from desert, ocean, grassland, forest, zoo, pets, farm."),this.pick(this.get("animals")[e.type.toLowerCase()])):this.pick(this.get("animals")[this.pick(["desert","forest","ocean","zoo","farm","pet","grassland"])])},l.prototype.character=function(e){var t,o,a="!@#$%^&*()[]";return t="lower"===(e=c(e)).casing?i:"upper"===e.casing?r:i+r,e.pool?o=e.pool:(o="",e.alpha&&(o+=t),e.numeric&&(o+=n),e.symbols&&(o+=a),o||(o=t+n+a)),o.charAt(this.natural({max:o.length-1}))},l.prototype.floating=function(t){h((t=c(t,{fixed:4})).fixed&&t.precision,"Chance: Cannot specify both fixed and precision.");var n=Math.pow(10,t.fixed),i=e/n,r=-i;h(t.min&&t.fixed&&t.min<r,"Chance: Min specified is out of range with fixed. Min should be, at least, "+r),h(t.max&&t.fixed&&t.max>i,"Chance: Max specified is out of range with fixed. Max should be, at most, "+i),t=c(t,{min:r,max:i});var o=(this.integer({min:t.min*n,max:t.max*n})/n).toFixed(t.fixed);return parseFloat(o)},l.prototype.integer=function(n){return h((n=c(n,{min:t,max:e})).min>n.max,"Chance: Min cannot be greater than Max."),Math.floor(this.random()*(n.max-n.min+1)+n.min)},l.prototype.natural=function(t){if("number"==typeof(t=c(t,{min:0,max:e})).numerals&&(h(t.numerals<1,"Chance: Numerals cannot be less than one."),t.min=Math.pow(10,t.numerals-1),t.max=Math.pow(10,t.numerals)-1),h(t.min<0,"Chance: Min cannot be less than zero."),t.exclude){for(var n in h(!Array.isArray(t.exclude),"Chance: exclude must be an array."),t.exclude)h(!Number.isInteger(t.exclude[n]),"Chance: exclude must be numbers.");var i=t.min+this.natural({max:t.max-t.min-t.exclude.length}),r=t.exclude.sort();for(var o in r){if(i<r[o])break;i++}return i}return this.integer(t)},l.prototype.prime=function(e){h((e=c(e,{min:0,max:1e4})).min<0,"Chance: Min cannot be less than zero."),h(e.min>e.max,"Chance: Min cannot be greater than Max.");var t=f.primes[f.primes.length-1];if(e.max>t)for(var n=t+2;n<=e.max;++n)this.is_prime(n)&&f.primes.push(n);var i=f.primes.filter((function(t){return t>=e.min&&t<=e.max}));return this.pick(i)},l.prototype.is_prime=function(e){if(e%1||e<2)return!1;if(e%2==0)return 2===e;if(e%3==0)return 3===e;for(var t=Math.sqrt(e),n=5;n<=t;n+=6)if(e%n==0||e%(n+2)==0)return!1;return!0},l.prototype.hex=function(t){h((t=c(t,{min:0,max:e,casing:"lower"})).min<0,"Chance: Min cannot be less than zero.");var n=this.natural({min:t.min,max:t.max});return"upper"===t.casing?n.toString(16).toUpperCase():n.toString(16)},l.prototype.letter=function(e){e=c(e,{casing:"lower"});var t=this.character({pool:"abcdefghijklmnopqrstuvwxyz"});return"upper"===e.casing&&(t=t.toUpperCase()),t},l.prototype.string=function(e){(e=c(e,{min:5,max:20})).length||(e.length=this.natural({min:e.min,max:e.max})),h(e.length<0,"Chance: Length cannot be less than zero.");var t=e.length;return this.n(this.character,t,e).join("")},d.prototype={substitute:function(){return this.c}},g.prototype={substitute:function(){if(!/[{}\\]/.test(this.c))throw new Error('Invalid escape sequence: "\\'+this.c+'".');return this.c}},m.prototype={replacers:{"#":function(e){return e.character({pool:n})},A:function(e){return e.character({pool:r})},a:function(e){return e.character({pool:i})}},substitute:function(e){var t=this.replacers[this.c];if(!t)throw new Error('Invalid replacement character: "'+this.c+'".');return t(e)}},l.prototype.template=function(e){if(!e)throw new Error("Template string is required");var t=this;return function(e){for(var t=[],n="identity",i=0;i<e.length;i++){var r=e[i];switch(n){case"escape":t.push(new g(r)),n="identity";break;case"identity":"{"===r?n="replace":"\\"===r?n="escape":t.push(new d(r));break;case"replace":"}"===r?n="identity":t.push(new m(r))}}return t}(e).map((function(e){return e.substitute(t)})).join("")},l.prototype.buffer=function(e){if("undefined"==typeof Buffer)throw new a("Sorry, the buffer() function is not supported on your platform");h((e=c(e,{length:this.natural({min:5,max:20})})).length<0,"Chance: Length cannot be less than zero.");var t=e.length,n=this.n(this.character,t,e);return Buffer.from(n)},l.prototype.capitalize=function(e){return e.charAt(0).toUpperCase()+e.substr(1)},l.prototype.mixin=function(e){for(var t in e)l.prototype[t]=e[t];return this},l.prototype.unique=function(e,t,n){h("function"!=typeof e,"Chance: The first argument must be a function.");var i=function(e,t){return-1!==e.indexOf(t)};n&&(i=n.comparator||i);for(var r,o=[],a=0,l=50*t,c=s.call(arguments,2);o.length<t;){var u=JSON.parse(JSON.stringify(c));if(i(o,r=e.apply(this,u))||(o.push(r),a=0),++a>l)throw new RangeError("Chance: num is likely too large for sample set")}return o},l.prototype.n=function(e,t){h("function"!=typeof e,"Chance: The first argument must be a function."),void 0===t&&(t=1);var n=t,i=[],r=s.call(arguments,2);for(n=Math.max(0,n);n--;null)i.push(e.apply(this,r));return i},l.prototype.pad=function(e,t,n){return n=n||"0",(e+="").length>=t?e:new Array(t-e.length+1).join(n)+e},l.prototype.pick=function(e,t){if(0===e.length)throw new RangeError("Chance: Cannot pick() from an empty array");return t&&1!==t?this.shuffle(e).slice(0,t):e[this.natural({max:e.length-1})]},l.prototype.pickone=function(e){if(0===e.length)throw new RangeError("Chance: Cannot pickone() from an empty array");return e[this.natural({max:e.length-1})]},l.prototype.pickset=function(e,t){if(0===t)return[];if(0===e.length)throw new RangeError("Chance: Cannot pickset() from an empty array");if(t<0)throw new RangeError("Chance: Count must be a positive number");if(t&&1!==t){var n=e.slice(0),i=n.length;return this.n((function(){var e=this.natural({max:--i}),t=n[e];return n[e]=n[i],t}),Math.min(i,t))}return[this.pickone(e)]},l.prototype.shuffle=function(e){for(var t,n,i=[],r=0,o=Number(e.length),a=(n=o,Array.apply(null,Array(n)).map((function(e,t){return t}))),s=o-1,l=0;l<o;l++)r=a[t=this.natural({max:s})],i[l]=e[r],a[t]=a[s],s-=1;return i},l.prototype.weighted=function(e,t,n){if(e.length!==t.length)throw new RangeError("Chance: Length of array and weights must match");for(var i,r=0,o=0;o<t.length;++o){if(i=t[o],isNaN(i))throw new RangeError("Chance: All weights must be numbers");i>0&&(r+=i)}if(0===r)throw new RangeError("Chance: No valid entries in array weights");var a,s=this.random()*r,l=0,c=-1;for(o=0;o<t.length;++o){if(l+=i=t[o],i>0){if(s<=l){a=o;break}c=o}o===t.length-1&&(a=c)}var h=e[a];return(n=void 0!==n&&n)&&(e.splice(a,1),t.splice(a,1)),h},l.prototype.paragraph=function(e){var t=(e=c(e)).sentences||this.natural({min:3,max:7}),n=this.n(this.sentence,t),i=!0===e.linebreak?"\n":" ";return n.join(i)},l.prototype.sentence=function(e){var t,n=(e=c(e)).words||this.natural({min:12,max:18}),i=e.punctuation;return t=this.n(this.word,n).join(" "),t=this.capitalize(t),!1===i||/^[.?;!:]$/.test(i)||(i="."),i&&(t+=i),t},l.prototype.syllable=function(e){for(var t,n=(e=c(e)).length||this.natural({min:2,max:3}),i="bcdfghjklmnprstvwz",r="aeiou",o=i+r,a="",s=0;s<n;s++)a+=t=0===s?this.character({pool:o}):-1===i.indexOf(t)?this.character({pool:i}):this.character({pool:r});return e.capitalize&&(a=this.capitalize(a)),a},l.prototype.word=function(e){h((e=c(e)).syllables&&e.length,"Chance: Cannot specify both syllables AND length.");var t=e.syllables||this.natural({min:1,max:3}),n="";if(e.length){do{n+=this.syllable()}while(n.length<e.length);n=n.substring(0,e.length)}else for(var i=0;i<t;i++)n+=this.syllable();return e.capitalize&&(n=this.capitalize(n)),n},l.prototype.age=function(e){var t;switch((e=c(e)).type){case"child":t={min:0,max:12};break;case"teen":t={min:13,max:19};break;case"adult":default:t={min:18,max:65};break;case"senior":t={min:65,max:100};break;case"all":t={min:0,max:100}}return this.natural(t)},l.prototype.birthday=function(e){var t=this.age(e),n=(new Date).getFullYear();if(e&&e.type){var i=new Date,r=new Date;i.setFullYear(n-t-1),r.setFullYear(n-t),e=c(e,{min:i,max:r})}else e=c(e,{year:n-t});return this.date(e)},l.prototype.cpf=function(e){e=c(e,{formatted:!0});var t=this.n(this.natural,9,{max:9}),n=2*t[8]+3*t[7]+4*t[6]+5*t[5]+6*t[4]+7*t[3]+8*t[2]+9*t[1]+10*t[0];(n=11-n%11)>=10&&(n=0);var i=2*n+3*t[8]+4*t[7]+5*t[6]+6*t[5]+7*t[4]+8*t[3]+9*t[2]+10*t[1]+11*t[0];(i=11-i%11)>=10&&(i=0);var r=""+t[0]+t[1]+t[2]+"."+t[3]+t[4]+t[5]+"."+t[6]+t[7]+t[8]+"-"+n+i;return e.formatted?r:r.replace(/\D/g,"")},l.prototype.cnpj=function(e){e=c(e,{formatted:!0});var t=this.n(this.natural,12,{max:12}),n=2*t[11]+3*t[10]+4*t[9]+5*t[8]+6*t[7]+7*t[6]+8*t[5]+9*t[4]+2*t[3]+3*t[2]+4*t[1]+5*t[0];(n=11-n%11)<2&&(n=0);var i=2*n+3*t[11]+4*t[10]+5*t[9]+6*t[8]+7*t[7]+8*t[6]+9*t[5]+2*t[4]+3*t[3]+4*t[2]+5*t[1]+6*t[0];(i=11-i%11)<2&&(i=0);var r=""+t[0]+t[1]+"."+t[2]+t[3]+t[4]+"."+t[5]+t[6]+t[7]+"/"+t[8]+t[9]+t[10]+t[11]+"-"+n+i;return e.formatted?r:r.replace(/\D/g,"")},l.prototype.first=function(e){return e=c(e,{gender:this.gender(),nationality:"en"}),this.pick(this.get("firstNames")[e.gender.toLowerCase()][e.nationality.toLowerCase()])},l.prototype.profession=function(e){return(e=c(e)).rank?this.pick(["Apprentice ","Junior ","Senior ","Lead "])+this.pick(this.get("profession")):this.pick(this.get("profession"))},l.prototype.company=function(){return this.pick(this.get("company"))},l.prototype.gender=function(e){return e=c(e,{extraGenders:[]}),this.pick(["Male","Female"].concat(e.extraGenders))},l.prototype.last=function(e){if("*"===(e=c(e,{nationality:"*"})).nationality){var t=[],n=this.get("lastNames");return Object.keys(n).forEach((function(e){t=t.concat(n[e])})),this.pick(t)}return this.pick(this.get("lastNames")[e.nationality.toLowerCase()])},l.prototype.israelId=function(){for(var e=this.string({pool:"0123456789",length:8}),t=0,n=0;n<e.length;n++){var i=e[n]*(n/2===parseInt(n/2)?1:2);i=this.pad(i,2).toString(),t+=i=parseInt(i[0])+parseInt(i[1])}return e+=(10-parseInt(t.toString().slice(-1))).toString().slice(-1)},l.prototype.mrz=function(e){var t,n,i,r,o=function(e){var t="<ABCDEFGHIJKLMNOPQRSTUVWXYXZ".split(""),n=[7,3,1],i=0;return"string"!=typeof e&&(e=e.toString()),e.split("").forEach((function(e,r){var o=t.indexOf(e);e=-1!==o?0===o?0:o+9:parseInt(e,10),i+=e*=n[r%n.length]})),i%10},a=this;return e=c(e,{first:this.first(),last:this.last(),passportNumber:this.integer({min:1e8,max:999999999}),dob:(t=a.birthday({type:"adult"}),[t.getFullYear().toString().substr(2),a.pad(t.getMonth()+1,2),a.pad(t.getDate(),2)].join("")),expiry:function(){var e=new Date;return[(e.getFullYear()+5).toString().substr(2),a.pad(e.getMonth()+1,2),a.pad(e.getDate(),2)].join("")}(),gender:"Female"===this.gender()?"F":"M",issuer:"GBR",nationality:"GBR"}),i=function(e){return new Array(e+1).join("<")},(r=["P<",(n=e).issuer,n.last.toUpperCase(),"<<",n.first.toUpperCase(),i(39-(n.last.length+n.first.length+2)),n.passportNumber,o(n.passportNumber),n.nationality,n.dob,o(n.dob),n.gender,n.expiry,o(n.expiry),i(14),o(i(14))].join(""))+o(r.substr(44,10)+r.substr(57,7)+r.substr(65,7))},l.prototype.name=function(e){e=c(e);var t,n=this.first(e),i=this.last(e);return t=e.middle?n+" "+this.first(e)+" "+i:e.middle_initial?n+" "+this.character({alpha:!0,casing:"upper"})+". "+i:n+" "+i,e.prefix&&(t=this.prefix(e)+" "+t),e.suffix&&(t=t+" "+this.suffix(e)),t},l.prototype.name_prefixes=function(e){var t=[{name:"Doctor",abbreviation:"Dr."}];return"male"!==(e=(e=e||"all").toLowerCase())&&"all"!==e||t.push({name:"Mister",abbreviation:"Mr."}),"female"!==e&&"all"!==e||(t.push({name:"Miss",abbreviation:"Miss"}),t.push({name:"Misses",abbreviation:"Mrs."})),t},l.prototype.prefix=function(e){return this.name_prefix(e)},l.prototype.name_prefix=function(e){return(e=c(e,{gender:"all"})).full?this.pick(this.name_prefixes(e.gender)).name:this.pick(this.name_prefixes(e.gender)).abbreviation},l.prototype.HIDN=function(){var e="";return e+=this.string({pool:"0123456789",length:6}),e+=this.string({pool:"ABCDEFGHIJKLMNOPQRSTUVWXYXZ",length:2})},l.prototype.ssn=function(e){var t="1234567890",n=(e=c(e,{ssnFour:!1,dashes:!0})).dashes?"-":"";return e.ssnFour?this.string({pool:t,length:4}):this.string({pool:t,length:3})+n+this.string({pool:t,length:2})+n+this.string({pool:t,length:4})},l.prototype.aadhar=function(e){var t="1234567890",n=(e=c(e,{onlyLastFour:!1,separatedByWhiteSpace:!0})).separatedByWhiteSpace?" ":"";return e.onlyLastFour?this.string({pool:t,length:4}):this.string({pool:t,length:4})+n+this.string({pool:t,length:4})+n+this.string({pool:t,length:4})},l.prototype.name_suffixes=function(){return[{name:"Doctor of Osteopathic Medicine",abbreviation:"D.O."},{name:"Doctor of Philosophy",abbreviation:"Ph.D."},{name:"Esquire",abbreviation:"Esq."},{name:"Junior",abbreviation:"Jr."},{name:"Juris Doctor",abbreviation:"J.D."},{name:"Master of Arts",abbreviation:"M.A."},{name:"Master of Business Administration",abbreviation:"M.B.A."},{name:"Master of Science",abbreviation:"M.S."},{name:"Medical Doctor",abbreviation:"M.D."},{name:"Senior",abbreviation:"Sr."},{name:"The Third",abbreviation:"III"},{name:"The Fourth",abbreviation:"IV"},{name:"Bachelor of Engineering",abbreviation:"B.E"},{name:"Bachelor of Technology",abbreviation:"B.TECH"}]},l.prototype.suffix=function(e){return this.name_suffix(e)},l.prototype.name_suffix=function(e){return(e=c(e)).full?this.pick(this.name_suffixes()).name:this.pick(this.name_suffixes()).abbreviation},l.prototype.nationalities=function(){return this.get("nationalities")},l.prototype.nationality=function(){return this.pick(this.nationalities()).name},l.prototype.android_id=function(){return"APA91"+this.string({pool:"0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_",length:178})},l.prototype.apple_token=function(){return this.string({pool:"abcdef1234567890",length:64})},l.prototype.wp8_anid2=function(){return u(this.hash({length:32}))},l.prototype.wp7_anid=function(){return"A="+this.guid().replace(/-/g,"").toUpperCase()+"&E="+this.hash({length:3})+"&W="+this.integer({min:0,max:9})},l.prototype.bb_pin=function(){return this.hash({length:8})},l.prototype.avatar=function(e){var t={protocol:null,email:null,fileExtension:null,size:null,fallback:null,rating:null};if(e)if("string"==typeof e)t.email=e,e={};else{if("object"!=typeof e)return null;if("Array"===e.constructor)return null}else t.email=this.email(),e={};return(t=c(e,t)).email||(t.email=this.email()),t.protocol={http:"http",https:"https"}[t.protocol]?t.protocol+":":"",t.size=parseInt(t.size,0)?t.size:"",t.rating={g:"g",pg:"pg",r:"r",x:"x"}[t.rating]?t.rating:"",t.fallback={404:"404",mm:"mm",identicon:"identicon",monsterid:"monsterid",wavatar:"wavatar",retro:"retro",blank:"blank"}[t.fallback]?t.fallback:"",t.fileExtension={bmp:"bmp",gif:"gif",jpg:"jpg",png:"png"}[t.fileExtension]?t.fileExtension:"",t.protocol+"//www.gravatar.com/avatar/"+this.bimd5.md5(t.email)+(t.fileExtension?"."+t.fileExtension:"")+(t.size||t.rating||t.fallback?"?":"")+(t.size?"&s="+t.size.toString():"")+(t.rating?"&r="+t.rating:"")+(t.fallback?"&d="+t.fallback:"")},l.prototype.color=function(e){function t(e,t){return[e,e,e].join(t||"")}function n(e){var n=e?"rgba":"rgb",i=e?","+this.floating({min:p,max:f}):"";return n+"("+(o?t(this.natural({min:a,max:s}),","):this.natural({min:u,max:d})+","+this.natural({min:g,max:m})+","+this.natural({max:255}))+i+")"}function i(n,i,r){var c=r?"#":"",p="";return o?(p=t(this.pad(this.hex({min:a,max:s}),2)),"shorthex"===e.format&&(p=t(this.hex({min:0,max:15})))):p="shorthex"===e.format?this.pad(this.hex({min:Math.floor(l/16),max:Math.floor(h/16)}),1)+this.pad(this.hex({min:Math.floor(u/16),max:Math.floor(d/16)}),1)+this.pad(this.hex({min:Math.floor(g/16),max:Math.floor(m/16)}),1):void 0!==l||void 0!==h||void 0!==u||void 0!==d||void 0!==g||void 0!==m?this.pad(this.hex({min:l,max:h}),2)+this.pad(this.hex({min:u,max:d}),2)+this.pad(this.hex({min:g,max:m}),2):this.pad(this.hex({min:a,max:s}),2)+this.pad(this.hex({min:a,max:s}),2)+this.pad(this.hex({min:a,max:s}),2),c+p}var r,o=(e=c(e,{format:this.pick(["hex","shorthex","rgb","rgba","0x","name"]),grayscale:!1,casing:"lower",min:0,max:255,min_red:void 0,max_red:void 0,min_green:void 0,max_green:void 0,min_blue:void 0,max_blue:void 0,min_alpha:0,max_alpha:1})).grayscale,a=e.min,s=e.max,l=e.min_red,h=e.max_red,u=e.min_green,d=e.max_green,g=e.min_blue,m=e.max_blue,p=e.min_alpha,f=e.max_alpha;if(void 0===e.min_red&&(l=a),void 0===e.max_red&&(h=s),void 0===e.min_green&&(u=a),void 0===e.max_green&&(d=s),void 0===e.min_blue&&(g=a),void 0===e.max_blue&&(m=s),void 0===e.min_alpha&&(p=0),void 0===e.max_alpha&&(f=1),o&&0===a&&255===s&&void 0!==l&&void 0!==h&&(a=(l+u+g)/3,s=(h+d+m)/3),"hex"===e.format)r=i.call(this,2,6,!0);else if("shorthex"===e.format)r=i.call(this,1,3,!0);else if("rgb"===e.format)r=n.call(this,!1);else if("rgba"===e.format)r=n.call(this,!0);else{if("0x"!==e.format){if("name"===e.format)return this.pick(this.get("colorNames"));throw new RangeError('Invalid format provided. Please provide one of "hex", "shorthex", "rgb", "rgba", "0x" or "name".')}r="0x"+i.call(this,2,6)}return"upper"===e.casing&&(r=r.toUpperCase()),r},l.prototype.domain=function(e){return e=c(e),this.word()+"."+(e.tld||this.tld())},l.prototype.email=function(e){return e=c(e),this.word({length:e.length})+"@"+(e.domain||this.domain())},l.prototype.fbid=function(){return"10000"+this.string({pool:"1234567890",length:11})},l.prototype.google_analytics=function(){return"UA-"+this.pad(this.natural({max:999999}),6)+"-"+this.pad(this.natural({max:99}),2)},l.prototype.hashtag=function(){return"#"+this.word()},l.prototype.ip=function(){return this.natural({min:1,max:254})+"."+this.natural({max:255})+"."+this.natural({max:255})+"."+this.natural({min:1,max:254})},l.prototype.ipv6=function(){return this.n(this.hash,8,{length:4}).join(":")},l.prototype.klout=function(){return this.natural({min:1,max:99})},l.prototype.mac=function(e){return e=c(e,{delimiter:":"}),this.pad(this.natural({max:255}).toString(16),2)+e.delimiter+this.pad(this.natural({max:255}).toString(16),2)+e.delimiter+this.pad(this.natural({max:255}).toString(16),2)+e.delimiter+this.pad(this.natural({max:255}).toString(16),2)+e.delimiter+this.pad(this.natural({max:255}).toString(16),2)+e.delimiter+this.pad(this.natural({max:255}).toString(16),2)},l.prototype.semver=function(e){e=c(e,{include_prerelease:!0});var t=this.pickone(["^","~","<",">","<=",">=","="]);e.range&&(t=e.range);var n="";return e.include_prerelease&&(n=this.weighted(["","-dev","-beta","-alpha"],[50,10,5,1])),t+this.rpg("3d10").join(".")+n},l.prototype.tlds=function(){return["com","org","edu","gov","co.uk","net","io","ac","ad","ae","af","ag","ai","al","am","ao","aq","ar","as","at","au","aw","ax","az","ba","bb","bd","be","bf","bg","bh","bi","bj","bm","bn","bo","br","bs","bt","bv","bw","by","bz","ca","cc","cd","cf","cg","ch","ci","ck","cl","cm","cn","co","cr","cu","cv","cw","cx","cy","cz","de","dj","dk","dm","do","dz","ec","ee","eg","eh","er","es","et","eu","fi","fj","fk","fm","fo","fr","ga","gb","gd","ge","gf","gg","gh","gi","gl","gm","gn","gp","gq","gr","gs","gt","gu","gw","gy","hk","hm","hn","hr","ht","hu","id","ie","il","im","in","io","iq","ir","is","it","je","jm","jo","jp","ke","kg","kh","ki","km","kn","kp","kr","kw","ky","kz","la","lb","lc","li","lk","lr","ls","lt","lu","lv","ly","ma","mc","md","me","mg","mh","mk","ml","mm","mn","mo","mp","mq","mr","ms","mt","mu","mv","mw","mx","my","mz","na","nc","ne","nf","ng","ni","nl","no","np","nr","nu","nz","om","pa","pe","pf","pg","ph","pk","pl","pm","pn","pr","ps","pt","pw","py","qa","re","ro","rs","ru","rw","sa","sb","sc","sd","se","sg","sh","si","sj","sk","sl","sm","sn","so","sr","ss","st","su","sv","sx","sy","sz","tc","td","tf","tg","th","tj","tk","tl","tm","tn","to","tp","tr","tt","tv","tw","tz","ua","ug","uk","us","uy","uz","va","vc","ve","vg","vi","vn","vu","wf","ws","ye","yt","za","zm","zw"]},l.prototype.tld=function(){return this.pick(this.tlds())},l.prototype.twitter=function(){return"@"+this.word()},l.prototype.url=function(e){var t=(e=c(e,{protocol:"http",domain:this.domain(e),domain_prefix:"",path:this.word(),extensions:[]})).extensions.length>0?"."+this.pick(e.extensions):"",n=e.domain_prefix?e.domain_prefix+"."+e.domain:e.domain;return e.protocol+"://"+n+"/"+e.path+t},l.prototype.port=function(){return this.integer({min:0,max:65535})},l.prototype.locale=function(e){return(e=c(e)).region?this.pick(this.get("locale_regions")):this.pick(this.get("locale_languages"))},l.prototype.locales=function(e){return(e=c(e)).region?this.get("locale_regions"):this.get("locale_languages")},l.prototype.loremPicsum=function(e){var t=(e=c(e,{width:500,height:500,greyscale:!1,blurred:!1})).greyscale?"g/":"",n=e.blurred?"/?blur":"/?random";return"https://picsum.photos/"+t+e.width+"/"+e.height+n},l.prototype.address=function(e){return e=c(e),this.natural({min:5,max:2e3})+" "+this.street(e)},l.prototype.altitude=function(e){return e=c(e,{fixed:5,min:0,max:8848}),this.floating({min:e.min,max:e.max,fixed:e.fixed})},l.prototype.areacode=function(e){var t=(e=c(e,{parens:!0})).exampleNumber?"555":this.natural({min:2,max:9}).toString()+this.natural({min:0,max:8}).toString()+this.natural({min:0,max:9}).toString();return e.parens?"("+t+")":t},l.prototype.city=function(){return this.capitalize(this.word({syllables:3}))},l.prototype.coordinates=function(e){return this.latitude(e)+", "+this.longitude(e)},l.prototype.countries=function(){return this.get("countries")},l.prototype.country=function(e){e=c(e);var t=this.pick(this.countries());return e.raw?t:e.full?t.name:t.abbreviation},l.prototype.depth=function(e){return e=c(e,{fixed:5,min:-10994,max:0}),this.floating({min:e.min,max:e.max,fixed:e.fixed})},l.prototype.geohash=function(e){return e=c(e,{length:7}),this.string({length:e.length,pool:"0123456789bcdefghjkmnpqrstuvwxyz"})},l.prototype.geojson=function(e){return this.latitude(e)+", "+this.longitude(e)+", "+this.altitude(e)},l.prototype.latitude=function(e){var[t,n,i]=["ddm","dms","dd"],r=(e=c(e,e&&e.format&&[t,n].includes(e.format.toLowerCase())?{min:0,max:89,fixed:4}:{fixed:5,min:-90,max:90,format:i})).format.toLowerCase();switch(r!==t&&r!==n||(h(e.min<0||e.min>89,"Chance: Min specified is out of range. Should be between 0 - 89"),h(e.max<0||e.max>89,"Chance: Max specified is out of range. Should be between 0 - 89"),h(e.fixed>4,"Chance: Fixed specified should be below or equal to 4")),r){case t:return this.integer({min:e.min,max:e.max})+"°"+this.floating({min:0,max:59,fixed:e.fixed});case n:return this.integer({min:e.min,max:e.max})+"°"+this.integer({min:0,max:59})+"’"+this.floating({min:0,max:59,fixed:e.fixed})+"”";default:return this.floating({min:e.min,max:e.max,fixed:e.fixed})}},l.prototype.longitude=function(e){var[t,n,i]=["ddm","dms","dd"],r=(e=c(e,e&&e.format&&[t,n].includes(e.format.toLowerCase())?{min:0,max:179,fixed:4}:{fixed:5,min:-180,max:180,format:i})).format.toLowerCase();switch(r!==t&&r!==n||(h(e.min<0||e.min>179,"Chance: Min specified is out of range. Should be between 0 - 179"),h(e.max<0||e.max>179,"Chance: Max specified is out of range. Should be between 0 - 179"),h(e.fixed>4,"Chance: Fixed specified should be below or equal to 4")),r){case t:return this.integer({min:e.min,max:e.max})+"°"+this.floating({min:0,max:59.9999,fixed:e.fixed});case n:return this.integer({min:e.min,max:e.max})+"°"+this.integer({min:0,max:59})+"’"+this.floating({min:0,max:59.9999,fixed:e.fixed})+"”";default:return this.floating({min:e.min,max:e.max,fixed:e.fixed})}},l.prototype.phone=function(e){var t,n,i=this,r=function(e){var t=[];return e.sections.forEach((function(e){t.push(i.string({pool:"0123456789",length:e}))})),e.area+t.join(" ")};switch((e=c(e,{formatted:!0,country:"us",mobile:!1,exampleNumber:!1})).formatted||(e.parens=!1),e.country){case"fr":e.mobile?(t=this.pick(["06","07"])+i.string({pool:"0123456789",length:8}),n=e.formatted?t.match(/../g).join(" "):t):(t=this.pick(["01"+this.pick(["30","34","39","40","41","42","43","44","45","46","47","48","49","53","55","56","58","60","64","69","70","72","73","74","75","76","77","78","79","80","81","82","83"])+i.string({pool:"0123456789",length:6}),"02"+this.pick(["14","18","22","23","28","29","30","31","32","33","34","35","36","37","38","40","41","43","44","45","46","47","48","49","50","51","52","53","54","56","57","61","62","69","72","76","77","78","85","90","96","97","98","99"])+i.string({pool:"0123456789",length:6}),"03"+this.pick(["10","20","21","22","23","24","25","26","27","28","29","39","44","45","51","52","54","55","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","80","81","82","83","84","85","86","87","88","89","90"])+i.string({pool:"0123456789",length:6}),"04"+this.pick(["11","13","15","20","22","26","27","30","32","34","37","42","43","44","50","56","57","63","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","88","89","90","91","92","93","94","95","97","98"])+i.string({pool:"0123456789",length:6}),"05"+this.pick(["08","16","17","19","24","31","32","33","34","35","40","45","46","47","49","53","55","56","57","58","59","61","62","63","64","65","67","79","81","82","86","87","90","94"])+i.string({pool:"0123456789",length:6}),"09"+i.string({pool:"0123456789",length:8})]),n=e.formatted?t.match(/../g).join(" "):t);break;case"uk":e.mobile?(t=this.pick([{area:"07"+this.pick(["4","5","7","8","9"]),sections:[2,6]},{area:"07624 ",sections:[6]}]),n=e.formatted?r(t):r(t).replace(" ","")):(t=this.pick([{area:"01"+this.character({pool:"234569"})+"1 ",sections:[3,4]},{area:"020 "+this.character({pool:"378"}),sections:[3,4]},{area:"023 "+this.character({pool:"89"}),sections:[3,4]},{area:"024 7",sections:[3,4]},{area:"028 "+this.pick(["25","28","37","71","82","90","92","95"]),sections:[2,4]},{area:"012"+this.pick(["04","08","54","76","97","98"])+" ",sections:[6]},{area:"013"+this.pick(["63","64","84","86"])+" ",sections:[6]},{area:"014"+this.pick(["04","20","60","61","80","88"])+" ",sections:[6]},{area:"015"+this.pick(["24","27","62","66"])+" ",sections:[6]},{area:"016"+this.pick(["06","29","35","47","59","95"])+" ",sections:[6]},{area:"017"+this.pick(["26","44","50","68"])+" ",sections:[6]},{area:"018"+this.pick(["27","37","84","97"])+" ",sections:[6]},{area:"019"+this.pick(["00","05","35","46","49","63","95"])+" ",sections:[6]}]),n=e.formatted?r(t):r(t).replace(" ","","g"));break;case"za":e.mobile?(t=this.pick(["060"+this.pick(["3","4","5","6","7","8","9"])+i.string({pool:"0123456789",length:6}),"061"+this.pick(["0","1","2","3","4","5","8"])+i.string({pool:"0123456789",length:6}),"06"+i.string({pool:"0123456789",length:7}),"071"+this.pick(["0","1","2","3","4","5","6","7","8","9"])+i.string({pool:"0123456789",length:6}),"07"+this.pick(["2","3","4","6","7","8","9"])+i.string({pool:"0123456789",length:7}),"08"+this.pick(["0","1","2","3","4","5"])+i.string({pool:"0123456789",length:7})]),n=e.formatted||t):(t=this.pick(["01"+this.pick(["0","1","2","3","4","5","6","7","8"])+i.string({pool:"0123456789",length:7}),"02"+this.pick(["1","2","3","4","7","8"])+i.string({pool:"0123456789",length:7}),"03"+this.pick(["1","2","3","5","6","9"])+i.string({pool:"0123456789",length:7}),"04"+this.pick(["1","2","3","4","5","6","7","8","9"])+i.string({pool:"0123456789",length:7}),"05"+this.pick(["1","3","4","6","7","8"])+i.string({pool:"0123456789",length:7})]),n=e.formatted||t);break;case"us":var o=this.areacode(e).toString(),a=this.natural({min:2,max:9}).toString()+this.natural({min:0,max:9}).toString()+this.natural({min:0,max:9}).toString(),s=this.natural({min:1e3,max:9999}).toString();n=e.formatted?o+" "+a+"-"+s:o+a+s;break;case"br":var l,h=this.pick(["11","12","13","14","15","16","17","18","19","21","22","24","27","28","31","32","33","34","35","37","38","41","42","43","44","45","46","47","48","49","51","53","54","55","61","62","63","64","65","66","67","68","69","71","73","74","75","77","79","81","82","83","84","85","86","87","88","89","91","92","93","94","95","96","97","98","99"]);l=e.mobile?"9"+i.string({pool:"0123456789",length:4}):this.natural({min:2e3,max:5999}).toString();var u=i.string({pool:"0123456789",length:4});n=e.formatted?"("+h+") "+l+"-"+u:h+l+u}return n},l.prototype.postal=function(){return this.character({pool:"XVTSRPNKLMHJGECBA"})+this.natural({max:9})+this.character({alpha:!0,casing:"upper"})+" "+(this.natural({max:9})+this.character({alpha:!0,casing:"upper"})+this.natural({max:9}))},l.prototype.postcode=function(){return this.pick(this.get("postcodeAreas")).code+this.natural({max:9})+(this.bool()?this.character({alpha:!0,casing:"upper"}):"")+" "+(this.natural({max:9})+(this.character({alpha:!0,casing:"upper"})+this.character({alpha:!0,casing:"upper"})))},l.prototype.counties=function(e){return e=c(e,{country:"uk"}),this.get("counties")[e.country.toLowerCase()]},l.prototype.county=function(e){return this.pick(this.counties(e)).name},l.prototype.provinces=function(e){return e=c(e,{country:"ca"}),this.get("provinces")[e.country.toLowerCase()]},l.prototype.province=function(e){return e&&e.full?this.pick(this.provinces(e)).name:this.pick(this.provinces(e)).abbreviation},l.prototype.state=function(e){return e&&e.full?this.pick(this.states(e)).name:this.pick(this.states(e)).abbreviation},l.prototype.states=function(e){var t;switch((e=c(e,{country:"us",us_states_and_dc:!0})).country.toLowerCase()){case"us":var n=this.get("us_states_and_dc"),i=this.get("territories"),r=this.get("armed_forces");t=[],e.us_states_and_dc&&(t=t.concat(n)),e.territories&&(t=t.concat(i)),e.armed_forces&&(t=t.concat(r));break;case"it":case"mx":t=this.get("country_regions")[e.country.toLowerCase()];break;case"uk":t=this.get("counties")[e.country.toLowerCase()]}return t},l.prototype.street=function(e){var t;switch((e=c(e,{country:"us",syllables:2})).country.toLowerCase()){case"us":t=this.word({syllables:e.syllables}),t=this.capitalize(t),t+=" ",t+=e.short_suffix?this.street_suffix(e).abbreviation:this.street_suffix(e).name;break;case"it":t=this.word({syllables:e.syllables}),t=this.capitalize(t),t=(e.short_suffix?this.street_suffix(e).abbreviation:this.street_suffix(e).name)+" "+t}return t},l.prototype.street_suffix=function(e){return e=c(e,{country:"us"}),this.pick(this.street_suffixes(e))},l.prototype.street_suffixes=function(e){return e=c(e,{country:"us"}),this.get("street_suffixes")[e.country.toLowerCase()]},l.prototype.zip=function(e){var t=this.n(this.natural,5,{max:9});return e&&!0===e.plusfour&&(t.push("-"),t=t.concat(this.n(this.natural,4,{max:9}))),t.join("")},l.prototype.ampm=function(){return this.bool()?"am":"pm"},l.prototype.date=function(e){var t,n;if(e&&(e.min||e.max)){var i=void 0!==(e=c(e,{american:!0,string:!1})).min?e.min.getTime():1,r=void 0!==e.max?e.max.getTime():864e13;n=new Date(this.integer({min:i,max:r}))}else{var o=this.month({raw:!0}),a=o.days;e&&e.month&&(a=this.get("months")[(e.month%12+12)%12].days),e=c(e,{year:parseInt(this.year(),10),month:o.numeric-1,day:this.natural({min:1,max:a}),hour:this.hour({twentyfour:!0}),minute:this.minute(),second:this.second(),millisecond:this.millisecond(),american:!0,string:!1}),n=new Date(e.year,e.month,e.day,e.hour,e.minute,e.second,e.millisecond)}return t=e.american?n.getMonth()+1+"/"+n.getDate()+"/"+n.getFullYear():n.getDate()+"/"+(n.getMonth()+1)+"/"+n.getFullYear(),e.string?t:n},l.prototype.hammertime=function(e){return this.date(e).getTime()},l.prototype.hour=function(e){return h((e=c(e,{min:e&&e.twentyfour?0:1,max:e&&e.twentyfour?23:12})).min<0,"Chance: Min cannot be less than 0."),h(e.twentyfour&&e.max>23,"Chance: Max cannot be greater than 23 for twentyfour option."),h(!e.twentyfour&&e.max>12,"Chance: Max cannot be greater than 12."),h(e.min>e.max,"Chance: Min cannot be greater than Max."),this.natural({min:e.min,max:e.max})},l.prototype.millisecond=function(){return this.natural({max:999})},l.prototype.minute=l.prototype.second=function(e){return h((e=c(e,{min:0,max:59})).min<0,"Chance: Min cannot be less than 0."),h(e.max>59,"Chance: Max cannot be greater than 59."),h(e.min>e.max,"Chance: Min cannot be greater than Max."),this.natural({min:e.min,max:e.max})},l.prototype.month=function(e){h((e=c(e,{min:1,max:12})).min<1,"Chance: Min cannot be less than 1."),h(e.max>12,"Chance: Max cannot be greater than 12."),h(e.min>e.max,"Chance: Min cannot be greater than Max.");var t=this.pick(this.months().slice(e.min-1,e.max));return e.raw?t:t.name},l.prototype.months=function(){return this.get("months")},l.prototype.second=function(){return this.natural({max:59})},l.prototype.timestamp=function(){return this.natural({min:1,max:parseInt((new Date).getTime()/1e3,10)})},l.prototype.weekday=function(e){var t=["Monday","Tuesday","Wednesday","Thursday","Friday"];return(e=c(e,{weekday_only:!1})).weekday_only||(t.push("Saturday"),t.push("Sunday")),this.pickone(t)},l.prototype.year=function(e){return(e=c(e,{min:(new Date).getFullYear()})).max=void 0!==e.max?e.max:e.min+100,this.natural(e).toString()},l.prototype.cc=function(e){var t,n,i;return n=(t=(e=c(e)).type?this.cc_type({name:e.type,raw:!0}):this.cc_type({raw:!0})).prefix.split(""),i=t.length-t.prefix.length-1,(n=n.concat(this.n(this.integer,i,{min:0,max:9}))).push(this.luhn_calculate(n.join(""))),n.join("")},l.prototype.cc_types=function(){return this.get("cc_types")},l.prototype.cc_type=function(e){e=c(e);var t=this.cc_types(),n=null;if(e.name){for(var i=0;i<t.length;i++)if(t[i].name===e.name||t[i].short_name===e.name){n=t[i];break}if(null===n)throw new RangeError("Chance: Credit card type '"+e.name+"' is not supported")}else n=this.pick(t);return e.raw?n:n.name},l.prototype.currency_types=function(){return this.get("currency_types")},l.prototype.currency=function(){return this.pick(this.currency_types())},l.prototype.timezones=function(){return this.get("timezones")},l.prototype.timezone=function(){return this.pick(this.timezones())},l.prototype.currency_pair=function(e){var t=this.unique(this.currency,2,{comparator:function(e,t){return e.reduce((function(e,n){return e||n.code===t.code}),!1)}});return e?t[0].code+"/"+t[1].code:t},l.prototype.dollar=function(e){e=c(e,{max:1e4,min:0});var t=this.floating({min:e.min,max:e.max,fixed:2}).toString(),n=t.split(".")[1];return void 0===n?t+=".00":n.length<2&&(t+="0"),t<0?"-$"+t.replace("-",""):"$"+t},l.prototype.euro=function(e){return Number(this.dollar(e).replace("$","")).toLocaleString()+"€"},l.prototype.exp=function(e){e=c(e);var t={};return t.year=this.exp_year(),t.year===(new Date).getFullYear().toString()?t.month=this.exp_month({future:!0}):t.month=this.exp_month(),e.raw?t:t.month+"/"+t.year},l.prototype.exp_month=function(e){e=c(e);var t,n,i=(new Date).getMonth()+1;if(e.future&&12!==i)do{t=this.month({raw:!0}).numeric,n=parseInt(t,10)}while(n<=i);else t=this.month({raw:!0}).numeric;return t},l.prototype.exp_year=function(){var e=(new Date).getMonth()+1,t=(new Date).getFullYear();return this.year({min:12===e?t+1:t,max:t+10})},l.prototype.vat=function(e){if("it"===(e=c(e,{country:"it"})).country.toLowerCase())return this.it_vat()},l.prototype.iban=function(){var e="ABCDEFGHIJKLMNOPQRSTUVWXYZ",t=e+"0123456789";return this.string({length:2,pool:e})+this.pad(this.integer({min:0,max:99}),2)+this.string({length:4,pool:t})+this.pad(this.natural(),this.natural({min:6,max:26}))},l.prototype.it_vat=function(){var e=this.natural({min:1,max:18e5});return(e=this.pad(e,7)+this.pad(this.pick(this.provinces({country:"it"})).code,3))+this.luhn_calculate(e)},l.prototype.cf=function(e){var t=(e=e||{}).gender?e.gender:this.gender(),n=e.first?e.first:this.first({gender:t,nationality:"it"}),i=e.last?e.last:this.last({nationality:"it"}),r=e.birthday?e.birthday:this.birthday(),o=e.city?e.city:this.pickone(["A","B","C","D","E","F","G","H","I","L","M","Z"])+this.pad(this.natural({max:999}),3),a=[],s=function(e,t){var n,i=[];return e.length<3?i=e.split("").concat("XXX".split("")).splice(0,3):((n=e.toUpperCase().split("").map((function(e){return-1!=="BCDFGHJKLMNPRSTVWZ".indexOf(e)?e:void 0})).join("")).length>3&&(n=t?n.substr(0,3):n[0]+n.substr(2,2)),n.length<3&&(i=n,n=e.toUpperCase().split("").map((function(e){return-1!=="AEIOU".indexOf(e)?e:void 0})).join("").substr(0,3-i.length)),i+=n),i};return a=a.concat(s(i,!0),s(n),function(e,t,n){return e.getFullYear().toString().substr(2)+["A","B","C","D","E","H","L","M","P","R","S","T"][e.getMonth()]+n.pad(e.getDate()+("female"===t.toLowerCase()?40:0),2)}(r,t,this),o.toUpperCase().split("")).join(""),(a+=function(e){for(var t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",n="ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ",i="ABCDEFGHIJKLMNOPQRSTUVWXYZ",r=0,o=0;o<15;o++)r+=o%2!=0?i.indexOf(n[t.indexOf(e[o])]):"BAKPLCQDREVOSFTGUHMINJWZYX".indexOf(n[t.indexOf(e[o])]);return i[r%26]}(a.toUpperCase())).toUpperCase()},l.prototype.pl_pesel=function(){for(var e=this.natural({min:1,max:9999999999}),t=this.pad(e,10).split(""),n=0;n<t.length;n++)t[n]=parseInt(t[n]);var i=(1*t[0]+3*t[1]+7*t[2]+9*t[3]+1*t[4]+3*t[5]+7*t[6]+9*t[7]+1*t[8]+3*t[9])%10;return 0!==i&&(i=10-i),t.join("")+i},l.prototype.pl_nip=function(){for(var e=this.natural({min:1,max:999999999}),t=this.pad(e,9).split(""),n=0;n<t.length;n++)t[n]=parseInt(t[n]);var i=(6*t[0]+5*t[1]+7*t[2]+2*t[3]+3*t[4]+4*t[5]+5*t[6]+6*t[7]+7*t[8])%11;return 10===i?this.pl_nip():t.join("")+i},l.prototype.pl_regon=function(){for(var e=this.natural({min:1,max:99999999}),t=this.pad(e,8).split(""),n=0;n<t.length;n++)t[n]=parseInt(t[n]);var i=(8*t[0]+9*t[1]+2*t[2]+3*t[3]+4*t[4]+5*t[5]+6*t[6]+7*t[7])%11;return 10===i&&(i=0),t.join("")+i},l.prototype.note=function(e){e=c(e,{notes:"flatKey"});var t={naturals:["C","D","E","F","G","A","B"],flats:["D♭","E♭","G♭","A♭","B♭"],sharps:["C♯","D♯","F♯","G♯","A♯"]};return t.all=t.naturals.concat(t.flats.concat(t.sharps)),t.flatKey=t.naturals.concat(t.flats),t.sharpKey=t.naturals.concat(t.sharps),this.pickone(t[e.notes])},l.prototype.midi_note=function(e){return e=c(e,{min:0,max:127}),this.integer({min:e.min,max:e.max})},l.prototype.chord_quality=function(e){var t=["maj","min","aug","dim"];return(e=c(e,{jazz:!0})).jazz&&(t=["maj7","min7","7","sus","dim","ø"]),this.pickone(t)},l.prototype.chord=function(e){return e=c(e),this.note(e)+this.chord_quality(e)},l.prototype.tempo=function(e){return e=c(e,{min:40,max:320}),this.integer({min:e.min,max:e.max})},l.prototype.coin=function(){return this.bool()?"heads":"tails"},l.prototype.d4=p({min:1,max:4}),l.prototype.d6=p({min:1,max:6}),l.prototype.d8=p({min:1,max:8}),l.prototype.d10=p({min:1,max:10}),l.prototype.d12=p({min:1,max:12}),l.prototype.d20=p({min:1,max:20}),l.prototype.d30=p({min:1,max:30}),l.prototype.d100=p({min:1,max:100}),l.prototype.rpg=function(e,t){if(t=c(t),e){var n=e.toLowerCase().split("d"),i=[];if(2!==n.length||!parseInt(n[0],10)||!parseInt(n[1],10))throw new Error("Chance: Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");for(var r=n[0];r>0;r--)i[r-1]=this.natural({min:1,max:n[1]});return void 0!==t.sum&&t.sum?i.reduce((function(e,t){return e+t})):i}throw new RangeError("Chance: A type of die roll must be included")},l.prototype.guid=function(e){e=c(e,{version:5});var t="abcdef1234567890";return this.string({pool:t,length:8})+"-"+this.string({pool:t,length:4})+"-"+e.version+this.string({pool:t,length:3})+"-"+this.string({pool:"ab89",length:1})+this.string({pool:t,length:3})+"-"+this.string({pool:t,length:12})},l.prototype.hash=function(e){var t="upper"===(e=c(e,{length:40,casing:"lower"})).casing?o.toUpperCase():o;return this.string({pool:t,length:e.length})},l.prototype.luhn_check=function(e){var t=e.toString();return+t.substring(t.length-1)===this.luhn_calculate(+t.substring(0,t.length-1))},l.prototype.luhn_calculate=function(e){for(var t,n=e.toString().split("").reverse(),i=0,r=0,o=n.length;o>r;++r)t=+n[r],r%2==0&&(t*=2)>9&&(t-=9),i+=t;return 9*i%10},l.prototype.md5=function(e){var t={str:"",key:null,raw:!1};if(e)if("string"==typeof e)t.str=e,e={};else{if("object"!=typeof e)return null;if("Array"===e.constructor)return null}else t.str=this.string(),e={};if(!(t=c(e,t)).str)throw new Error("A parameter is required to return an md5 hash.");return this.bimd5.md5(t.str,t.key,t.raw)},l.prototype.file=function(e){var t,n=e||{},i="fileExtension",r=Object.keys(this.get("fileExtension"));if(t=this.word({length:n.length}),n.extension)return t+"."+n.extension;if(n.extensions){if(Array.isArray(n.extensions))return t+"."+this.pickone(n.extensions);if(n.extensions.constructor===Object){var o=n.extensions,a=Object.keys(o);return t+"."+this.pickone(o[this.pickone(a)])}throw new Error("Chance: Extensions must be an Array or Object")}if(n.fileType){var s=n.fileType;if(-1!==r.indexOf(s))return t+"."+this.pickone(this.get(i)[s]);throw new RangeError("Chance: Expect file type value to be 'raster', 'vector', '3d' or 'document'")}return t+"."+this.pickone(this.get(i)[this.pickone(r)])};var f={firstNames:{male:{en:["James","John","Robert","Michael","William","David","Richard","Joseph","Charles","Thomas","Christopher","Daniel","Matthew","George","Donald","Anthony","Paul","Mark","Edward","Steven","Kenneth","Andrew","Brian","Joshua","Kevin","Ronald","Timothy","Jason","Jeffrey","Frank","Gary","Ryan","Nicholas","Eric","Stephen","Jacob","Larry","Jonathan","Scott","Raymond","Justin","Brandon","Gregory","Samuel","Benjamin","Patrick","Jack","Henry","Walter","Dennis","Jerry","Alexander","Peter","Tyler","Douglas","Harold","Aaron","Jose","Adam","Arthur","Zachary","Carl","Nathan","Albert","Kyle","Lawrence","Joe","Willie","Gerald","Roger","Keith","Jeremy","Terry","Harry","Ralph","Sean","Jesse","Roy","Louis","Billy","Austin","Bruce","Eugene","Christian","Bryan","Wayne","Russell","Howard","Fred","Ethan","Jordan","Philip","Alan","Juan","Randy","Vincent","Bobby","Dylan","Johnny","Phillip","Victor","Clarence","Ernest","Martin","Craig","Stanley","Shawn","Travis","Bradley","Leonard","Earl","Gabriel","Jimmy","Francis","Todd","Noah","Danny","Dale","Cody","Carlos","Allen","Frederick","Logan","Curtis","Alex","Joel","Luis","Norman","Marvin","Glenn","Tony","Nathaniel","Rodney","Melvin","Alfred","Steve","Cameron","Chad","Edwin","Caleb","Evan","Antonio","Lee","Herbert","Jeffery","Isaac","Derek","Ricky","Marcus","Theodore","Elijah","Luke","Jesus","Eddie","Troy","Mike","Dustin","Ray","Adrian","Bernard","Leroy","Angel","Randall","Wesley","Ian","Jared","Mason","Hunter","Calvin","Oscar","Clifford","Jay","Shane","Ronnie","Barry","Lucas","Corey","Manuel","Leo","Tommy","Warren","Jackson","Isaiah","Connor","Don","Dean","Jon","Julian","Miguel","Bill","Lloyd","Charlie","Mitchell","Leon","Jerome","Darrell","Jeremiah","Alvin","Brett","Seth","Floyd","Jim","Blake","Micheal","Gordon","Trevor","Lewis","Erik","Edgar","Vernon","Devin","Gavin","Jayden","Chris","Clyde","Tom","Derrick","Mario","Brent","Marc","Herman","Chase","Dominic","Ricardo","Franklin","Maurice","Max","Aiden","Owen","Lester","Gilbert","Elmer","Gene","Francisco","Glen","Cory","Garrett","Clayton","Sam","Jorge","Chester","Alejandro","Jeff","Harvey","Milton","Cole","Ivan","Andre","Duane","Landon"],it:["Adolfo","Alberto","Aldo","Alessandro","Alessio","Alfredo","Alvaro","Andrea","Angelo","Angiolo","Antonino","Antonio","Attilio","Benito","Bernardo","Bruno","Carlo","Cesare","Christian","Claudio","Corrado","Cosimo","Cristian","Cristiano","Daniele","Dario","David","Davide","Diego","Dino","Domenico","Duccio","Edoardo","Elia","Elio","Emanuele","Emiliano","Emilio","Enrico","Enzo","Ettore","Fabio","Fabrizio","Federico","Ferdinando","Fernando","Filippo","Francesco","Franco","Gabriele","Giacomo","Giampaolo","Giampiero","Giancarlo","Gianfranco","Gianluca","Gianmarco","Gianni","Gino","Giorgio","Giovanni","Giuliano","Giulio","Giuseppe","Graziano","Gregorio","Guido","Iacopo","Jacopo","Lapo","Leonardo","Lorenzo","Luca","Luciano","Luigi","Manuel","Marcello","Marco","Marino","Mario","Massimiliano","Massimo","Matteo","Mattia","Maurizio","Mauro","Michele","Mirko","Mohamed","Nello","Neri","Niccolò","Nicola","Osvaldo","Otello","Paolo","Pier Luigi","Piero","Pietro","Raffaele","Remo","Renato","Renzo","Riccardo","Roberto","Rolando","Romano","Salvatore","Samuele","Sandro","Sergio","Silvano","Simone","Stefano","Thomas","Tommaso","Ubaldo","Ugo","Umberto","Valerio","Valter","Vasco","Vincenzo","Vittorio"],nl:["Aaron","Abel","Adam","Adriaan","Albert","Alexander","Ali","Arjen","Arno","Bart","Bas","Bastiaan","Benjamin","Bob","Boris","Bram","Brent","Cas","Casper","Chris","Christiaan","Cornelis","Daan","Daley","Damian","Dani","Daniel","Daniël","David","Dean","Dirk","Dylan","Egbert","Elijah","Erik","Erwin","Evert","Ezra","Fabian","Fedde","Finn","Florian","Floris","Frank","Frans","Frederik","Freek","Geert","Gerard","Gerben","Gerrit","Gijs","Guus","Hans","Hendrik","Henk","Herman","Hidde","Hugo","Jaap","Jan Jaap","Jan-Willem","Jack","Jacob","Jan","Jason","Jasper","Jayden","Jelle","Jelte","Jens","Jeroen","Jesse","Jim","Job","Joep","Johannes","John","Jonathan","Joris","Joshua","Joël","Julian","Kees","Kevin","Koen","Lars","Laurens","Leendert","Lennard","Lodewijk","Luc","Luca","Lucas","Lukas","Luuk","Maarten","Marcus","Martijn","Martin","Matthijs","Maurits","Max","Mees","Melle","Mick","Mika","Milan","Mohamed","Mohammed","Morris","Muhammed","Nathan","Nick","Nico","Niek","Niels","Noah","Noud","Olivier","Oscar","Owen","Paul","Pepijn","Peter","Pieter","Pim","Quinten","Reinier","Rens","Robin","Ruben","Sam","Samuel","Sander","Sebastiaan","Sem","Sep","Sepp","Siem","Simon","Stan","Stef","Steven","Stijn","Sven","Teun","Thijmen","Thijs","Thomas","Tijn","Tim","Timo","Tobias","Tom","Victor","Vince","Willem","Wim","Wouter","Yusuf"],fr:["Aaron","Abdon","Abel","Abélard","Abelin","Abondance","Abraham","Absalon","Acace","Achaire","Achille","Adalard","Adalbald","Adalbéron","Adalbert","Adalric","Adam","Adegrin","Adel","Adelin","Andelin","Adelphe","Adam","Adéodat","Adhémar","Adjutor","Adolphe","Adonis","Adon","Adrien","Agapet","Agathange","Agathon","Agilbert","Agénor","Agnan","Aignan","Agrippin","Aimable","Aimé","Alain","Alban","Albin","Aubin","Albéric","Albert","Albertet","Alcibiade","Alcide","Alcée","Alcime","Aldonce","Aldric","Aldéric","Aleaume","Alexandre","Alexis","Alix","Alliaume","Aleaume","Almine","Almire","Aloïs","Alphée","Alphonse","Alpinien","Alverède","Amalric","Amaury","Amandin","Amant","Ambroise","Amédée","Amélien","Amiel","Amour","Anaël","Anastase","Anatole","Ancelin","Andéol","Andoche","André","Andoche","Ange","Angelin","Angilbe","Anglebert","Angoustan","Anicet","Anne","Annibal","Ansbert","Anselme","Anthelme","Antheaume","Anthime","Antide","Antoine","Antonius","Antonin","Apollinaire","Apollon","Aquilin","Arcade","Archambaud","Archambeau","Archange","Archibald","Arian","Ariel","Ariste","Aristide","Armand","Armel","Armin","Arnould","Arnaud","Arolde","Arsène","Arsinoé","Arthaud","Arthème","Arthur","Ascelin","Athanase","Aubry","Audebert","Audouin","Audran","Audric","Auguste","Augustin","Aurèle","Aurélien","Aurian","Auxence","Axel","Aymard","Aymeric","Aymon","Aymond","Balthazar","Baptiste","Barnabé","Barthélemy","Bartimée","Basile","Bastien","Baudouin","Bénigne","Benjamin","Benoît","Bérenger","Bérard","Bernard","Bertrand","Blaise","Bon","Boniface","Bouchard","Brice","Brieuc","Bruno","Brunon","Calixte","Calliste","Camélien","Camille","Camillien","Candide","Caribert","Carloman","Cassandre","Cassien","Cédric","Céleste","Célestin","Célien","Césaire","César","Charles","Charlemagne","Childebert","Chilpéric","Chrétien","Christian","Christodule","Christophe","Chrysostome","Clarence","Claude","Claudien","Cléandre","Clément","Clotaire","Côme","Constance","Constant","Constantin","Corentin","Cyprien","Cyriaque","Cyrille","Cyril","Damien","Daniel","David","Delphin","Denis","Désiré","Didier","Dieudonné","Dimitri","Dominique","Dorian","Dorothée","Edgard","Edmond","Édouard","Éleuthère","Élie","Élisée","Émeric","Émile","Émilien","Emmanuel","Enguerrand","Épiphane","Éric","Esprit","Ernest","Étienne","Eubert","Eudes","Eudoxe","Eugène","Eusèbe","Eustache","Évariste","Évrard","Fabien","Fabrice","Falba","Félicité","Félix","Ferdinand","Fiacre","Fidèle","Firmin","Flavien","Flodoard","Florent","Florentin","Florestan","Florian","Fortuné","Foulques","Francisque","François","Français","Franciscus","Francs","Frédéric","Fulbert","Fulcran","Fulgence","Gabin","Gabriel","Gaël","Garnier","Gaston","Gaspard","Gatien","Gaud","Gautier","Gédéon","Geoffroy","Georges","Géraud","Gérard","Gerbert","Germain","Gervais","Ghislain","Gilbert","Gilles","Girart","Gislebert","Gondebaud","Gonthier","Gontran","Gonzague","Grégoire","Guérin","Gui","Guillaume","Gustave","Guy","Guyot","Hardouin","Hector","Hédelin","Hélier","Henri","Herbert","Herluin","Hervé","Hilaire","Hildebert","Hincmar","Hippolyte","Honoré","Hubert","Hugues","Innocent","Isabeau","Isidore","Jacques","Japhet","Jason","Jean","Jeannel","Jeannot","Jérémie","Jérôme","Joachim","Joanny","Job","Jocelyn","Joël","Johan","Jonas","Jonathan","Joseph","Josse","Josselin","Jourdain","Jude","Judicaël","Jules","Julien","Juste","Justin","Lambert","Landry","Laurent","Lazare","Léandre","Léon","Léonard","Léopold","Leu","Loup","Leufroy","Libère","Liétald","Lionel","Loïc","Longin","Lorrain","Lorraine","Lothaire","Louis","Loup","Luc","Lucas","Lucien","Ludolphe","Ludovic","Macaire","Malo","Mamert","Manassé","Marc","Marceau","Marcel","Marcelin","Marius","Marseille","Martial","Martin","Mathurin","Matthias","Mathias","Matthieu","Maugis","Maurice","Mauricet","Maxence","Maxime","Maximilien","Mayeul","Médéric","Melchior","Mence","Merlin","Mérovée","Michaël","Michel","Moïse","Morgan","Nathan","Nathanaël","Narcisse","Néhémie","Nestor","Nestor","Nicéphore","Nicolas","Noé","Noël","Norbert","Normand","Normands","Octave","Odilon","Odon","Oger","Olivier","Oury","Pacôme","Palémon","Parfait","Pascal","Paterne","Patrice","Paul","Pépin","Perceval","Philémon","Philibert","Philippe","Philothée","Pie","Pierre","Pierrick","Prosper","Quentin","Raoul","Raphaël","Raymond","Régis","Réjean","Rémi","Renaud","René","Reybaud","Richard","Robert","Roch","Rodolphe","Rodrigue","Roger","Roland","Romain","Romuald","Roméo","Rome","Ronan","Roselin","Salomon","Samuel","Savin","Savinien","Scholastique","Sébastien","Séraphin","Serge","Séverin","Sidoine","Sigebert","Sigismond","Silvère","Simon","Siméon","Sixte","Stanislas","Stéphane","Stephan","Sylvain","Sylvestre","Tancrède","Tanguy","Taurin","Théodore","Théodose","Théophile","Théophraste","Thibault","Thibert","Thierry","Thomas","Timoléon","Timothée","Titien","Tonnin","Toussaint","Trajan","Tristan","Turold","Tim","Ulysse","Urbain","Valentin","Valère","Valéry","Venance","Venant","Venceslas","Vianney","Victor","Victorien","Victorin","Vigile","Vincent","Vital","Vitalien","Vivien","Waleran","Wandrille","Xavier","Xénophon","Yves","Zacharie","Zaché","Zéphirin"]},female:{en:["Mary","Emma","Elizabeth","Minnie","Margaret","Ida","Alice","Bertha","Sarah","Annie","Clara","Ella","Florence","Cora","Martha","Laura","Nellie","Grace","Carrie","Maude","Mabel","Bessie","Jennie","Gertrude","Julia","Hattie","Edith","Mattie","Rose","Catherine","Lillian","Ada","Lillie","Helen","Jessie","Louise","Ethel","Lula","Myrtle","Eva","Frances","Lena","Lucy","Edna","Maggie","Pearl","Daisy","Fannie","Josephine","Dora","Rosa","Katherine","Agnes","Marie","Nora","May","Mamie","Blanche","Stella","Ellen","Nancy","Effie","Sallie","Nettie","Della","Lizzie","Flora","Susie","Maud","Mae","Etta","Harriet","Sadie","Caroline","Katie","Lydia","Elsie","Kate","Susan","Mollie","Alma","Addie","Georgia","Eliza","Lulu","Nannie","Lottie","Amanda","Belle","Charlotte","Rebecca","Ruth","Viola","Olive","Amelia","Hannah","Jane","Virginia","Emily","Matilda","Irene","Kathryn","Esther","Willie","Henrietta","Ollie","Amy","Rachel","Sara","Estella","Theresa","Augusta","Ora","Pauline","Josie","Lola","Sophia","Leona","Anne","Mildred","Ann","Beulah","Callie","Lou","Delia","Eleanor","Barbara","Iva","Louisa","Maria","Mayme","Evelyn","Estelle","Nina","Betty","Marion","Bettie","Dorothy","Luella","Inez","Lela","Rosie","Allie","Millie","Janie","Cornelia","Victoria","Ruby","Winifred","Alta","Celia","Christine","Beatrice","Birdie","Harriett","Mable","Myra","Sophie","Tillie","Isabel","Sylvia","Carolyn","Isabelle","Leila","Sally","Ina","Essie","Bertie","Nell","Alberta","Katharine","Lora","Rena","Mina","Rhoda","Mathilda","Abbie","Eula","Dollie","Hettie","Eunice","Fanny","Ola","Lenora","Adelaide","Christina","Lelia","Nelle","Sue","Johanna","Lilly","Lucinda","Minerva","Lettie","Roxie","Cynthia","Helena","Hilda","Hulda","Bernice","Genevieve","Jean","Cordelia","Marian","Francis","Jeanette","Adeline","Gussie","Leah","Lois","Lura","Mittie","Hallie","Isabella","Olga","Phoebe","Teresa","Hester","Lida","Lina","Winnie","Claudia","Marguerite","Vera","Cecelia","Bess","Emilie","Rosetta","Verna","Myrtie","Cecilia","Elva","Olivia","Ophelia","Georgie","Elnora","Violet","Adele","Lily","Linnie","Loretta","Madge","Polly","Virgie","Eugenia","Lucile","Lucille","Mabelle","Rosalie"],it:["Ada","Adriana","Alessandra","Alessia","Alice","Angela","Anna","Anna Maria","Annalisa","Annita","Annunziata","Antonella","Arianna","Asia","Assunta","Aurora","Barbara","Beatrice","Benedetta","Bianca","Bruna","Camilla","Carla","Carlotta","Carmela","Carolina","Caterina","Catia","Cecilia","Chiara","Cinzia","Clara","Claudia","Costanza","Cristina","Daniela","Debora","Diletta","Dina","Donatella","Elena","Eleonora","Elisa","Elisabetta","Emanuela","Emma","Eva","Federica","Fernanda","Fiorella","Fiorenza","Flora","Franca","Francesca","Gabriella","Gaia","Gemma","Giada","Gianna","Gina","Ginevra","Giorgia","Giovanna","Giulia","Giuliana","Giuseppa","Giuseppina","Grazia","Graziella","Greta","Ida","Ilaria","Ines","Iolanda","Irene","Irma","Isabella","Jessica","Laura","Lea","Letizia","Licia","Lidia","Liliana","Lina","Linda","Lisa","Livia","Loretta","Luana","Lucia","Luciana","Lucrezia","Luisa","Manuela","Mara","Marcella","Margherita","Maria","Maria Cristina","Maria Grazia","Maria Luisa","Maria Pia","Maria Teresa","Marina","Marisa","Marta","Martina","Marzia","Matilde","Melissa","Michela","Milena","Mirella","Monica","Natalina","Nella","Nicoletta","Noemi","Olga","Paola","Patrizia","Piera","Pierina","Raffaella","Rebecca","Renata","Rina","Rita","Roberta","Rosa","Rosanna","Rossana","Rossella","Sabrina","Sandra","Sara","Serena","Silvana","Silvia","Simona","Simonetta","Sofia","Sonia","Stefania","Susanna","Teresa","Tina","Tiziana","Tosca","Valentina","Valeria","Vanda","Vanessa","Vanna","Vera","Veronica","Vilma","Viola","Virginia","Vittoria"],nl:["Ada","Arianne","Afke","Amanda","Amber","Amy","Aniek","Anita","Anja","Anna","Anne","Annelies","Annemarie","Annette","Anouk","Astrid","Aukje","Barbara","Bianca","Carla","Carlijn","Carolien","Chantal","Charlotte","Claudia","Daniëlle","Debora","Diane","Dora","Eline","Elise","Ella","Ellen","Emma","Esmee","Evelien","Esther","Erica","Eva","Femke","Fleur","Floor","Froukje","Gea","Gerda","Hanna","Hanneke","Heleen","Hilde","Ilona","Ina","Inge","Ingrid","Iris","Isabel","Isabelle","Janneke","Jasmijn","Jeanine","Jennifer","Jessica","Johanna","Joke","Julia","Julie","Karen","Karin","Katja","Kim","Lara","Laura","Lena","Lianne","Lieke","Lilian","Linda","Lisa","Lisanne","Lotte","Louise","Maaike","Manon","Marga","Maria","Marissa","Marit","Marjolein","Martine","Marleen","Melissa","Merel","Miranda","Michelle","Mirjam","Mirthe","Naomi","Natalie","Nienke","Nina","Noortje","Olivia","Patricia","Paula","Paulien","Ramona","Ria","Rianne","Roos","Rosanne","Ruth","Sabrina","Sandra","Sanne","Sara","Saskia","Silvia","Sofia","Sophie","Sonja","Suzanne","Tamara","Tess","Tessa","Tineke","Valerie","Vanessa","Veerle","Vera","Victoria","Wendy","Willeke","Yvonne","Zoë"],fr:["Abdon","Abel","Abigaëlle","Abigaïl","Acacius","Acanthe","Adalbert","Adalsinde","Adegrine","Adélaïde","Adèle","Adélie","Adeline","Adeltrude","Adolphe","Adonis","Adrastée","Adrehilde","Adrienne","Agathe","Agilbert","Aglaé","Aignan","Agneflète","Agnès","Agrippine","Aimé","Alaine","Alaïs","Albane","Albérade","Alberte","Alcide","Alcine","Alcyone","Aldegonde","Aleth","Alexandrine","Alexine","Alice","Aliénor","Aliette","Aline","Alix","Alizé","Aloïse","Aloyse","Alphonsine","Althée","Amaliane","Amalthée","Amande","Amandine","Amant","Amarande","Amaranthe","Amaryllis","Ambre","Ambroisie","Amélie","Améthyste","Aminte","Anaël","Anaïs","Anastasie","Anatole","Ancelin","Andrée","Anémone","Angadrême","Angèle","Angeline","Angélique","Angilbert","Anicet","Annabelle","Anne","Annette","Annick","Annie","Annonciade","Ansbert","Anstrudie","Anthelme","Antigone","Antoinette","Antonine","Aphélie","Apolline","Apollonie","Aquiline","Arabelle","Arcadie","Archange","Argine","Ariane","Aricie","Ariel","Arielle","Arlette","Armance","Armande","Armandine","Armelle","Armide","Armelle","Armin","Arnaud","Arsène","Arsinoé","Artémis","Arthur","Ascelin","Ascension","Assomption","Astarté","Astérie","Astrée","Astrid","Athalie","Athanasie","Athina","Aube","Albert","Aude","Audrey","Augustine","Aure","Aurélie","Aurélien","Aurèle","Aurore","Auxence","Aveline","Abigaëlle","Avoye","Axelle","Aymard","Azalée","Adèle","Adeline","Barbe","Basilisse","Bathilde","Béatrice","Béatrix","Bénédicte","Bérengère","Bernadette","Berthe","Bertille","Beuve","Blanche","Blanc","Blandine","Brigitte","Brune","Brunehilde","Callista","Camille","Capucine","Carine","Caroline","Cassandre","Catherine","Cécile","Céleste","Célestine","Céline","Chantal","Charlène","Charline","Charlotte","Chloé","Christelle","Christiane","Christine","Claire","Clara","Claude","Claudine","Clarisse","Clémence","Clémentine","Cléo","Clio","Clotilde","Coline","Conception","Constance","Coralie","Coraline","Corentine","Corinne","Cyrielle","Daniel","Daniel","Daphné","Débora","Delphine","Denise","Diane","Dieudonné","Dominique","Doriane","Dorothée","Douce","Édith","Edmée","Éléonore","Éliane","Élia","Éliette","Élisabeth","Élise","Ella","Élodie","Éloïse","Elsa","Émeline","Émérance","Émérentienne","Émérencie","Émilie","Emma","Emmanuelle","Emmelie","Ernestine","Esther","Estelle","Eudoxie","Eugénie","Eulalie","Euphrasie","Eusébie","Évangéline","Eva","Ève","Évelyne","Fanny","Fantine","Faustine","Félicie","Fernande","Flavie","Fleur","Flore","Florence","Florie","Fortuné","France","Francia","Françoise","Francine","Gabrielle","Gaëlle","Garance","Geneviève","Georgette","Gerberge","Germaine","Gertrude","Gisèle","Guenièvre","Guilhemine","Guillemette","Gustave","Gwenael","Hélène","Héloïse","Henriette","Hermine","Hermione","Hippolyte","Honorine","Hortense","Huguette","Ines","Irène","Irina","Iris","Isabeau","Isabelle","Iseult","Isolde","Ismérie","Jacinthe","Jacqueline","Jade","Janine","Jeanne","Jocelyne","Joëlle","Joséphine","Judith","Julia","Julie","Jules","Juliette","Justine","Katy","Kathy","Katie","Laura","Laure","Laureline","Laurence","Laurene","Lauriane","Laurianne","Laurine","Léa","Léna","Léonie","Léon","Léontine","Lorraine","Lucie","Lucienne","Lucille","Ludivine","Lydie","Lydie","Megane","Madeleine","Magali","Maguelone","Mallaury","Manon","Marceline","Margot","Marguerite","Marianne","Marie","Myriam","Marie","Marine","Marion","Marlène","Marthe","Martine","Mathilde","Maud","Maureen","Mauricette","Maxime","Mélanie","Melissa","Mélissandre","Mélisande","Mélodie","Michel","Micheline","Mireille","Miriam","Moïse","Monique","Morgane","Muriel","Mylène","Nadège","Nadine","Nathalie","Nicole","Nicolette","Nine","Noël","Noémie","Océane","Odette","Odile","Olive","Olivia","Olympe","Ombline","Ombeline","Ophélie","Oriande","Oriane","Ozanne","Pascale","Pascaline","Paule","Paulette","Pauline","Priscille","Prisca","Prisque","Pécine","Pélagie","Pénélope","Perrine","Pétronille","Philippine","Philomène","Philothée","Primerose","Prudence","Pulchérie","Quentine","Quiéta","Quintia","Quintilla","Rachel","Raphaëlle","Raymonde","Rebecca","Régine","Réjeanne","René","Rita","Rita","Rolande","Romane","Rosalie","Rose","Roseline","Sabine","Salomé","Sandra","Sandrine","Sarah","Ségolène","Séverine","Sibylle","Simone","Sixt","Solange","Soline","Solène","Sophie","Stéphanie","Suzanne","Sylvain","Sylvie","Tatiana","Thaïs","Théodora","Thérèse","Tiphaine","Ursule","Valentine","Valérie","Véronique","Victoire","Victorine","Vinciane","Violette","Virginie","Viviane","Xavière","Yolande","Ysaline","Yvette","Yvonne","Zélie","Zita","Zoé"]}},lastNames:{en:["Smith","Johnson","Williams","Jones","Brown","Davis","Miller","Wilson","Moore","Taylor","Anderson","Thomas","Jackson","White","Harris","Martin","Thompson","Garcia","Martinez","Robinson","Clark","Rodriguez","Lewis","Lee","Walker","Hall","Allen","Young","Hernandez","King","Wright","Lopez","Hill","Scott","Green","Adams","Baker","Gonzalez","Nelson","Carter","Mitchell","Perez","Roberts","Turner","Phillips","Campbell","Parker","Evans","Edwards","Collins","Stewart","Sanchez","Morris","Rogers","Reed","Cook","Morgan","Bell","Murphy","Bailey","Rivera","Cooper","Richardson","Cox","Howard","Ward","Torres","Peterson","Gray","Ramirez","James","Watson","Brooks","Kelly","Sanders","Price","Bennett","Wood","Barnes","Ross","Henderson","Coleman","Jenkins","Perry","Powell","Long","Patterson","Hughes","Flores","Washington","Butler","Simmons","Foster","Gonzales","Bryant","Alexander","Russell","Griffin","Diaz","Hayes","Myers","Ford","Hamilton","Graham","Sullivan","Wallace","Woods","Cole","West","Jordan","Owens","Reynolds","Fisher","Ellis","Harrison","Gibson","McDonald","Cruz","Marshall","Ortiz","Gomez","Murray","Freeman","Wells","Webb","Simpson","Stevens","Tucker","Porter","Hunter","Hicks","Crawford","Henry","Boyd","Mason","Morales","Kennedy","Warren","Dixon","Ramos","Reyes","Burns","Gordon","Shaw","Holmes","Rice","Robertson","Hunt","Black","Daniels","Palmer","Mills","Nichols","Grant","Knight","Ferguson","Rose","Stone","Hawkins","Dunn","Perkins","Hudson","Spencer","Gardner","Stephens","Payne","Pierce","Berry","Matthews","Arnold","Wagner","Willis","Ray","Watkins","Olson","Carroll","Duncan","Snyder","Hart","Cunningham","Bradley","Lane","Andrews","Ruiz","Harper","Fox","Riley","Armstrong","Carpenter","Weaver","Greene","Lawrence","Elliott","Chavez","Sims","Austin","Peters","Kelley","Franklin","Lawson","Fields","Gutierrez","Ryan","Schmidt","Carr","Vasquez","Castillo","Wheeler","Chapman","Oliver","Montgomery","Richards","Williamson","Johnston","Banks","Meyer","Bishop","McCoy","Howell","Alvarez","Morrison","Hansen","Fernandez","Garza","Harvey","Little","Burton","Stanley","Nguyen","George","Jacobs","Reid","Kim","Fuller","Lynch","Dean","Gilbert","Garrett","Romero","Welch","Larson","Frazier","Burke","Hanson","Day","Mendoza","Moreno","Bowman","Medina","Fowler","Brewer","Hoffman","Carlson","Silva","Pearson","Holland","Douglas","Fleming","Jensen","Vargas","Byrd","Davidson","Hopkins","May","Terry","Herrera","Wade","Soto","Walters","Curtis","Neal","Caldwell","Lowe","Jennings","Barnett","Graves","Jimenez","Horton","Shelton","Barrett","Obrien","Castro","Sutton","Gregory","McKinney","Lucas","Miles","Craig","Rodriquez","Chambers","Holt","Lambert","Fletcher","Watts","Bates","Hale","Rhodes","Pena","Beck","Newman","Haynes","McDaniel","Mendez","Bush","Vaughn","Parks","Dawson","Santiago","Norris","Hardy","Love","Steele","Curry","Powers","Schultz","Barker","Guzman","Page","Munoz","Ball","Keller","Chandler","Weber","Leonard","Walsh","Lyons","Ramsey","Wolfe","Schneider","Mullins","Benson","Sharp","Bowen","Daniel","Barber","Cummings","Hines","Baldwin","Griffith","Valdez","Hubbard","Salazar","Reeves","Warner","Stevenson","Burgess","Santos","Tate","Cross","Garner","Mann","Mack","Moss","Thornton","Dennis","McGee","Farmer","Delgado","Aguilar","Vega","Glover","Manning","Cohen","Harmon","Rodgers","Robbins","Newton","Todd","Blair","Higgins","Ingram","Reese","Cannon","Strickland","Townsend","Potter","Goodwin","Walton","Rowe","Hampton","Ortega","Patton","Swanson","Joseph","Francis","Goodman","Maldonado","Yates","Becker","Erickson","Hodges","Rios","Conner","Adkins","Webster","Norman","Malone","Hammond","Flowers","Cobb","Moody","Quinn","Blake","Maxwell","Pope","Floyd","Osborne","Paul","McCarthy","Guerrero","Lindsey","Estrada","Sandoval","Gibbs","Tyler","Gross","Fitzgerald","Stokes","Doyle","Sherman","Saunders","Wise","Colon","Gill","Alvarado","Greer","Padilla","Simon","Waters","Nunez","Ballard","Schwartz","McBride","Houston","Christensen","Klein","Pratt","Briggs","Parsons","McLaughlin","Zimmerman","French","Buchanan","Moran","Copeland","Roy","Pittman","Brady","McCormick","Holloway","Brock","Poole","Frank","Logan","Owen","Bass","Marsh","Drake","Wong","Jefferson","Park","Morton","Abbott","Sparks","Patrick","Norton","Huff","Clayton","Massey","Lloyd","Figueroa","Carson","Bowers","Roberson","Barton","Tran","Lamb","Harrington","Casey","Boone","Cortez","Clarke","Mathis","Singleton","Wilkins","Cain","Bryan","Underwood","Hogan","McKenzie","Collier","Luna","Phelps","McGuire","Allison","Bridges","Wilkerson","Nash","Summers","Atkins"],it:["Acciai","Aglietti","Agostini","Agresti","Ahmed","Aiazzi","Albanese","Alberti","Alessi","Alfani","Alinari","Alterini","Amato","Ammannati","Ancillotti","Andrei","Andreini","Andreoni","Angeli","Anichini","Antonelli","Antonini","Arena","Ariani","Arnetoli","Arrighi","Baccani","Baccetti","Bacci","Bacherini","Badii","Baggiani","Baglioni","Bagni","Bagnoli","Baldassini","Baldi","Baldini","Ballerini","Balli","Ballini","Balloni","Bambi","Banchi","Bandinelli","Bandini","Bani","Barbetti","Barbieri","Barchielli","Bardazzi","Bardelli","Bardi","Barducci","Bargellini","Bargiacchi","Barni","Baroncelli","Baroncini","Barone","Baroni","Baronti","Bartalesi","Bartoletti","Bartoli","Bartolini","Bartoloni","Bartolozzi","Basagni","Basile","Bassi","Batacchi","Battaglia","Battaglini","Bausi","Becagli","Becattini","Becchi","Becucci","Bellandi","Bellesi","Belli","Bellini","Bellucci","Bencini","Benedetti","Benelli","Beni","Benini","Bensi","Benucci","Benvenuti","Berlincioni","Bernacchioni","Bernardi","Bernardini","Berni","Bernini","Bertelli","Berti","Bertini","Bessi","Betti","Bettini","Biagi","Biagini","Biagioni","Biagiotti","Biancalani","Bianchi","Bianchini","Bianco","Biffoli","Bigazzi","Bigi","Biliotti","Billi","Binazzi","Bindi","Bini","Biondi","Bizzarri","Bocci","Bogani","Bolognesi","Bonaiuti","Bonanni","Bonciani","Boncinelli","Bondi","Bonechi","Bongini","Boni","Bonini","Borchi","Boretti","Borghi","Borghini","Borgioli","Borri","Borselli","Boschi","Bottai","Bracci","Braccini","Brandi","Braschi","Bravi","Brazzini","Breschi","Brilli","Brizzi","Brogelli","Brogi","Brogioni","Brunelli","Brunetti","Bruni","Bruno","Brunori","Bruschi","Bucci","Bucciarelli","Buccioni","Bucelli","Bulli","Burberi","Burchi","Burgassi","Burroni","Bussotti","Buti","Caciolli","Caiani","Calabrese","Calamai","Calamandrei","Caldini","Calo'","Calonaci","Calosi","Calvelli","Cambi","Camiciottoli","Cammelli","Cammilli","Campolmi","Cantini","Capanni","Capecchi","Caponi","Cappelletti","Cappelli","Cappellini","Cappugi","Capretti","Caputo","Carbone","Carboni","Cardini","Carlesi","Carletti","Carli","Caroti","Carotti","Carrai","Carraresi","Carta","Caruso","Casalini","Casati","Caselli","Casini","Castagnoli","Castellani","Castelli","Castellucci","Catalano","Catarzi","Catelani","Cavaciocchi","Cavallaro","Cavallini","Cavicchi","Cavini","Ceccarelli","Ceccatelli","Ceccherelli","Ceccherini","Cecchi","Cecchini","Cecconi","Cei","Cellai","Celli","Cellini","Cencetti","Ceni","Cenni","Cerbai","Cesari","Ceseri","Checcacci","Checchi","Checcucci","Cheli","Chellini","Chen","Cheng","Cherici","Cherubini","Chiaramonti","Chiarantini","Chiarelli","Chiari","Chiarini","Chiarugi","Chiavacci","Chiesi","Chimenti","Chini","Chirici","Chiti","Ciabatti","Ciampi","Cianchi","Cianfanelli","Cianferoni","Ciani","Ciapetti","Ciappi","Ciardi","Ciatti","Cicali","Ciccone","Cinelli","Cini","Ciobanu","Ciolli","Cioni","Cipriani","Cirillo","Cirri","Ciucchi","Ciuffi","Ciulli","Ciullini","Clemente","Cocchi","Cognome","Coli","Collini","Colombo","Colzi","Comparini","Conforti","Consigli","Conte","Conti","Contini","Coppini","Coppola","Corsi","Corsini","Corti","Cortini","Cosi","Costa","Costantini","Costantino","Cozzi","Cresci","Crescioli","Cresti","Crini","Curradi","D'Agostino","D'Alessandro","D'Amico","D'Angelo","Daddi","Dainelli","Dallai","Danti","Davitti","De Angelis","De Luca","De Marco","De Rosa","De Santis","De Simone","De Vita","Degl'Innocenti","Degli Innocenti","Dei","Del Lungo","Del Re","Di Marco","Di Stefano","Dini","Diop","Dobre","Dolfi","Donati","Dondoli","Dong","Donnini","Ducci","Dumitru","Ermini","Esposito","Evangelisti","Fabbri","Fabbrini","Fabbrizzi","Fabbroni","Fabbrucci","Fabiani","Facchini","Faggi","Fagioli","Failli","Faini","Falciani","Falcini","Falcone","Fallani","Falorni","Falsini","Falugiani","Fancelli","Fanelli","Fanetti","Fanfani","Fani","Fantappie'","Fantechi","Fanti","Fantini","Fantoni","Farina","Fattori","Favilli","Fedi","Fei","Ferrante","Ferrara","Ferrari","Ferraro","Ferretti","Ferri","Ferrini","Ferroni","Fiaschi","Fibbi","Fiesoli","Filippi","Filippini","Fini","Fioravanti","Fiore","Fiorentini","Fiorini","Fissi","Focardi","Foggi","Fontana","Fontanelli","Fontani","Forconi","Formigli","Forte","Forti","Fortini","Fossati","Fossi","Francalanci","Franceschi","Franceschini","Franchi","Franchini","Franci","Francini","Francioni","Franco","Frassineti","Frati","Fratini","Frilli","Frizzi","Frosali","Frosini","Frullini","Fusco","Fusi","Gabbrielli","Gabellini","Gagliardi","Galanti","Galardi","Galeotti","Galletti","Galli","Gallo","Gallori","Gambacciani","Gargani","Garofalo","Garuglieri","Gashi","Gasperini","Gatti","Gelli","Gensini","Gentile","Gentili","Geri","Gerini","Gheri","Ghini","Giachetti","Giachi","Giacomelli","Gianassi","Giani","Giannelli","Giannetti","Gianni","Giannini","Giannoni","Giannotti","Giannozzi","Gigli","Giordano","Giorgetti","Giorgi","Giovacchini","Giovannelli","Giovannetti","Giovannini","Giovannoni","Giuliani","Giunti","Giuntini","Giusti","Gonnelli","Goretti","Gori","Gradi","Gramigni","Grassi","Grasso","Graziani","Grazzini","Greco","Grifoni","Grillo","Grimaldi","Grossi","Gualtieri","Guarducci","Guarino","Guarnieri","Guasti","Guerra","Guerri","Guerrini","Guidi","Guidotti","He","Hoxha","Hu","Huang","Iandelli","Ignesti","Innocenti","Jin","La Rosa","Lai","Landi","Landini","Lanini","Lapi","Lapini","Lari","Lascialfari","Lastrucci","Latini","Lazzeri","Lazzerini","Lelli","Lenzi","Leonardi","Leoncini","Leone","Leoni","Lepri","Li","Liao","Lin","Linari","Lippi","Lisi","Livi","Lombardi","Lombardini","Lombardo","Longo","Lopez","Lorenzi","Lorenzini","Lorini","Lotti","Lu","Lucchesi","Lucherini","Lunghi","Lupi","Madiai","Maestrini","Maffei","Maggi","Maggini","Magherini","Magini","Magnani","Magnelli","Magni","Magnolfi","Magrini","Malavolti","Malevolti","Manca","Mancini","Manetti","Manfredi","Mangani","Mannelli","Manni","Mannini","Mannucci","Manuelli","Manzini","Marcelli","Marchese","Marchetti","Marchi","Marchiani","Marchionni","Marconi","Marcucci","Margheri","Mari","Mariani","Marilli","Marinai","Marinari","Marinelli","Marini","Marino","Mariotti","Marsili","Martelli","Martinelli","Martini","Martino","Marzi","Masi","Masini","Masoni","Massai","Materassi","Mattei","Matteini","Matteucci","Matteuzzi","Mattioli","Mattolini","Matucci","Mauro","Mazzanti","Mazzei","Mazzetti","Mazzi","Mazzini","Mazzocchi","Mazzoli","Mazzoni","Mazzuoli","Meacci","Mecocci","Meini","Melani","Mele","Meli","Mengoni","Menichetti","Meoni","Merlini","Messeri","Messina","Meucci","Miccinesi","Miceli","Micheli","Michelini","Michelozzi","Migliori","Migliorini","Milani","Miniati","Misuri","Monaco","Montagnani","Montagni","Montanari","Montelatici","Monti","Montigiani","Montini","Morandi","Morandini","Morelli","Moretti","Morganti","Mori","Morini","Moroni","Morozzi","Mugnai","Mugnaini","Mustafa","Naldi","Naldini","Nannelli","Nanni","Nannini","Nannucci","Nardi","Nardini","Nardoni","Natali","Ndiaye","Nencetti","Nencini","Nencioni","Neri","Nesi","Nesti","Niccolai","Niccoli","Niccolini","Nigi","Nistri","Nocentini","Noferini","Novelli","Nucci","Nuti","Nutini","Oliva","Olivieri","Olmi","Orlandi","Orlandini","Orlando","Orsini","Ortolani","Ottanelli","Pacciani","Pace","Paci","Pacini","Pagani","Pagano","Paggetti","Pagliai","Pagni","Pagnini","Paladini","Palagi","Palchetti","Palloni","Palmieri","Palumbo","Pampaloni","Pancani","Pandolfi","Pandolfini","Panerai","Panichi","Paoletti","Paoli","Paolini","Papi","Papini","Papucci","Parenti","Parigi","Parisi","Parri","Parrini","Pasquini","Passeri","Pecchioli","Pecorini","Pellegrini","Pepi","Perini","Perrone","Peruzzi","Pesci","Pestelli","Petri","Petrini","Petrucci","Pettini","Pezzati","Pezzatini","Piani","Piazza","Piazzesi","Piazzini","Piccardi","Picchi","Piccini","Piccioli","Pieraccini","Pieraccioni","Pieralli","Pierattini","Pieri","Pierini","Pieroni","Pietrini","Pini","Pinna","Pinto","Pinzani","Pinzauti","Piras","Pisani","Pistolesi","Poggesi","Poggi","Poggiali","Poggiolini","Poli","Pollastri","Porciani","Pozzi","Pratellesi","Pratesi","Prosperi","Pruneti","Pucci","Puccini","Puccioni","Pugi","Pugliese","Puliti","Querci","Quercioli","Raddi","Radu","Raffaelli","Ragazzini","Ranfagni","Ranieri","Rastrelli","Raugei","Raveggi","Renai","Renzi","Rettori","Ricci","Ricciardi","Ridi","Ridolfi","Rigacci","Righi","Righini","Rinaldi","Risaliti","Ristori","Rizzo","Rocchi","Rocchini","Rogai","Romagnoli","Romanelli","Romani","Romano","Romei","Romeo","Romiti","Romoli","Romolini","Rontini","Rosati","Roselli","Rosi","Rossetti","Rossi","Rossini","Rovai","Ruggeri","Ruggiero","Russo","Sabatini","Saccardi","Sacchetti","Sacchi","Sacco","Salerno","Salimbeni","Salucci","Salvadori","Salvestrini","Salvi","Salvini","Sanesi","Sani","Sanna","Santi","Santini","Santoni","Santoro","Santucci","Sardi","Sarri","Sarti","Sassi","Sbolci","Scali","Scarpelli","Scarselli","Scopetani","Secci","Selvi","Senatori","Senesi","Serafini","Sereni","Serra","Sestini","Sguanci","Sieni","Signorini","Silvestri","Simoncini","Simonetti","Simoni","Singh","Sodi","Soldi","Somigli","Sorbi","Sorelli","Sorrentino","Sottili","Spina","Spinelli","Staccioli","Staderini","Stefanelli","Stefani","Stefanini","Stella","Susini","Tacchi","Tacconi","Taddei","Tagliaferri","Tamburini","Tanganelli","Tani","Tanini","Tapinassi","Tarchi","Tarchiani","Targioni","Tassi","Tassini","Tempesti","Terzani","Tesi","Testa","Testi","Tilli","Tinti","Tirinnanzi","Toccafondi","Tofanari","Tofani","Tognaccini","Tonelli","Tonini","Torelli","Torrini","Tosi","Toti","Tozzi","Trambusti","Trapani","Tucci","Turchi","Ugolini","Ulivi","Valente","Valenti","Valentini","Vangelisti","Vanni","Vannini","Vannoni","Vannozzi","Vannucchi","Vannucci","Ventura","Venturi","Venturini","Vestri","Vettori","Vichi","Viciani","Vieri","Vigiani","Vignoli","Vignolini","Vignozzi","Villani","Vinci","Visani","Vitale","Vitali","Viti","Viviani","Vivoli","Volpe","Volpi","Wang","Wu","Xu","Yang","Ye","Zagli","Zani","Zanieri","Zanobini","Zecchi","Zetti","Zhang","Zheng","Zhou","Zhu","Zingoni","Zini","Zoppi"],nl:["Albers","Alblas","Appelman","Baars","Baas","Bakker","Blank","Bleeker","Blok","Blom","Boer","Boers","Boldewijn","Boon","Boot","Bos","Bosch","Bosma","Bosman","Bouma","Bouman","Bouwman","Brands","Brouwer","Burger","Buijs","Buitenhuis","Ceder","Cohen","Dekker","Dekkers","Dijkman","Dijkstra","Driessen","Drost","Engel","Evers","Faber","Franke","Gerritsen","Goedhart","Goossens","Groen","Groenenberg","Groot","Haan","Hart","Heemskerk","Hendriks","Hermans","Hoekstra","Hofman","Hopman","Huisman","Jacobs","Jansen","Janssen","Jonker","Jaspers","Keijzer","Klaassen","Klein","Koek","Koenders","Kok","Kool","Koopman","Koopmans","Koning","Koster","Kramer","Kroon","Kuijpers","Kuiper","Kuipers","Kurt","Koster","Kwakman","Los","Lubbers","Maas","Markus","Martens","Meijer","Mol","Molenaar","Mulder","Nieuwenhuis","Peeters","Peters","Pengel","Pieters","Pool","Post","Postma","Prins","Pronk","Reijnders","Rietveld","Roest","Roos","Sanders","Schaap","Scheffer","Schenk","Schilder","Schipper","Schmidt","Scholten","Schouten","Schut","Schutte","Schuurman","Simons","Smeets","Smit","Smits","Snel","Swinkels","Tas","Terpstra","Timmermans","Tol","Tromp","Troost","Valk","Veenstra","Veldkamp","Verbeek","Verheul","Verhoeven","Vermeer","Vermeulen","Verweij","Vink","Visser","Voorn","Vos","Wagenaar","Wiersema","Willems","Willemsen","Witteveen","Wolff","Wolters","Zijlstra","Zwart","de Beer","de Boer","de Bruijn","de Bruin","de Graaf","de Groot","de Haan","de Haas","de Jager","de Jong","de Jonge","de Koning","de Lange","de Leeuw","de Ridder","de Rooij","de Ruiter","de Vos","de Vries","de Waal","de Wit","de Zwart","van Beek","van Boven","van Dam","van Dijk","van Dongen","van Doorn","van Egmond","van Eijk","van Es","van Gelder","van Gelderen","van Houten","van Hulst","van Kempen","van Kesteren","van Leeuwen","van Loon","van Mill","van Noord","van Ommen","van Ommeren","van Oosten","van Oostveen","van Rijn","van Schaik","van Veen","van Vliet","van Wijk","van Wijngaarden","van den Poel","van de Pol","van den Ploeg","van de Ven","van den Berg","van den Bosch","van den Brink","van den Broek","van den Heuvel","van der Heijden","van der Horst","van der Hulst","van der Kroon","van der Laan","van der Linden","van der Meer","van der Meij","van der Meulen","van der Molen","van der Sluis","van der Spek","van der Veen","van der Velde","van der Velden","van der Vliet","van der Wal"],uk:["Smith","Jones","Williams","Taylor","Brown","Davies","Evans","Wilson","Thomas","Johnson","Roberts","Robinson","Thompson","Wright","Walker","White","Edwards","Hughes","Green","Hall","Lewis","Harris","Clarke","Patel","Jackson","Wood","Turner","Martin","Cooper","Hill","Ward","Morris","Moore","Clark","Lee","King","Baker","Harrison","Morgan","Allen","James","Scott","Phillips","Watson","Davis","Parker","Price","Bennett","Young","Griffiths","Mitchell","Kelly","Cook","Carter","Richardson","Bailey","Collins","Bell","Shaw","Murphy","Miller","Cox","Richards","Khan","Marshall","Anderson","Simpson","Ellis","Adams","Singh","Begum","Wilkinson","Foster","Chapman","Powell","Webb","Rogers","Gray","Mason","Ali","Hunt","Hussain","Campbell","Matthews","Owen","Palmer","Holmes","Mills","Barnes","Knight","Lloyd","Butler","Russell","Barker","Fisher","Stevens","Jenkins","Murray","Dixon","Harvey","Graham","Pearson","Ahmed","Fletcher","Walsh","Kaur","Gibson","Howard","Andrews","Stewart","Elliott","Reynolds","Saunders","Payne","Fox","Ford","Pearce","Day","Brooks","West","Lawrence","Cole","Atkinson","Bradley","Spencer","Gill","Dawson","Ball","Burton","O'brien","Watts","Rose","Booth","Perry","Ryan","Grant","Wells","Armstrong","Francis","Rees","Hayes","Hart","Hudson","Newman","Barrett","Webster","Hunter","Gregory","Carr","Lowe","Page","Marsh","Riley","Dunn","Woods","Parsons","Berry","Stone","Reid","Holland","Hawkins","Harding","Porter","Robertson","Newton","Oliver","Reed","Kennedy","Williamson","Bird","Gardner","Shah","Dean","Lane","Cooke","Bates","Henderson","Parry","Burgess","Bishop","Walton","Burns","Nicholson","Shepherd","Ross","Cross","Long","Freeman","Warren","Nicholls","Hamilton","Byrne","Sutton","Mcdonald","Yates","Hodgson","Robson","Curtis","Hopkins","O'connor","Harper","Coleman","Watkins","Moss","Mccarthy","Chambers","O'neill","Griffin","Sharp","Hardy","Wheeler","Potter","Osborne","Johnston","Gordon","Doyle","Wallace","George","Jordan","Hutchinson","Rowe","Burke","May","Pritchard","Gilbert","Willis","Higgins","Read","Miles","Stevenson","Stephenson","Hammond","Arnold","Buckley","Walters","Hewitt","Barber","Nelson","Slater","Austin","Sullivan","Whitehead","Mann","Frost","Lambert","Stephens","Blake","Akhtar","Lynch","Goodwin","Barton","Woodward","Thomson","Cunningham","Quinn","Barnett","Baxter","Bibi","Clayton","Nash","Greenwood","Jennings","Holt","Kemp","Poole","Gallagher","Bond","Stokes","Tucker","Davidson","Fowler","Heath","Norman","Middleton","Lawson","Banks","French","Stanley","Jarvis","Gibbs","Ferguson","Hayward","Carroll","Douglas","Dickinson","Todd","Barlow","Peters","Lucas","Knowles","Hartley","Miah","Simmons","Morton","Alexander","Field","Morrison","Norris","Townsend","Preston","Hancock","Thornton","Baldwin","Burrows","Briggs","Parkinson","Reeves","Macdonald","Lamb","Black","Abbott","Sanders","Thorpe","Holden","Tomlinson","Perkins","Ashton","Rhodes","Fuller","Howe","Bryant","Vaughan","Dale","Davey","Weston","Bartlett","Whittaker","Davison","Kent","Skinner","Birch","Morley","Daniels","Glover","Howell","Cartwright","Pugh","Humphreys","Goddard","Brennan","Wall","Kirby","Bowen","Savage","Bull","Wong","Dobson","Smart","Wilkins","Kirk","Fraser","Duffy","Hicks","Patterson","Bradshaw","Little","Archer","Warner","Waters","O'sullivan","Farrell","Brookes","Atkins","Kay","Dodd","Bentley","Flynn","John","Schofield","Short","Haynes","Wade","Butcher","Henry","Sanderson","Crawford","Sheppard","Bolton","Coates","Giles","Gould","Houghton","Gibbons","Pratt","Manning","Law","Hooper","Noble","Dyer","Rahman","Clements","Moran","Sykes","Chan","Doherty","Connolly","Joyce","Franklin","Hobbs","Coles","Herbert","Steele","Kerr","Leach","Winter","Owens","Duncan","Naylor","Fleming","Horton","Finch","Fitzgerald","Randall","Carpenter","Marsden","Browne","Garner","Pickering","Hale","Dennis","Vincent","Chadwick","Chandler","Sharpe","Nolan","Lyons","Hurst","Collier","Peacock","Howarth","Faulkner","Rice","Pollard","Welch","Norton","Gough","Sinclair","Blackburn","Bryan","Conway","Power","Cameron","Daly","Allan","Hanson","Gardiner","Boyle","Myers","Turnbull","Wallis","Mahmood","Sims","Swift","Iqbal","Pope","Brady","Chamberlain","Rowley","Tyler","Farmer","Metcalfe","Hilton","Godfrey","Holloway","Parkin","Bray","Talbot","Donnelly","Nixon","Charlton","Benson","Whitehouse","Barry","Hope","Lord","North","Storey","Connor","Potts","Bevan","Hargreaves","Mclean","Mistry","Bruce","Howells","Hyde","Parkes","Wyatt","Fry","Lees","O'donnell","Craig","Forster","Mckenzie","Humphries","Mellor","Carey","Ingram","Summers","Leonard"],de:["Müller","Schmidt","Schneider","Fischer","Weber","Meyer","Wagner","Becker","Schulz","Hoffmann","Schäfer","Koch","Bauer","Richter","Klein","Wolf","Schröder","Neumann","Schwarz","Zimmermann","Braun","Krüger","Hofmann","Hartmann","Lange","Schmitt","Werner","Schmitz","Krause","Meier","Lehmann","Schmid","Schulze","Maier","Köhler","Herrmann","König","Walter","Mayer","Huber","Kaiser","Fuchs","Peters","Lang","Scholz","Möller","Weiß","Jung","Hahn","Schubert","Vogel","Friedrich","Keller","Günther","Frank","Berger","Winkler","Roth","Beck","Lorenz","Baumann","Franke","Albrecht","Schuster","Simon","Ludwig","Böhm","Winter","Kraus","Martin","Schumacher","Krämer","Vogt","Stein","Jäger","Otto","Sommer","Groß","Seidel","Heinrich","Brandt","Haas","Schreiber","Graf","Schulte","Dietrich","Ziegler","Kuhn","Kühn","Pohl","Engel","Horn","Busch","Bergmann","Thomas","Voigt","Sauer","Arnold","Wolff","Pfeiffer"],jp:["Sato","Suzuki","Takahashi","Tanaka","Watanabe","Ito","Yamamoto","Nakamura","Kobayashi","Kato","Yoshida","Yamada","Sasaki","Yamaguchi","Saito","Matsumoto","Inoue","Kimura","Hayashi","Shimizu","Yamazaki","Mori","Abe","Ikeda","Hashimoto","Yamashita","Ishikawa","Nakajima","Maeda","Fujita","Ogawa","Goto","Okada","Hasegawa","Murakami","Kondo","Ishii","Saito","Sakamoto","Endo","Aoki","Fujii","Nishimura","Fukuda","Ota","Miura","Fujiwara","Okamoto","Matsuda","Nakagawa","Nakano","Harada","Ono","Tamura","Takeuchi","Kaneko","Wada","Nakayama","Ishida","Ueda","Morita","Hara","Shibata","Sakai","Kudo","Yokoyama","Miyazaki","Miyamoto","Uchida","Takagi","Ando","Taniguchi","Ohno","Maruyama","Imai","Takada","Fujimoto","Takeda","Murata","Ueno","Sugiyama","Masuda","Sugawara","Hirano","Kojima","Otsuka","Chiba","Kubo","Matsui","Iwasaki","Sakurai","Kinoshita","Noguchi","Matsuo","Nomura","Kikuchi","Sano","Onishi","Sugimoto","Arai"],es:["Garcia","Fernandez","Lopez","Martinez","Gonzalez","Rodriguez","Sanchez","Perez","Martin","Gomez","Ruiz","Diaz","Hernandez","Alvarez","Jimenez","Moreno","Munoz","Alonso","Romero","Navarro","Gutierrez","Torres","Dominguez","Gil","Vazquez","Blanco","Serrano","Ramos","Castro","Suarez","Sanz","Rubio","Ortega","Molina","Delgado","Ortiz","Morales","Ramirez","Marin","Iglesias","Santos","Castillo","Garrido","Calvo","Pena","Cruz","Cano","Nunez","Prieto","Diez","Lozano","Vidal","Pascual","Ferrer","Medina","Vega","Leon","Herrero","Vicente","Mendez","Guerrero","Fuentes","Campos","Nieto","Cortes","Caballero","Ibanez","Lorenzo","Pastor","Gimenez","Saez","Soler","Marquez","Carrasco","Herrera","Montero","Arias","Crespo","Flores","Andres","Aguilar","Hidalgo","Cabrera","Mora","Duran","Velasco","Rey","Pardo","Roman","Vila","Bravo","Merino","Moya","Soto","Izquierdo","Reyes","Redondo","Marcos","Carmona","Menendez"],fr:["Martin","Bernard","Thomas","Petit","Robert","Richard","Durand","Dubois","Moreau","Laurent","Simon","Michel","Lefèvre","Leroy","Roux","David","Bertrand","Morel","Fournier","Girard","Bonnet","Dupont","Lambert","Fontaine","Rousseau","Vincent","Müller","Lefèvre","Faure","André","Mercier","Blanc","Guérin","Boyer","Garnier","Chevalier","François","Legrand","Gauthier","Garcia","Perrin","Robin","Clément","Morin","Nicolas","Henry","Roussel","Matthieu","Gautier","Masson","Marchand","Duval","Denis","Dumont","Marie","Lemaire","Noël","Meyer","Dufour","Meunier","Brun","Blanchard","Giraud","Joly","Rivière","Lucas","Brunet","Gaillard","Barbier","Arnaud","Martínez","Gérard","Roche","Renard","Schmitt","Roy","Leroux","Colin","Vidal","Caron","Picard","Roger","Fabre","Aubert","Lemoine","Renaud","Dumas","Lacroix","Olivier","Philippe","Bourgeois","Pierre","Benoît","Rey","Leclerc","Payet","Rolland","Leclercq","Guillaume","Lecomte","López","Jean","Dupuy","Guillot","Hubert","Berger","Carpentier","Sánchez","Dupuis","Moulin","Louis","Deschamps","Huet","Vasseur","Perez","Boucher","Fleury","Royer","Klein","Jacquet","Adam","Paris","Poirier","Marty","Aubry","Guyot","Carré","Charles","Renault","Charpentier","Ménard","Maillard","Baron","Bertin","Bailly","Hervé","Schneider","Fernández","Le GallGall","Collet","Léger","Bouvier","Julien","Prévost","Millet","Perrot","Daniel","Le RouxRoux","Cousin","Germain","Breton","Besson","Langlois","Rémi","Le GoffGoff","Pelletier","Lévêque","Perrier","Leblanc","Barré","Lebrun","Marchal","Weber","Mallet","Hamon","Boulanger","Jacob","Monnier","Michaud","Rodríguez","Guichard","Gillet","Étienne","Grondin","Poulain","Tessier","Chevallier","Collin","Chauvin","Da SilvaSilva","Bouchet","Gay","Lemaître","Bénard","Maréchal","Humbert","Reynaud","Antoine","Hoarau","Perret","Barthélemy","Cordier","Pichon","Lejeune","Gilbert","Lamy","Delaunay","Pasquier","Carlier","LaporteLaporte"]},postcodeAreas:[{code:"AB"},{code:"AL"},{code:"B"},{code:"BA"},{code:"BB"},{code:"BD"},{code:"BH"},{code:"BL"},{code:"BN"},{code:"BR"},{code:"BS"},{code:"BT"},{code:"CA"},{code:"CB"},{code:"CF"},{code:"CH"},{code:"CM"},{code:"CO"},{code:"CR"},{code:"CT"},{code:"CV"},{code:"CW"},{code:"DA"},{code:"DD"},{code:"DE"},{code:"DG"},{code:"DH"},{code:"DL"},{code:"DN"},{code:"DT"},{code:"DY"},{code:"E"},{code:"EC"},{code:"EH"},{code:"EN"},{code:"EX"},{code:"FK"},{code:"FY"},{code:"G"},{code:"GL"},{code:"GU"},{code:"GY"},{code:"HA"},{code:"HD"},{code:"HG"},{code:"HP"},{code:"HR"},{code:"HS"},{code:"HU"},{code:"HX"},{code:"IG"},{code:"IM"},{code:"IP"},{code:"IV"},{code:"JE"},{code:"KA"},{code:"KT"},{code:"KW"},{code:"KY"},{code:"L"},{code:"LA"},{code:"LD"},{code:"LE"},{code:"LL"},{code:"LN"},{code:"LS"},{code:"LU"},{code:"M"},{code:"ME"},{code:"MK"},{code:"ML"},{code:"N"},{code:"NE"},{code:"NG"},{code:"NN"},{code:"NP"},{code:"NR"},{code:"NW"},{code:"OL"},{code:"OX"},{code:"PA"},{code:"PE"},{code:"PH"},{code:"PL"},{code:"PO"},{code:"PR"},{code:"RG"},{code:"RH"},{code:"RM"},{code:"S"},{code:"SA"},{code:"SE"},{code:"SG"},{code:"SK"},{code:"SL"},{code:"SM"},{code:"SN"},{code:"SO"},{code:"SP"},{code:"SR"},{code:"SS"},{code:"ST"},{code:"SW"},{code:"SY"},{code:"TA"},{code:"TD"},{code:"TF"},{code:"TN"},{code:"TQ"},{code:"TR"},{code:"TS"},{code:"TW"},{code:"UB"},{code:"W"},{code:"WA"},{code:"WC"},{code:"WD"},{code:"WF"},{code:"WN"},{code:"WR"},{code:"WS"},{code:"WV"},{code:"YO"},{code:"ZE"}],countries:[{name:"Afghanistan",abbreviation:"AF"},{name:"Åland Islands",abbreviation:"AX"},{name:"Albania",abbreviation:"AL"},{name:"Algeria",abbreviation:"DZ"},{name:"American Samoa",abbreviation:"AS"},{name:"Andorra",abbreviation:"AD"},{name:"Angola",abbreviation:"AO"},{name:"Anguilla",abbreviation:"AI"},{name:"Antarctica",abbreviation:"AQ"},{name:"Antigua & Barbuda",abbreviation:"AG"},{name:"Argentina",abbreviation:"AR"},{name:"Armenia",abbreviation:"AM"},{name:"Aruba",abbreviation:"AW"},{name:"Ascension Island",abbreviation:"AC"},{name:"Australia",abbreviation:"AU"},{name:"Austria",abbreviation:"AT"},{name:"Azerbaijan",abbreviation:"AZ"},{name:"Bahamas",abbreviation:"BS"},{name:"Bahrain",abbreviation:"BH"},{name:"Bangladesh",abbreviation:"BD"},{name:"Barbados",abbreviation:"BB"},{name:"Belarus",abbreviation:"BY"},{name:"Belgium",abbreviation:"BE"},{name:"Belize",abbreviation:"BZ"},{name:"Benin",abbreviation:"BJ"},{name:"Bermuda",abbreviation:"BM"},{name:"Bhutan",abbreviation:"BT"},{name:"Bolivia",abbreviation:"BO"},{name:"Bosnia & Herzegovina",abbreviation:"BA"},{name:"Botswana",abbreviation:"BW"},{name:"Brazil",abbreviation:"BR"},{name:"British Indian Ocean Territory",abbreviation:"IO"},{name:"British Virgin Islands",abbreviation:"VG"},{name:"Brunei",abbreviation:"BN"},{name:"Bulgaria",abbreviation:"BG"},{name:"Burkina Faso",abbreviation:"BF"},{name:"Burundi",abbreviation:"BI"},{name:"Cambodia",abbreviation:"KH"},{name:"Cameroon",abbreviation:"CM"},{name:"Canada",abbreviation:"CA"},{name:"Canary Islands",abbreviation:"IC"},{name:"Cape Verde",abbreviation:"CV"},{name:"Caribbean Netherlands",abbreviation:"BQ"},{name:"Cayman Islands",abbreviation:"KY"},{name:"Central African Republic",abbreviation:"CF"},{name:"Ceuta & Melilla",abbreviation:"EA"},{name:"Chad",abbreviation:"TD"},{name:"Chile",abbreviation:"CL"},{name:"China",abbreviation:"CN"},{name:"Christmas Island",abbreviation:"CX"},{name:"Cocos (Keeling) Islands",abbreviation:"CC"},{name:"Colombia",abbreviation:"CO"},{name:"Comoros",abbreviation:"KM"},{name:"Congo - Brazzaville",abbreviation:"CG"},{name:"Congo - Kinshasa",abbreviation:"CD"},{name:"Cook Islands",abbreviation:"CK"},{name:"Costa Rica",abbreviation:"CR"},{name:"Côte d'Ivoire",abbreviation:"CI"},{name:"Croatia",abbreviation:"HR"},{name:"Cuba",abbreviation:"CU"},{name:"Curaçao",abbreviation:"CW"},{name:"Cyprus",abbreviation:"CY"},{name:"Czech Republic",abbreviation:"CZ"},{name:"Denmark",abbreviation:"DK"},{name:"Diego Garcia",abbreviation:"DG"},{name:"Djibouti",abbreviation:"DJ"},{name:"Dominica",abbreviation:"DM"},{name:"Dominican Republic",abbreviation:"DO"},{name:"Ecuador",abbreviation:"EC"},{name:"Egypt",abbreviation:"EG"},{name:"El Salvador",abbreviation:"SV"},{name:"Equatorial Guinea",abbreviation:"GQ"},{name:"Eritrea",abbreviation:"ER"},{name:"Estonia",abbreviation:"EE"},{name:"Ethiopia",abbreviation:"ET"},{name:"Falkland Islands",abbreviation:"FK"},{name:"Faroe Islands",abbreviation:"FO"},{name:"Fiji",abbreviation:"FJ"},{name:"Finland",abbreviation:"FI"},{name:"France",abbreviation:"FR"},{name:"French Guiana",abbreviation:"GF"},{name:"French Polynesia",abbreviation:"PF"},{name:"French Southern Territories",abbreviation:"TF"},{name:"Gabon",abbreviation:"GA"},{name:"Gambia",abbreviation:"GM"},{name:"Georgia",abbreviation:"GE"},{name:"Germany",abbreviation:"DE"},{name:"Ghana",abbreviation:"GH"},{name:"Gibraltar",abbreviation:"GI"},{name:"Greece",abbreviation:"GR"},{name:"Greenland",abbreviation:"GL"},{name:"Grenada",abbreviation:"GD"},{name:"Guadeloupe",abbreviation:"GP"},{name:"Guam",abbreviation:"GU"},{name:"Guatemala",abbreviation:"GT"},{name:"Guernsey",abbreviation:"GG"},{name:"Guinea",abbreviation:"GN"},{name:"Guinea-Bissau",abbreviation:"GW"},{name:"Guyana",abbreviation:"GY"},{name:"Haiti",abbreviation:"HT"},{name:"Honduras",abbreviation:"HN"},{name:"Hong Kong SAR China",abbreviation:"HK"},{name:"Hungary",abbreviation:"HU"},{name:"Iceland",abbreviation:"IS"},{name:"India",abbreviation:"IN"},{name:"Indonesia",abbreviation:"ID"},{name:"Iran",abbreviation:"IR"},{name:"Iraq",abbreviation:"IQ"},{name:"Ireland",abbreviation:"IE"},{name:"Isle of Man",abbreviation:"IM"},{name:"Israel",abbreviation:"IL"},{name:"Italy",abbreviation:"IT"},{name:"Jamaica",abbreviation:"JM"},{name:"Japan",abbreviation:"JP"},{name:"Jersey",abbreviation:"JE"},{name:"Jordan",abbreviation:"JO"},{name:"Kazakhstan",abbreviation:"KZ"},{name:"Kenya",abbreviation:"KE"},{name:"Kiribati",abbreviation:"KI"},{name:"Kosovo",abbreviation:"XK"},{name:"Kuwait",abbreviation:"KW"},{name:"Kyrgyzstan",abbreviation:"KG"},{name:"Laos",abbreviation:"LA"},{name:"Latvia",abbreviation:"LV"},{name:"Lebanon",abbreviation:"LB"},{name:"Lesotho",abbreviation:"LS"},{name:"Liberia",abbreviation:"LR"},{name:"Libya",abbreviation:"LY"},{name:"Liechtenstein",abbreviation:"LI"},{name:"Lithuania",abbreviation:"LT"},{name:"Luxembourg",abbreviation:"LU"},{name:"Macau SAR China",abbreviation:"MO"},{name:"Macedonia",abbreviation:"MK"},{name:"Madagascar",abbreviation:"MG"},{name:"Malawi",abbreviation:"MW"},{name:"Malaysia",abbreviation:"MY"},{name:"Maldives",abbreviation:"MV"},{name:"Mali",abbreviation:"ML"},{name:"Malta",abbreviation:"MT"},{name:"Marshall Islands",abbreviation:"MH"},{name:"Martinique",abbreviation:"MQ"},{name:"Mauritania",abbreviation:"MR"},{name:"Mauritius",abbreviation:"MU"},{name:"Mayotte",abbreviation:"YT"},{name:"Mexico",abbreviation:"MX"},{name:"Micronesia",abbreviation:"FM"},{name:"Moldova",abbreviation:"MD"},{name:"Monaco",abbreviation:"MC"},{name:"Mongolia",abbreviation:"MN"},{name:"Montenegro",abbreviation:"ME"},{name:"Montserrat",abbreviation:"MS"},{name:"Morocco",abbreviation:"MA"},{name:"Mozambique",abbreviation:"MZ"},{name:"Myanmar (Burma)",abbreviation:"MM"},{name:"Namibia",abbreviation:"NA"},{name:"Nauru",abbreviation:"NR"},{name:"Nepal",abbreviation:"NP"},{name:"Netherlands",abbreviation:"NL"},{name:"New Caledonia",abbreviation:"NC"},{name:"New Zealand",abbreviation:"NZ"},{name:"Nicaragua",abbreviation:"NI"},{name:"Niger",abbreviation:"NE"},{name:"Nigeria",abbreviation:"NG"},{name:"Niue",abbreviation:"NU"},{name:"Norfolk Island",abbreviation:"NF"},{name:"North Korea",abbreviation:"KP"},{name:"Northern Mariana Islands",abbreviation:"MP"},{name:"Norway",abbreviation:"NO"},{name:"Oman",abbreviation:"OM"},{name:"Pakistan",abbreviation:"PK"},{name:"Palau",abbreviation:"PW"},{name:"Palestinian Territories",abbreviation:"PS"},{name:"Panama",abbreviation:"PA"},{name:"Papua New Guinea",abbreviation:"PG"},{name:"Paraguay",abbreviation:"PY"},{name:"Peru",abbreviation:"PE"},{name:"Philippines",abbreviation:"PH"},{name:"Pitcairn Islands",abbreviation:"PN"},{name:"Poland",abbreviation:"PL"},{name:"Portugal",abbreviation:"PT"},{name:"Puerto Rico",abbreviation:"PR"},{name:"Qatar",abbreviation:"QA"},{name:"Réunion",abbreviation:"RE"},{name:"Romania",abbreviation:"RO"},{name:"Russia",abbreviation:"RU"},{name:"Rwanda",abbreviation:"RW"},{name:"Samoa",abbreviation:"WS"},{name:"San Marino",abbreviation:"SM"},{name:"São Tomé and Príncipe",abbreviation:"ST"},{name:"Saudi Arabia",abbreviation:"SA"},{name:"Senegal",abbreviation:"SN"},{name:"Serbia",abbreviation:"RS"},{name:"Seychelles",abbreviation:"SC"},{name:"Sierra Leone",abbreviation:"SL"},{name:"Singapore",abbreviation:"SG"},{name:"Sint Maarten",abbreviation:"SX"},{name:"Slovakia",abbreviation:"SK"},{name:"Slovenia",abbreviation:"SI"},{name:"Solomon Islands",abbreviation:"SB"},{name:"Somalia",abbreviation:"SO"},{name:"South Africa",abbreviation:"ZA"},{name:"South Georgia & South Sandwich Islands",abbreviation:"GS"},{name:"South Korea",abbreviation:"KR"},{name:"South Sudan",abbreviation:"SS"},{name:"Spain",abbreviation:"ES"},{name:"Sri Lanka",abbreviation:"LK"},{name:"St. Barthélemy",abbreviation:"BL"},{name:"St. Helena",abbreviation:"SH"},{name:"St. Kitts & Nevis",abbreviation:"KN"},{name:"St. Lucia",abbreviation:"LC"},{name:"St. Martin",abbreviation:"MF"},{name:"St. Pierre & Miquelon",abbreviation:"PM"},{name:"St. Vincent & Grenadines",abbreviation:"VC"},{name:"Sudan",abbreviation:"SD"},{name:"Suriname",abbreviation:"SR"},{name:"Svalbard & Jan Mayen",abbreviation:"SJ"},{name:"Swaziland",abbreviation:"SZ"},{name:"Sweden",abbreviation:"SE"},{name:"Switzerland",abbreviation:"CH"},{name:"Syria",abbreviation:"SY"},{name:"Taiwan",abbreviation:"TW"},{name:"Tajikistan",abbreviation:"TJ"},{name:"Tanzania",abbreviation:"TZ"},{name:"Thailand",abbreviation:"TH"},{name:"Timor-Leste",abbreviation:"TL"},{name:"Togo",abbreviation:"TG"},{name:"Tokelau",abbreviation:"TK"},{name:"Tonga",abbreviation:"TO"},{name:"Trinidad & Tobago",abbreviation:"TT"},{name:"Tristan da Cunha",abbreviation:"TA"},{name:"Tunisia",abbreviation:"TN"},{name:"Turkey",abbreviation:"TR"},{name:"Turkmenistan",abbreviation:"TM"},{name:"Turks & Caicos Islands",abbreviation:"TC"},{name:"Tuvalu",abbreviation:"TV"},{name:"U.S. Outlying Islands",abbreviation:"UM"},{name:"U.S. Virgin Islands",abbreviation:"VI"},{name:"Uganda",abbreviation:"UG"},{name:"Ukraine",abbreviation:"UA"},{name:"United Arab Emirates",abbreviation:"AE"},{name:"United Kingdom",abbreviation:"GB"},{name:"United States",abbreviation:"US"},{name:"Uruguay",abbreviation:"UY"},{name:"Uzbekistan",abbreviation:"UZ"},{name:"Vanuatu",abbreviation:"VU"},{name:"Vatican City",abbreviation:"VA"},{name:"Venezuela",abbreviation:"VE"},{name:"Vietnam",abbreviation:"VN"},{name:"Wallis & Futuna",abbreviation:"WF"},{name:"Western Sahara",abbreviation:"EH"},{name:"Yemen",abbreviation:"YE"},{name:"Zambia",abbreviation:"ZM"},{name:"Zimbabwe",abbreviation:"ZW"}],counties:{uk:[{name:"Bath and North East Somerset"},{name:"Aberdeenshire"},{name:"Anglesey"},{name:"Angus"},{name:"Bedford"},{name:"Blackburn with Darwen"},{name:"Blackpool"},{name:"Bournemouth"},{name:"Bracknell Forest"},{name:"Brighton & Hove"},{name:"Bristol"},{name:"Buckinghamshire"},{name:"Cambridgeshire"},{name:"Carmarthenshire"},{name:"Central Bedfordshire"},{name:"Ceredigion"},{name:"Cheshire East"},{name:"Cheshire West and Chester"},{name:"Clackmannanshire"},{name:"Conwy"},{name:"Cornwall"},{name:"County Antrim"},{name:"County Armagh"},{name:"County Down"},{name:"County Durham"},{name:"County Fermanagh"},{name:"County Londonderry"},{name:"County Tyrone"},{name:"Cumbria"},{name:"Darlington"},{name:"Denbighshire"},{name:"Derby"},{name:"Derbyshire"},{name:"Devon"},{name:"Dorset"},{name:"Dumfries and Galloway"},{name:"Dundee"},{name:"East Lothian"},{name:"East Riding of Yorkshire"},{name:"East Sussex"},{name:"Edinburgh?"},{name:"Essex"},{name:"Falkirk"},{name:"Fife"},{name:"Flintshire"},{name:"Gloucestershire"},{name:"Greater London"},{name:"Greater Manchester"},{name:"Gwent"},{name:"Gwynedd"},{name:"Halton"},{name:"Hampshire"},{name:"Hartlepool"},{name:"Herefordshire"},{name:"Hertfordshire"},{name:"Highlands"},{name:"Hull"},{name:"Isle of Wight"},{name:"Isles of Scilly"},{name:"Kent"},{name:"Lancashire"},{name:"Leicester"},{name:"Leicestershire"},{name:"Lincolnshire"},{name:"Lothian"},{name:"Luton"},{name:"Medway"},{name:"Merseyside"},{name:"Mid Glamorgan"},{name:"Middlesbrough"},{name:"Milton Keynes"},{name:"Monmouthshire"},{name:"Moray"},{name:"Norfolk"},{name:"North East Lincolnshire"},{name:"North Lincolnshire"},{name:"North Somerset"},{name:"North Yorkshire"},{name:"Northamptonshire"},{name:"Northumberland"},{name:"Nottingham"},{name:"Nottinghamshire"},{name:"Oxfordshire"},{name:"Pembrokeshire"},{name:"Perth and Kinross"},{name:"Peterborough"},{name:"Plymouth"},{name:"Poole"},{name:"Portsmouth"},{name:"Powys"},{name:"Reading"},{name:"Redcar and Cleveland"},{name:"Rutland"},{name:"Scottish Borders"},{name:"Shropshire"},{name:"Slough"},{name:"Somerset"},{name:"South Glamorgan"},{name:"South Gloucestershire"},{name:"South Yorkshire"},{name:"Southampton"},{name:"Southend-on-Sea"},{name:"Staffordshire"},{name:"Stirlingshire"},{name:"Stockton-on-Tees"},{name:"Stoke-on-Trent"},{name:"Strathclyde"},{name:"Suffolk"},{name:"Surrey"},{name:"Swindon"},{name:"Telford and Wrekin"},{name:"Thurrock"},{name:"Torbay"},{name:"Tyne and Wear"},{name:"Warrington"},{name:"Warwickshire"},{name:"West Berkshire"},{name:"West Glamorgan"},{name:"West Lothian"},{name:"West Midlands"},{name:"West Sussex"},{name:"West Yorkshire"},{name:"Western Isles"},{name:"Wiltshire"},{name:"Windsor and Maidenhead"},{name:"Wokingham"},{name:"Worcestershire"},{name:"Wrexham"},{name:"York"}]},provinces:{ca:[{name:"Alberta",abbreviation:"AB"},{name:"British Columbia",abbreviation:"BC"},{name:"Manitoba",abbreviation:"MB"},{name:"New Brunswick",abbreviation:"NB"},{name:"Newfoundland and Labrador",abbreviation:"NL"},{name:"Nova Scotia",abbreviation:"NS"},{name:"Ontario",abbreviation:"ON"},{name:"Prince Edward Island",abbreviation:"PE"},{name:"Quebec",abbreviation:"QC"},{name:"Saskatchewan",abbreviation:"SK"},{name:"Northwest Territories",abbreviation:"NT"},{name:"Nunavut",abbreviation:"NU"},{name:"Yukon",abbreviation:"YT"}],it:[{name:"Agrigento",abbreviation:"AG",code:84},{name:"Alessandria",abbreviation:"AL",code:6},{name:"Ancona",abbreviation:"AN",code:42},{name:"Aosta",abbreviation:"AO",code:7},{name:"L'Aquila",abbreviation:"AQ",code:66},{name:"Arezzo",abbreviation:"AR",code:51},{name:"Ascoli-Piceno",abbreviation:"AP",code:44},{name:"Asti",abbreviation:"AT",code:5},{name:"Avellino",abbreviation:"AV",code:64},{name:"Bari",abbreviation:"BA",code:72},{name:"Barletta-Andria-Trani",abbreviation:"BT",code:72},{name:"Belluno",abbreviation:"BL",code:25},{name:"Benevento",abbreviation:"BN",code:62},{name:"Bergamo",abbreviation:"BG",code:16},{name:"Biella",abbreviation:"BI",code:96},{name:"Bologna",abbreviation:"BO",code:37},{name:"Bolzano",abbreviation:"BZ",code:21},{name:"Brescia",abbreviation:"BS",code:17},{name:"Brindisi",abbreviation:"BR",code:74},{name:"Cagliari",abbreviation:"CA",code:92},{name:"Caltanissetta",abbreviation:"CL",code:85},{name:"Campobasso",abbreviation:"CB",code:70},{name:"Carbonia Iglesias",abbreviation:"CI",code:70},{name:"Caserta",abbreviation:"CE",code:61},{name:"Catania",abbreviation:"CT",code:87},{name:"Catanzaro",abbreviation:"CZ",code:79},{name:"Chieti",abbreviation:"CH",code:69},{name:"Como",abbreviation:"CO",code:13},{name:"Cosenza",abbreviation:"CS",code:78},{name:"Cremona",abbreviation:"CR",code:19},{name:"Crotone",abbreviation:"KR",code:101},{name:"Cuneo",abbreviation:"CN",code:4},{name:"Enna",abbreviation:"EN",code:86},{name:"Fermo",abbreviation:"FM",code:86},{name:"Ferrara",abbreviation:"FE",code:38},{name:"Firenze",abbreviation:"FI",code:48},{name:"Foggia",abbreviation:"FG",code:71},{name:"Forli-Cesena",abbreviation:"FC",code:71},{name:"Frosinone",abbreviation:"FR",code:60},{name:"Genova",abbreviation:"GE",code:10},{name:"Gorizia",abbreviation:"GO",code:31},{name:"Grosseto",abbreviation:"GR",code:53},{name:"Imperia",abbreviation:"IM",code:8},{name:"Isernia",abbreviation:"IS",code:94},{name:"La-Spezia",abbreviation:"SP",code:66},{name:"Latina",abbreviation:"LT",code:59},{name:"Lecce",abbreviation:"LE",code:75},{name:"Lecco",abbreviation:"LC",code:97},{name:"Livorno",abbreviation:"LI",code:49},{name:"Lodi",abbreviation:"LO",code:98},{name:"Lucca",abbreviation:"LU",code:46},{name:"Macerata",abbreviation:"MC",code:43},{name:"Mantova",abbreviation:"MN",code:20},{name:"Massa-Carrara",abbreviation:"MS",code:45},{name:"Matera",abbreviation:"MT",code:77},{name:"Medio Campidano",abbreviation:"VS",code:77},{name:"Messina",abbreviation:"ME",code:83},{name:"Milano",abbreviation:"MI",code:15},{name:"Modena",abbreviation:"MO",code:36},{name:"Monza-Brianza",abbreviation:"MB",code:36},{name:"Napoli",abbreviation:"NA",code:63},{name:"Novara",abbreviation:"NO",code:3},{name:"Nuoro",abbreviation:"NU",code:91},{name:"Ogliastra",abbreviation:"OG",code:91},{name:"Olbia Tempio",abbreviation:"OT",code:91},{name:"Oristano",abbreviation:"OR",code:95},{name:"Padova",abbreviation:"PD",code:28},{name:"Palermo",abbreviation:"PA",code:82},{name:"Parma",abbreviation:"PR",code:34},{name:"Pavia",abbreviation:"PV",code:18},{name:"Perugia",abbreviation:"PG",code:54},{name:"Pesaro-Urbino",abbreviation:"PU",code:41},{name:"Pescara",abbreviation:"PE",code:68},{name:"Piacenza",abbreviation:"PC",code:33},{name:"Pisa",abbreviation:"PI",code:50},{name:"Pistoia",abbreviation:"PT",code:47},{name:"Pordenone",abbreviation:"PN",code:93},{name:"Potenza",abbreviation:"PZ",code:76},{name:"Prato",abbreviation:"PO",code:100},{name:"Ragusa",abbreviation:"RG",code:88},{name:"Ravenna",abbreviation:"RA",code:39},{name:"Reggio-Calabria",abbreviation:"RC",code:35},{name:"Reggio-Emilia",abbreviation:"RE",code:35},{name:"Rieti",abbreviation:"RI",code:57},{name:"Rimini",abbreviation:"RN",code:99},{name:"Roma",abbreviation:"Roma",code:58},{name:"Rovigo",abbreviation:"RO",code:29},{name:"Salerno",abbreviation:"SA",code:65},{name:"Sassari",abbreviation:"SS",code:90},{name:"Savona",abbreviation:"SV",code:9},{name:"Siena",abbreviation:"SI",code:52},{name:"Siracusa",abbreviation:"SR",code:89},{name:"Sondrio",abbreviation:"SO",code:14},{name:"Taranto",abbreviation:"TA",code:73},{name:"Teramo",abbreviation:"TE",code:67},{name:"Terni",abbreviation:"TR",code:55},{name:"Torino",abbreviation:"TO",code:1},{name:"Trapani",abbreviation:"TP",code:81},{name:"Trento",abbreviation:"TN",code:22},{name:"Treviso",abbreviation:"TV",code:26},{name:"Trieste",abbreviation:"TS",code:32},{name:"Udine",abbreviation:"UD",code:30},{name:"Varese",abbreviation:"VA",code:12},{name:"Venezia",abbreviation:"VE",code:27},{name:"Verbania",abbreviation:"VB",code:27},{name:"Vercelli",abbreviation:"VC",code:2},{name:"Verona",abbreviation:"VR",code:23},{name:"Vibo-Valentia",abbreviation:"VV",code:102},{name:"Vicenza",abbreviation:"VI",code:24},{name:"Viterbo",abbreviation:"VT",code:56}]},nationalities:[{name:"Afghan"},{name:"Albanian"},{name:"Algerian"},{name:"American"},{name:"Andorran"},{name:"Angolan"},{name:"Antiguans"},{name:"Argentinean"},{name:"Armenian"},{name:"Australian"},{name:"Austrian"},{name:"Azerbaijani"},{name:"Bahami"},{name:"Bahraini"},{name:"Bangladeshi"},{name:"Barbadian"},{name:"Barbudans"},{name:"Batswana"},{name:"Belarusian"},{name:"Belgian"},{name:"Belizean"},{name:"Beninese"},{name:"Bhutanese"},{name:"Bolivian"},{name:"Bosnian"},{name:"Brazilian"},{name:"British"},{name:"Bruneian"},{name:"Bulgarian"},{name:"Burkinabe"},{name:"Burmese"},{name:"Burundian"},{name:"Cambodian"},{name:"Cameroonian"},{name:"Canadian"},{name:"Cape Verdean"},{name:"Central African"},{name:"Chadian"},{name:"Chilean"},{name:"Chinese"},{name:"Colombian"},{name:"Comoran"},{name:"Congolese"},{name:"Costa Rican"},{name:"Croatian"},{name:"Cuban"},{name:"Cypriot"},{name:"Czech"},{name:"Danish"},{name:"Djibouti"},{name:"Dominican"},{name:"Dutch"},{name:"East Timorese"},{name:"Ecuadorean"},{name:"Egyptian"},{name:"Emirian"},{name:"Equatorial Guinean"},{name:"Eritrean"},{name:"Estonian"},{name:"Ethiopian"},{name:"Fijian"},{name:"Filipino"},{name:"Finnish"},{name:"French"},{name:"Gabonese"},{name:"Gambian"},{name:"Georgian"},{name:"German"},{name:"Ghanaian"},{name:"Greek"},{name:"Grenadian"},{name:"Guatemalan"},{name:"Guinea-Bissauan"},{name:"Guinean"},{name:"Guyanese"},{name:"Haitian"},{name:"Herzegovinian"},{name:"Honduran"},{name:"Hungarian"},{name:"I-Kiribati"},{name:"Icelander"},{name:"Indian"},{name:"Indonesian"},{name:"Iranian"},{name:"Iraqi"},{name:"Irish"},{name:"Israeli"},{name:"Italian"},{name:"Ivorian"},{name:"Jamaican"},{name:"Japanese"},{name:"Jordanian"},{name:"Kazakhstani"},{name:"Kenyan"},{name:"Kittian and Nevisian"},{name:"Kuwaiti"},{name:"Kyrgyz"},{name:"Laotian"},{name:"Latvian"},{name:"Lebanese"},{name:"Liberian"},{name:"Libyan"},{name:"Liechtensteiner"},{name:"Lithuanian"},{name:"Luxembourger"},{name:"Macedonian"},{name:"Malagasy"},{name:"Malawian"},{name:"Malaysian"},{name:"Maldivan"},{name:"Malian"},{name:"Maltese"},{name:"Marshallese"},{name:"Mauritanian"},{name:"Mauritian"},{name:"Mexican"},{name:"Micronesian"},{name:"Moldovan"},{name:"Monacan"},{name:"Mongolian"},{name:"Moroccan"},{name:"Mosotho"},{name:"Motswana"},{name:"Mozambican"},{name:"Namibian"},{name:"Nauruan"},{name:"Nepalese"},{name:"New Zealander"},{name:"Nicaraguan"},{name:"Nigerian"},{name:"Nigerien"},{name:"North Korean"},{name:"Northern Irish"},{name:"Norwegian"},{name:"Omani"},{name:"Pakistani"},{name:"Palauan"},{name:"Panamanian"},{name:"Papua New Guinean"},{name:"Paraguayan"},{name:"Peruvian"},{name:"Polish"},{name:"Portuguese"},{name:"Qatari"},{name:"Romani"},{name:"Russian"},{name:"Rwandan"},{name:"Saint Lucian"},{name:"Salvadoran"},{name:"Samoan"},{name:"San Marinese"},{name:"Sao Tomean"},{name:"Saudi"},{name:"Scottish"},{name:"Senegalese"},{name:"Serbian"},{name:"Seychellois"},{name:"Sierra Leonean"},{name:"Singaporean"},{name:"Slovakian"},{name:"Slovenian"},{name:"Solomon Islander"},{name:"Somali"},{name:"South African"},{name:"South Korean"},{name:"Spanish"},{name:"Sri Lankan"},{name:"Sudanese"},{name:"Surinamer"},{name:"Swazi"},{name:"Swedish"},{name:"Swiss"},{name:"Syrian"},{name:"Taiwanese"},{name:"Tajik"},{name:"Tanzanian"},{name:"Thai"},{name:"Togolese"},{name:"Tongan"},{name:"Trinidadian or Tobagonian"},{name:"Tunisian"},{name:"Turkish"},{name:"Tuvaluan"},{name:"Ugandan"},{name:"Ukrainian"},{name:"Uruguaya"},{name:"Uzbekistani"},{name:"Venezuela"},{name:"Vietnamese"},{name:"Wels"},{name:"Yemenit"},{name:"Zambia"},{name:"Zimbabwe"}],locale_languages:["aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","id","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu"],locale_regions:["agq-CM","asa-TZ","ast-ES","bas-CM","bem-ZM","bez-TZ","brx-IN","cgg-UG","chr-US","dav-KE","dje-NE","dsb-DE","dua-CM","dyo-SN","ebu-KE","ewo-CM","fil-PH","fur-IT","gsw-CH","gsw-FR","gsw-LI","guz-KE","haw-US","hsb-DE","jgo-CM","jmc-TZ","kab-DZ","kam-KE","kde-TZ","kea-CV","khq-ML","kkj-CM","kln-KE","kok-IN","ksb-TZ","ksf-CM","ksh-DE","lag-TZ","lkt-US","luo-KE","luy-KE","mas-KE","mas-TZ","mer-KE","mfe-MU","mgh-MZ","mgo-CM","mua-CM","naq-NA","nmg-CM","nnh-CM","nus-SD","nyn-UG","rof-TZ","rwk-TZ","sah-RU","saq-KE","sbp-TZ","seh-MZ","ses-ML","shi-Latn","shi-Latn-MA","shi-Tfng","shi-Tfng-MA","smn-FI","teo-KE","teo-UG","twq-NE","tzm-Latn","tzm-Latn-MA","vai-Latn","vai-Latn-LR","vai-Vaii","vai-Vaii-LR","vun-TZ","wae-CH","xog-UG","yav-CM","zgh-MA","af-NA","af-ZA","ak-GH","am-ET","ar-001","ar-AE","ar-BH","ar-DJ","ar-DZ","ar-EG","ar-EH","ar-ER","ar-IL","ar-IQ","ar-JO","ar-KM","ar-KW","ar-LB","ar-LY","ar-MA","ar-MR","ar-OM","ar-PS","ar-QA","ar-SA","ar-SD","ar-SO","ar-SS","ar-SY","ar-TD","ar-TN","ar-YE","as-IN","az-Cyrl","az-Cyrl-AZ","az-Latn","az-Latn-AZ","be-BY","bg-BG","bm-Latn","bm-Latn-ML","bn-BD","bn-IN","bo-CN","bo-IN","br-FR","bs-Cyrl","bs-Cyrl-BA","bs-Latn","bs-Latn-BA","ca-AD","ca-ES","ca-ES-VALENCIA","ca-FR","ca-IT","cs-CZ","cy-GB","da-DK","da-GL","de-AT","de-BE","de-CH","de-DE","de-LI","de-LU","dz-BT","ee-GH","ee-TG","el-CY","el-GR","en-001","en-150","en-AG","en-AI","en-AS","en-AU","en-BB","en-BE","en-BM","en-BS","en-BW","en-BZ","en-CA","en-CC","en-CK","en-CM","en-CX","en-DG","en-DM","en-ER","en-FJ","en-FK","en-FM","en-GB","en-GD","en-GG","en-GH","en-GI","en-GM","en-GU","en-GY","en-HK","en-IE","en-IM","en-IN","en-IO","en-JE","en-JM","en-KE","en-KI","en-KN","en-KY","en-LC","en-LR","en-LS","en-MG","en-MH","en-MO","en-MP","en-MS","en-MT","en-MU","en-MW","en-MY","en-NA","en-NF","en-NG","en-NR","en-NU","en-NZ","en-PG","en-PH","en-PK","en-PN","en-PR","en-PW","en-RW","en-SB","en-SC","en-SD","en-SG","en-SH","en-SL","en-SS","en-SX","en-SZ","en-TC","en-TK","en-TO","en-TT","en-TV","en-TZ","en-UG","en-UM","en-US","en-US-POSIX","en-VC","en-VG","en-VI","en-VU","en-WS","en-ZA","en-ZM","en-ZW","eo-001","es-419","es-AR","es-BO","es-CL","es-CO","es-CR","es-CU","es-DO","es-EA","es-EC","es-ES","es-GQ","es-GT","es-HN","es-IC","es-MX","es-NI","es-PA","es-PE","es-PH","es-PR","es-PY","es-SV","es-US","es-UY","es-VE","et-EE","eu-ES","fa-AF","fa-IR","ff-CM","ff-GN","ff-MR","ff-SN","fi-FI","fo-FO","fr-BE","fr-BF","fr-BI","fr-BJ","fr-BL","fr-CA","fr-CD","fr-CF","fr-CG","fr-CH","fr-CI","fr-CM","fr-DJ","fr-DZ","fr-FR","fr-GA","fr-GF","fr-GN","fr-GP","fr-GQ","fr-HT","fr-KM","fr-LU","fr-MA","fr-MC","fr-MF","fr-MG","fr-ML","fr-MQ","fr-MR","fr-MU","fr-NC","fr-NE","fr-PF","fr-PM","fr-RE","fr-RW","fr-SC","fr-SN","fr-SY","fr-TD","fr-TG","fr-TN","fr-VU","fr-WF","fr-YT","fy-NL","ga-IE","gd-GB","gl-ES","gu-IN","gv-IM","ha-Latn","ha-Latn-GH","ha-Latn-NE","ha-Latn-NG","he-IL","hi-IN","hr-BA","hr-HR","hu-HU","hy-AM","id-ID","ig-NG","ii-CN","is-IS","it-CH","it-IT","it-SM","ja-JP","ka-GE","ki-KE","kk-Cyrl","kk-Cyrl-KZ","kl-GL","km-KH","kn-IN","ko-KP","ko-KR","ks-Arab","ks-Arab-IN","kw-GB","ky-Cyrl","ky-Cyrl-KG","lb-LU","lg-UG","ln-AO","ln-CD","ln-CF","ln-CG","lo-LA","lt-LT","lu-CD","lv-LV","mg-MG","mk-MK","ml-IN","mn-Cyrl","mn-Cyrl-MN","mr-IN","ms-Latn","ms-Latn-BN","ms-Latn-MY","ms-Latn-SG","mt-MT","my-MM","nb-NO","nb-SJ","nd-ZW","ne-IN","ne-NP","nl-AW","nl-BE","nl-BQ","nl-CW","nl-NL","nl-SR","nl-SX","nn-NO","om-ET","om-KE","or-IN","os-GE","os-RU","pa-Arab","pa-Arab-PK","pa-Guru","pa-Guru-IN","pl-PL","ps-AF","pt-AO","pt-BR","pt-CV","pt-GW","pt-MO","pt-MZ","pt-PT","pt-ST","pt-TL","qu-BO","qu-EC","qu-PE","rm-CH","rn-BI","ro-MD","ro-RO","ru-BY","ru-KG","ru-KZ","ru-MD","ru-RU","ru-UA","rw-RW","se-FI","se-NO","se-SE","sg-CF","si-LK","sk-SK","sl-SI","sn-ZW","so-DJ","so-ET","so-KE","so-SO","sq-AL","sq-MK","sq-XK","sr-Cyrl","sr-Cyrl-BA","sr-Cyrl-ME","sr-Cyrl-RS","sr-Cyrl-XK","sr-Latn","sr-Latn-BA","sr-Latn-ME","sr-Latn-RS","sr-Latn-XK","sv-AX","sv-FI","sv-SE","sw-CD","sw-KE","sw-TZ","sw-UG","ta-IN","ta-LK","ta-MY","ta-SG","te-IN","th-TH","ti-ER","ti-ET","to-TO","tr-CY","tr-TR","ug-Arab","ug-Arab-CN","uk-UA","ur-IN","ur-PK","uz-Arab","uz-Arab-AF","uz-Cyrl","uz-Cyrl-UZ","uz-Latn","uz-Latn-UZ","vi-VN","yi-001","yo-BJ","yo-NG","zh-Hans","zh-Hans-CN","zh-Hans-HK","zh-Hans-MO","zh-Hans-SG","zh-Hant","zh-Hant-HK","zh-Hant-MO","zh-Hant-TW","zu-ZA"],us_states_and_dc:[{name:"Alabama",abbreviation:"AL"},{name:"Alaska",abbreviation:"AK"},{name:"Arizona",abbreviation:"AZ"},{name:"Arkansas",abbreviation:"AR"},{name:"California",abbreviation:"CA"},{name:"Colorado",abbreviation:"CO"},{name:"Connecticut",abbreviation:"CT"},{name:"Delaware",abbreviation:"DE"},{name:"District of Columbia",abbreviation:"DC"},{name:"Florida",abbreviation:"FL"},{name:"Georgia",abbreviation:"GA"},{name:"Hawaii",abbreviation:"HI"},{name:"Idaho",abbreviation:"ID"},{name:"Illinois",abbreviation:"IL"},{name:"Indiana",abbreviation:"IN"},{name:"Iowa",abbreviation:"IA"},{name:"Kansas",abbreviation:"KS"},{name:"Kentucky",abbreviation:"KY"},{name:"Louisiana",abbreviation:"LA"},{name:"Maine",abbreviation:"ME"},{name:"Maryland",abbreviation:"MD"},{name:"Massachusetts",abbreviation:"MA"},{name:"Michigan",abbreviation:"MI"},{name:"Minnesota",abbreviation:"MN"},{name:"Mississippi",abbreviation:"MS"},{name:"Missouri",abbreviation:"MO"},{name:"Montana",abbreviation:"MT"},{name:"Nebraska",abbreviation:"NE"},{name:"Nevada",abbreviation:"NV"},{name:"New Hampshire",abbreviation:"NH"},{name:"New Jersey",abbreviation:"NJ"},{name:"New Mexico",abbreviation:"NM"},{name:"New York",abbreviation:"NY"},{name:"North Carolina",abbreviation:"NC"},{name:"North Dakota",abbreviation:"ND"},{name:"Ohio",abbreviation:"OH"},{name:"Oklahoma",abbreviation:"OK"},{name:"Oregon",abbreviation:"OR"},{name:"Pennsylvania",abbreviation:"PA"},{name:"Rhode Island",abbreviation:"RI"},{name:"South Carolina",abbreviation:"SC"},{name:"South Dakota",abbreviation:"SD"},{name:"Tennessee",abbreviation:"TN"},{name:"Texas",abbreviation:"TX"},{name:"Utah",abbreviation:"UT"},{name:"Vermont",abbreviation:"VT"},{name:"Virginia",abbreviation:"VA"},{name:"Washington",abbreviation:"WA"},{name:"West Virginia",abbreviation:"WV"},{name:"Wisconsin",abbreviation:"WI"},{name:"Wyoming",abbreviation:"WY"}],territories:[{name:"American Samoa",abbreviation:"AS"},{name:"Federated States of Micronesia",abbreviation:"FM"},{name:"Guam",abbreviation:"GU"},{name:"Marshall Islands",abbreviation:"MH"},{name:"Northern Mariana Islands",abbreviation:"MP"},{name:"Puerto Rico",abbreviation:"PR"},{name:"Virgin Islands, U.S.",abbreviation:"VI"}],armed_forces:[{name:"Armed Forces Europe",abbreviation:"AE"},{name:"Armed Forces Pacific",abbreviation:"AP"},{name:"Armed Forces the Americas",abbreviation:"AA"}],country_regions:{it:[{name:"Valle d'Aosta",abbreviation:"VDA"},{name:"Piemonte",abbreviation:"PIE"},{name:"Lombardia",abbreviation:"LOM"},{name:"Veneto",abbreviation:"VEN"},{name:"Trentino Alto Adige",abbreviation:"TAA"},{name:"Friuli Venezia Giulia",abbreviation:"FVG"},{name:"Liguria",abbreviation:"LIG"},{name:"Emilia Romagna",abbreviation:"EMR"},{name:"Toscana",abbreviation:"TOS"},{name:"Umbria",abbreviation:"UMB"},{name:"Marche",abbreviation:"MAR"},{name:"Abruzzo",abbreviation:"ABR"},{name:"Lazio",abbreviation:"LAZ"},{name:"Campania",abbreviation:"CAM"},{name:"Puglia",abbreviation:"PUG"},{name:"Basilicata",abbreviation:"BAS"},{name:"Molise",abbreviation:"MOL"},{name:"Calabria",abbreviation:"CAL"},{name:"Sicilia",abbreviation:"SIC"},{name:"Sardegna",abbreviation:"SAR"}],mx:[{name:"Aguascalientes",abbreviation:"AGU"},{name:"Baja California",abbreviation:"BCN"},{name:"Baja California Sur",abbreviation:"BCS"},{name:"Campeche",abbreviation:"CAM"},{name:"Chiapas",abbreviation:"CHP"},{name:"Chihuahua",abbreviation:"CHH"},{name:"Ciudad de México",abbreviation:"DIF"},{name:"Coahuila",abbreviation:"COA"},{name:"Colima",abbreviation:"COL"},{name:"Durango",abbreviation:"DUR"},{name:"Guanajuato",abbreviation:"GUA"},{name:"Guerrero",abbreviation:"GRO"},{name:"Hidalgo",abbreviation:"HID"},{name:"Jalisco",abbreviation:"JAL"},{name:"México",abbreviation:"MEX"},{name:"Michoacán",abbreviation:"MIC"},{name:"Morelos",abbreviation:"MOR"},{name:"Nayarit",abbreviation:"NAY"},{name:"Nuevo León",abbreviation:"NLE"},{name:"Oaxaca",abbreviation:"OAX"},{name:"Puebla",abbreviation:"PUE"},{name:"Querétaro",abbreviation:"QUE"},{name:"Quintana Roo",abbreviation:"ROO"},{name:"San Luis Potosí",abbreviation:"SLP"},{name:"Sinaloa",abbreviation:"SIN"},{name:"Sonora",abbreviation:"SON"},{name:"Tabasco",abbreviation:"TAB"},{name:"Tamaulipas",abbreviation:"TAM"},{name:"Tlaxcala",abbreviation:"TLA"},{name:"Veracruz",abbreviation:"VER"},{name:"Yucatán",abbreviation:"YUC"},{name:"Zacatecas",abbreviation:"ZAC"}]},street_suffixes:{us:[{name:"Avenue",abbreviation:"Ave"},{name:"Boulevard",abbreviation:"Blvd"},{name:"Center",abbreviation:"Ctr"},{name:"Circle",abbreviation:"Cir"},{name:"Court",abbreviation:"Ct"},{name:"Drive",abbreviation:"Dr"},{name:"Extension",abbreviation:"Ext"},{name:"Glen",abbreviation:"Gln"},{name:"Grove",abbreviation:"Grv"},{name:"Heights",abbreviation:"Hts"},{name:"Highway",abbreviation:"Hwy"},{name:"Junction",abbreviation:"Jct"},{name:"Key",abbreviation:"Key"},{name:"Lane",abbreviation:"Ln"},{name:"Loop",abbreviation:"Loop"},{name:"Manor",abbreviation:"Mnr"},{name:"Mill",abbreviation:"Mill"},{name:"Park",abbreviation:"Park"},{name:"Parkway",abbreviation:"Pkwy"},{name:"Pass",abbreviation:"Pass"},{name:"Path",abbreviation:"Path"},{name:"Pike",abbreviation:"Pike"},{name:"Place",abbreviation:"Pl"},{name:"Plaza",abbreviation:"Plz"},{name:"Point",abbreviation:"Pt"},{name:"Ridge",abbreviation:"Rdg"},{name:"River",abbreviation:"Riv"},{name:"Road",abbreviation:"Rd"},{name:"Square",abbreviation:"Sq"},{name:"Street",abbreviation:"St"},{name:"Terrace",abbreviation:"Ter"},{name:"Trail",abbreviation:"Trl"},{name:"Turnpike",abbreviation:"Tpke"},{name:"View",abbreviation:"Vw"},{name:"Way",abbreviation:"Way"}],it:[{name:"Accesso",abbreviation:"Acc."},{name:"Alzaia",abbreviation:"Alz."},{name:"Arco",abbreviation:"Arco"},{name:"Archivolto",abbreviation:"Acv."},{name:"Arena",abbreviation:"Arena"},{name:"Argine",abbreviation:"Argine"},{name:"Bacino",abbreviation:"Bacino"},{name:"Banchi",abbreviation:"Banchi"},{name:"Banchina",abbreviation:"Ban."},{name:"Bastioni",abbreviation:"Bas."},{name:"Belvedere",abbreviation:"Belv."},{name:"Borgata",abbreviation:"B.ta"},{name:"Borgo",abbreviation:"B.go"},{name:"Calata",abbreviation:"Cal."},{name:"Calle",abbreviation:"Calle"},{name:"Campiello",abbreviation:"Cam."},{name:"Campo",abbreviation:"Cam."},{name:"Canale",abbreviation:"Can."},{name:"Carraia",abbreviation:"Carr."},{name:"Cascina",abbreviation:"Cascina"},{name:"Case sparse",abbreviation:"c.s."},{name:"Cavalcavia",abbreviation:"Cv."},{name:"Circonvallazione",abbreviation:"Cv."},{name:"Complanare",abbreviation:"C.re"},{name:"Contrada",abbreviation:"C.da"},{name:"Corso",abbreviation:"C.so"},{name:"Corte",abbreviation:"C.te"},{name:"Cortile",abbreviation:"C.le"},{name:"Diramazione",abbreviation:"Dir."},{name:"Fondaco",abbreviation:"F.co"},{name:"Fondamenta",abbreviation:"F.ta"},{name:"Fondo",abbreviation:"F.do"},{name:"Frazione",abbreviation:"Fr."},{name:"Isola",abbreviation:"Is."},{name:"Largo",abbreviation:"L.go"},{name:"Litoranea",abbreviation:"Lit."},{name:"Lungolago",abbreviation:"L.go lago"},{name:"Lungo Po",abbreviation:"l.go Po"},{name:"Molo",abbreviation:"Molo"},{name:"Mura",abbreviation:"Mura"},{name:"Passaggio privato",abbreviation:"pass. priv."},{name:"Passeggiata",abbreviation:"Pass."},{name:"Piazza",abbreviation:"P.zza"},{name:"Piazzale",abbreviation:"P.le"},{name:"Ponte",abbreviation:"P.te"},{name:"Portico",abbreviation:"P.co"},{name:"Rampa",abbreviation:"Rampa"},{name:"Regione",abbreviation:"Reg."},{name:"Rione",abbreviation:"R.ne"},{name:"Rio",abbreviation:"Rio"},{name:"Ripa",abbreviation:"Ripa"},{name:"Riva",abbreviation:"Riva"},{name:"Rondò",abbreviation:"Rondò"},{name:"Rotonda",abbreviation:"Rot."},{name:"Sagrato",abbreviation:"Sagr."},{name:"Salita",abbreviation:"Sal."},{name:"Scalinata",abbreviation:"Scal."},{name:"Scalone",abbreviation:"Scal."},{name:"Slargo",abbreviation:"Sl."},{name:"Sottoportico",abbreviation:"Sott."},{name:"Strada",abbreviation:"Str."},{name:"Stradale",abbreviation:"Str.le"},{name:"Strettoia",abbreviation:"Strett."},{name:"Traversa",abbreviation:"Trav."},{name:"Via",abbreviation:"V."},{name:"Viale",abbreviation:"V.le"},{name:"Vicinale",abbreviation:"Vic.le"},{name:"Vicolo",abbreviation:"Vic."}],uk:[{name:"Avenue",abbreviation:"Ave"},{name:"Close",abbreviation:"Cl"},{name:"Court",abbreviation:"Ct"},{name:"Crescent",abbreviation:"Cr"},{name:"Drive",abbreviation:"Dr"},{name:"Garden",abbreviation:"Gdn"},{name:"Gardens",abbreviation:"Gdns"},{name:"Green",abbreviation:"Gn"},{name:"Grove",abbreviation:"Gr"},{name:"Lane",abbreviation:"Ln"},{name:"Mount",abbreviation:"Mt"},{name:"Place",abbreviation:"Pl"},{name:"Park",abbreviation:"Pk"},{name:"Ridge",abbreviation:"Rdg"},{name:"Road",abbreviation:"Rd"},{name:"Square",abbreviation:"Sq"},{name:"Street",abbreviation:"St"},{name:"Terrace",abbreviation:"Ter"},{name:"Valley",abbreviation:"Val"}]},months:[{name:"January",short_name:"Jan",numeric:"01",days:31},{name:"February",short_name:"Feb",numeric:"02",days:28},{name:"March",short_name:"Mar",numeric:"03",days:31},{name:"April",short_name:"Apr",numeric:"04",days:30},{name:"May",short_name:"May",numeric:"05",days:31},{name:"June",short_name:"Jun",numeric:"06",days:30},{name:"July",short_name:"Jul",numeric:"07",days:31},{name:"August",short_name:"Aug",numeric:"08",days:31},{name:"September",short_name:"Sep",numeric:"09",days:30},{name:"October",short_name:"Oct",numeric:"10",days:31},{name:"November",short_name:"Nov",numeric:"11",days:30},{name:"December",short_name:"Dec",numeric:"12",days:31}],cc_types:[{name:"American Express",short_name:"amex",prefix:"34",length:15},{name:"Bankcard",short_name:"bankcard",prefix:"5610",length:16},{name:"China UnionPay",short_name:"chinaunion",prefix:"62",length:16},{name:"Diners Club Carte Blanche",short_name:"dccarte",prefix:"300",length:14},{name:"Diners Club enRoute",short_name:"dcenroute",prefix:"2014",length:15},{name:"Diners Club International",short_name:"dcintl",prefix:"36",length:14},{name:"Diners Club United States & Canada",short_name:"dcusc",prefix:"54",length:16},{name:"Discover Card",short_name:"discover",prefix:"6011",length:16},{name:"InstaPayment",short_name:"instapay",prefix:"637",length:16},{name:"JCB",short_name:"jcb",prefix:"3528",length:16},{name:"Laser",short_name:"laser",prefix:"6304",length:16},{name:"Maestro",short_name:"maestro",prefix:"5018",length:16},{name:"Mastercard",short_name:"mc",prefix:"51",length:16},{name:"Solo",short_name:"solo",prefix:"6334",length:16},{name:"Switch",short_name:"switch",prefix:"4903",length:16},{name:"Visa",short_name:"visa",prefix:"4",length:16},{name:"Visa Electron",short_name:"electron",prefix:"4026",length:16}],currency_types:[{code:"AED",name:"United Arab Emirates Dirham"},{code:"AFN",name:"Afghanistan Afghani"},{code:"ALL",name:"Albania Lek"},{code:"AMD",name:"Armenia Dram"},{code:"ANG",name:"Netherlands Antilles Guilder"},{code:"AOA",name:"Angola Kwanza"},{code:"ARS",name:"Argentina Peso"},{code:"AUD",name:"Australia Dollar"},{code:"AWG",name:"Aruba Guilder"},{code:"AZN",name:"Azerbaijan New Manat"},{code:"BAM",name:"Bosnia and Herzegovina Convertible Marka"},{code:"BBD",name:"Barbados Dollar"},{code:"BDT",name:"Bangladesh Taka"},{code:"BGN",name:"Bulgaria Lev"},{code:"BHD",name:"Bahrain Dinar"},{code:"BIF",name:"Burundi Franc"},{code:"BMD",name:"Bermuda Dollar"},{code:"BND",name:"Brunei Darussalam Dollar"},{code:"BOB",name:"Bolivia Boliviano"},{code:"BRL",name:"Brazil Real"},{code:"BSD",name:"Bahamas Dollar"},{code:"BTN",name:"Bhutan Ngultrum"},{code:"BWP",name:"Botswana Pula"},{code:"BYR",name:"Belarus Ruble"},{code:"BZD",name:"Belize Dollar"},{code:"CAD",name:"Canada Dollar"},{code:"CDF",name:"Congo/Kinshasa Franc"},{code:"CHF",name:"Switzerland Franc"},{code:"CLP",name:"Chile Peso"},{code:"CNY",name:"China Yuan Renminbi"},{code:"COP",name:"Colombia Peso"},{code:"CRC",name:"Costa Rica Colon"},{code:"CUC",name:"Cuba Convertible Peso"},{code:"CUP",name:"Cuba Peso"},{code:"CVE",name:"Cape Verde Escudo"},{code:"CZK",name:"Czech Republic Koruna"},{code:"DJF",name:"Djibouti Franc"},{code:"DKK",name:"Denmark Krone"},{code:"DOP",name:"Dominican Republic Peso"},{code:"DZD",name:"Algeria Dinar"},{code:"EGP",name:"Egypt Pound"},{code:"ERN",name:"Eritrea Nakfa"},{code:"ETB",name:"Ethiopia Birr"},{code:"EUR",name:"Euro Member Countries"},{code:"FJD",name:"Fiji Dollar"},{code:"FKP",name:"Falkland Islands (Malvinas) Pound"},{code:"GBP",name:"United Kingdom Pound"},{code:"GEL",name:"Georgia Lari"},{code:"GGP",name:"Guernsey Pound"},{code:"GHS",name:"Ghana Cedi"},{code:"GIP",name:"Gibraltar Pound"},{code:"GMD",name:"Gambia Dalasi"},{code:"GNF",name:"Guinea Franc"},{code:"GTQ",name:"Guatemala Quetzal"},{code:"GYD",name:"Guyana Dollar"},{code:"HKD",name:"Hong Kong Dollar"},{code:"HNL",name:"Honduras Lempira"},{code:"HRK",name:"Croatia Kuna"},{code:"HTG",name:"Haiti Gourde"},{code:"HUF",name:"Hungary Forint"},{code:"IDR",name:"Indonesia Rupiah"},{code:"ILS",name:"Israel Shekel"},{code:"IMP",name:"Isle of Man Pound"},{code:"INR",name:"India Rupee"},{code:"IQD",name:"Iraq Dinar"},{code:"IRR",name:"Iran Rial"},{code:"ISK",name:"Iceland Krona"},{code:"JEP",name:"Jersey Pound"},{code:"JMD",name:"Jamaica Dollar"},{code:"JOD",name:"Jordan Dinar"},{code:"JPY",name:"Japan Yen"},{code:"KES",name:"Kenya Shilling"},{code:"KGS",name:"Kyrgyzstan Som"},{code:"KHR",name:"Cambodia Riel"},{code:"KMF",name:"Comoros Franc"},{code:"KPW",name:"Korea (North) Won"},{code:"KRW",name:"Korea (South) Won"},{code:"KWD",name:"Kuwait Dinar"},{code:"KYD",name:"Cayman Islands Dollar"},{code:"KZT",name:"Kazakhstan Tenge"},{code:"LAK",name:"Laos Kip"},{code:"LBP",name:"Lebanon Pound"},{code:"LKR",name:"Sri Lanka Rupee"},{code:"LRD",name:"Liberia Dollar"},{code:"LSL",name:"Lesotho Loti"},{code:"LTL",name:"Lithuania Litas"},{code:"LYD",name:"Libya Dinar"},{code:"MAD",name:"Morocco Dirham"},{code:"MDL",name:"Moldova Leu"},{code:"MGA",name:"Madagascar Ariary"},{code:"MKD",name:"Macedonia Denar"},{code:"MMK",name:"Myanmar (Burma) Kyat"},{code:"MNT",name:"Mongolia Tughrik"},{code:"MOP",name:"Macau Pataca"},{code:"MRO",name:"Mauritania Ouguiya"},{code:"MUR",name:"Mauritius Rupee"},{code:"MVR",name:"Maldives (Maldive Islands) Rufiyaa"},{code:"MWK",name:"Malawi Kwacha"},{code:"MXN",name:"Mexico Peso"},{code:"MYR",name:"Malaysia Ringgit"},{code:"MZN",name:"Mozambique Metical"},{code:"NAD",name:"Namibia Dollar"},{code:"NGN",name:"Nigeria Naira"},{code:"NIO",name:"Nicaragua Cordoba"},{code:"NOK",name:"Norway Krone"},{code:"NPR",name:"Nepal Rupee"},{code:"NZD",name:"New Zealand Dollar"},{code:"OMR",name:"Oman Rial"},{code:"PAB",name:"Panama Balboa"},{code:"PEN",name:"Peru Nuevo Sol"},{code:"PGK",name:"Papua New Guinea Kina"},{code:"PHP",name:"Philippines Peso"},{code:"PKR",name:"Pakistan Rupee"},{code:"PLN",name:"Poland Zloty"},{code:"PYG",name:"Paraguay Guarani"},{code:"QAR",name:"Qatar Riyal"},{code:"RON",name:"Romania New Leu"},{code:"RSD",name:"Serbia Dinar"},{code:"RUB",name:"Russia Ruble"},{code:"RWF",name:"Rwanda Franc"},{code:"SAR",name:"Saudi Arabia Riyal"},{code:"SBD",name:"Solomon Islands Dollar"},{code:"SCR",name:"Seychelles Rupee"},{code:"SDG",name:"Sudan Pound"},{code:"SEK",name:"Sweden Krona"},{code:"SGD",name:"Singapore Dollar"},{code:"SHP",name:"Saint Helena Pound"},{code:"SLL",name:"Sierra Leone Leone"},{code:"SOS",name:"Somalia Shilling"},{code:"SPL",name:"Seborga Luigino"},{code:"SRD",name:"Suriname Dollar"},{code:"STD",name:"São Tomé and Príncipe Dobra"},{code:"SVC",name:"El Salvador Colon"},{code:"SYP",name:"Syria Pound"},{code:"SZL",name:"Swaziland Lilangeni"},{code:"THB",name:"Thailand Baht"},{code:"TJS",name:"Tajikistan Somoni"},{code:"TMT",name:"Turkmenistan Manat"},{code:"TND",name:"Tunisia Dinar"},{code:"TOP",name:"Tonga Pa'anga"},{code:"TRY",name:"Turkey Lira"},{code:"TTD",name:"Trinidad and Tobago Dollar"},{code:"TVD",name:"Tuvalu Dollar"},{code:"TWD",name:"Taiwan New Dollar"},{code:"TZS",name:"Tanzania Shilling"},{code:"UAH",name:"Ukraine Hryvnia"},{code:"UGX",name:"Uganda Shilling"},{code:"USD",name:"United States Dollar"},{code:"UYU",name:"Uruguay Peso"},{code:"UZS",name:"Uzbekistan Som"},{code:"VEF",name:"Venezuela Bolivar"},{code:"VND",name:"Viet Nam Dong"},{code:"VUV",name:"Vanuatu Vatu"},{code:"WST",name:"Samoa Tala"},{code:"XAF",name:"Communauté Financière Africaine (BEAC) CFA Franc BEAC"},{code:"XCD",name:"East Caribbean Dollar"},{code:"XDR",name:"International Monetary Fund (IMF) Special Drawing Rights"},{code:"XOF",name:"Communauté Financière Africaine (BCEAO) Franc"},{code:"XPF",name:"Comptoirs Français du Pacifique (CFP) Franc"},{code:"YER",name:"Yemen Rial"},{code:"ZAR",name:"South Africa Rand"},{code:"ZMW",name:"Zambia Kwacha"},{code:"ZWD",name:"Zimbabwe Dollar"}],colorNames:["AliceBlue","Black","Navy","DarkBlue","MediumBlue","Blue","DarkGreen","Green","Teal","DarkCyan","DeepSkyBlue","DarkTurquoise","MediumSpringGreen","Lime","SpringGreen","Aqua","Cyan","MidnightBlue","DodgerBlue","LightSeaGreen","ForestGreen","SeaGreen","DarkSlateGray","LimeGreen","MediumSeaGreen","Turquoise","RoyalBlue","SteelBlue","DarkSlateBlue","MediumTurquoise","Indigo","DarkOliveGreen","CadetBlue","CornflowerBlue","RebeccaPurple","MediumAquaMarine","DimGray","SlateBlue","OliveDrab","SlateGray","LightSlateGray","MediumSlateBlue","LawnGreen","Chartreuse","Aquamarine","Maroon","Purple","Olive","Gray","SkyBlue","LightSkyBlue","BlueViolet","DarkRed","DarkMagenta","SaddleBrown","Ivory","White","DarkSeaGreen","LightGreen","MediumPurple","DarkViolet","PaleGreen","DarkOrchid","YellowGreen","Sienna","Brown","DarkGray","LightBlue","GreenYellow","PaleTurquoise","LightSteelBlue","PowderBlue","FireBrick","DarkGoldenRod","MediumOrchid","RosyBrown","DarkKhaki","Silver","MediumVioletRed","IndianRed","Peru","Chocolate","Tan","LightGray","Thistle","Orchid","GoldenRod","PaleVioletRed","Crimson","Gainsboro","Plum","BurlyWood","LightCyan","Lavender","DarkSalmon","Violet","PaleGoldenRod","LightCoral","Khaki","AliceBlue","HoneyDew","Azure","SandyBrown","Wheat","Beige","WhiteSmoke","MintCream","GhostWhite","Salmon","AntiqueWhite","Linen","LightGoldenRodYellow","OldLace","Red","Fuchsia","Magenta","DeepPink","OrangeRed","Tomato","HotPink","Coral","DarkOrange","LightSalmon","Orange","LightPink","Pink","Gold","PeachPuff","NavajoWhite","Moccasin","Bisque","MistyRose","BlanchedAlmond","PapayaWhip","LavenderBlush","SeaShell","Cornsilk","LemonChiffon","FloralWhite","Snow","Yellow","LightYellow"],company:["3Com Corp","3M Company","A.G. Edwards Inc.","Abbott Laboratories","Abercrombie & Fitch Co.","ABM Industries Incorporated","Ace Hardware Corporation","ACT Manufacturing Inc.","Acterna Corp.","Adams Resources & Energy, Inc.","ADC Telecommunications, Inc.","Adelphia Communications Corporation","Administaff, Inc.","Adobe Systems Incorporated","Adolph Coors Company","Advance Auto Parts, Inc.","Advanced Micro Devices, Inc.","AdvancePCS, Inc.","Advantica Restaurant Group, Inc.","The AES Corporation","Aetna Inc.","Affiliated Computer Services, Inc.","AFLAC Incorporated","AGCO Corporation","Agilent Technologies, Inc.","Agway Inc.","Apartment Investment and Management Company","Air Products and Chemicals, Inc.","Airborne, Inc.","Airgas, Inc.","AK Steel Holding Corporation","Alaska Air Group, Inc.","Alberto-Culver Company","Albertson's, Inc.","Alcoa Inc.","Alleghany Corporation","Allegheny Energy, Inc.","Allegheny Technologies Incorporated","Allergan, Inc.","ALLETE, Inc.","Alliant Energy Corporation","Allied Waste Industries, Inc.","Allmerica Financial Corporation","The Allstate Corporation","ALLTEL Corporation","The Alpine Group, Inc.","Amazon.com, Inc.","AMC Entertainment Inc.","American Power Conversion Corporation","Amerada Hess Corporation","AMERCO","Ameren Corporation","America West Holdings Corporation","American Axle & Manufacturing Holdings, Inc.","American Eagle Outfitters, Inc.","American Electric Power Company, Inc.","American Express Company","American Financial Group, Inc.","American Greetings Corporation","American International Group, Inc.","American Standard Companies Inc.","American Water Works Company, Inc.","AmerisourceBergen Corporation","Ames Department Stores, Inc.","Amgen Inc.","Amkor Technology, Inc.","AMR Corporation","AmSouth Bancorp.","Amtran, Inc.","Anadarko Petroleum Corporation","Analog Devices, Inc.","Anheuser-Busch Companies, Inc.","Anixter International Inc.","AnnTaylor Inc.","Anthem, Inc.","AOL Time Warner Inc.","Aon Corporation","Apache Corporation","Apple Computer, Inc.","Applera Corporation","Applied Industrial Technologies, Inc.","Applied Materials, Inc.","Aquila, Inc.","ARAMARK Corporation","Arch Coal, Inc.","Archer Daniels Midland Company","Arkansas Best Corporation","Armstrong Holdings, Inc.","Arrow Electronics, Inc.","ArvinMeritor, Inc.","Ashland Inc.","Astoria Financial Corporation","AT&T Corp.","Atmel Corporation","Atmos Energy Corporation","Audiovox Corporation","Autoliv, Inc.","Automatic Data Processing, Inc.","AutoNation, Inc.","AutoZone, Inc.","Avaya Inc.","Avery Dennison Corporation","Avista Corporation","Avnet, Inc.","Avon Products, Inc.","Baker Hughes Incorporated","Ball Corporation","Bank of America Corporation","The Bank of New York Company, Inc.","Bank One Corporation","Banknorth Group, Inc.","Banta Corporation","Barnes & Noble, Inc.","Bausch & Lomb Incorporated","Baxter International Inc.","BB&T Corporation","The Bear Stearns Companies Inc.","Beazer Homes USA, Inc.","Beckman Coulter, Inc.","Becton, Dickinson and Company","Bed Bath & Beyond Inc.","Belk, Inc.","Bell Microproducts Inc.","BellSouth Corporation","Belo Corp.","Bemis Company, Inc.","Benchmark Electronics, Inc.","Berkshire Hathaway Inc.","Best Buy Co., Inc.","Bethlehem Steel Corporation","Beverly Enterprises, Inc.","Big Lots, Inc.","BJ Services Company","BJ's Wholesale Club, Inc.","The Black & Decker Corporation","Black Hills Corporation","BMC Software, Inc.","The Boeing Company","Boise Cascade Corporation","Borders Group, Inc.","BorgWarner Inc.","Boston Scientific Corporation","Bowater Incorporated","Briggs & Stratton Corporation","Brightpoint, Inc.","Brinker International, Inc.","Bristol-Myers Squibb Company","Broadwing, Inc.","Brown Shoe Company, Inc.","Brown-Forman Corporation","Brunswick Corporation","Budget Group, Inc.","Burlington Coat Factory Warehouse Corporation","Burlington Industries, Inc.","Burlington Northern Santa Fe Corporation","Burlington Resources Inc.","C. H. Robinson Worldwide Inc.","Cablevision Systems Corp","Cabot Corp","Cadence Design Systems, Inc.","Calpine Corp.","Campbell Soup Co.","Capital One Financial Corp.","Cardinal Health Inc.","Caremark Rx Inc.","Carlisle Cos. Inc.","Carpenter Technology Corp.","Casey's General Stores Inc.","Caterpillar Inc.","CBRL Group Inc.","CDI Corp.","CDW Computer Centers Inc.","CellStar Corp.","Cendant Corp","Cenex Harvest States Cooperatives","Centex Corp.","CenturyTel Inc.","Ceridian Corp.","CH2M Hill Cos. Ltd.","Champion Enterprises Inc.","Charles Schwab Corp.","Charming Shoppes Inc.","Charter Communications Inc.","Charter One Financial Inc.","ChevronTexaco Corp.","Chiquita Brands International Inc.","Chubb Corp","Ciena Corp.","Cigna Corp","Cincinnati Financial Corp.","Cinergy Corp.","Cintas Corp.","Circuit City Stores Inc.","Cisco Systems Inc.","Citigroup, Inc","Citizens Communications Co.","CKE Restaurants Inc.","Clear Channel Communications Inc.","The Clorox Co.","CMGI Inc.","CMS Energy Corp.","CNF Inc.","Coca-Cola Co.","Coca-Cola Enterprises Inc.","Colgate-Palmolive Co.","Collins & Aikman Corp.","Comcast Corp.","Comdisco Inc.","Comerica Inc.","Comfort Systems USA Inc.","Commercial Metals Co.","Community Health Systems Inc.","Compass Bancshares Inc","Computer Associates International Inc.","Computer Sciences Corp.","Compuware Corp.","Comverse Technology Inc.","ConAgra Foods Inc.","Concord EFS Inc.","Conectiv, Inc","Conoco Inc","Conseco Inc.","Consolidated Freightways Corp.","Consolidated Edison Inc.","Constellation Brands Inc.","Constellation Emergy Group Inc.","Continental Airlines Inc.","Convergys Corp.","Cooper Cameron Corp.","Cooper Industries Ltd.","Cooper Tire & Rubber Co.","Corn Products International Inc.","Corning Inc.","Costco Wholesale Corp.","Countrywide Credit Industries Inc.","Coventry Health Care Inc.","Cox Communications Inc.","Crane Co.","Crompton Corp.","Crown Cork & Seal Co. Inc.","CSK Auto Corp.","CSX Corp.","Cummins Inc.","CVS Corp.","Cytec Industries Inc.","D&K Healthcare Resources, Inc.","D.R. Horton Inc.","Dana Corporation","Danaher Corporation","Darden Restaurants Inc.","DaVita Inc.","Dean Foods Company","Deere & Company","Del Monte Foods Co","Dell Computer Corporation","Delphi Corp.","Delta Air Lines Inc.","Deluxe Corporation","Devon Energy Corporation","Di Giorgio Corporation","Dial Corporation","Diebold Incorporated","Dillard's Inc.","DIMON Incorporated","Dole Food Company, Inc.","Dollar General Corporation","Dollar Tree Stores, Inc.","Dominion Resources, Inc.","Domino's Pizza LLC","Dover Corporation, Inc.","Dow Chemical Company","Dow Jones & Company, Inc.","DPL Inc.","DQE Inc.","Dreyer's Grand Ice Cream, Inc.","DST Systems, Inc.","DTE Energy Co.","E.I. Du Pont de Nemours and Company","Duke Energy Corp","Dun & Bradstreet Inc.","DURA Automotive Systems Inc.","DynCorp","Dynegy Inc.","E*Trade Group, Inc.","E.W. Scripps Company","Earthlink, Inc.","Eastman Chemical Company","Eastman Kodak Company","Eaton Corporation","Echostar Communications Corporation","Ecolab Inc.","Edison International","EGL Inc.","El Paso Corporation","Electronic Arts Inc.","Electronic Data Systems Corp.","Eli Lilly and Company","EMC Corporation","Emcor Group Inc.","Emerson Electric Co.","Encompass Services Corporation","Energizer Holdings Inc.","Energy East Corporation","Engelhard Corporation","Enron Corp.","Entergy Corporation","Enterprise Products Partners L.P.","EOG Resources, Inc.","Equifax Inc.","Equitable Resources Inc.","Equity Office Properties Trust","Equity Residential Properties Trust","Estee Lauder Companies Inc.","Exelon Corporation","Exide Technologies","Expeditors International of Washington Inc.","Express Scripts Inc.","ExxonMobil Corporation","Fairchild Semiconductor International Inc.","Family Dollar Stores Inc.","Farmland Industries Inc.","Federal Mogul Corp.","Federated Department Stores Inc.","Federal Express Corp.","Felcor Lodging Trust Inc.","Ferro Corp.","Fidelity National Financial Inc.","Fifth Third Bancorp","First American Financial Corp.","First Data Corp.","First National of Nebraska Inc.","First Tennessee National Corp.","FirstEnergy Corp.","Fiserv Inc.","Fisher Scientific International Inc.","FleetBoston Financial Co.","Fleetwood Enterprises Inc.","Fleming Companies Inc.","Flowers Foods Inc.","Flowserv Corp","Fluor Corp","FMC Corp","Foamex International Inc","Foot Locker Inc","Footstar Inc.","Ford Motor Co","Forest Laboratories Inc.","Fortune Brands Inc.","Foster Wheeler Ltd.","FPL Group Inc.","Franklin Resources Inc.","Freeport McMoran Copper & Gold Inc.","Frontier Oil Corp","Furniture Brands International Inc.","Gannett Co., Inc.","Gap Inc.","Gateway Inc.","GATX Corporation","Gemstar-TV Guide International Inc.","GenCorp Inc.","General Cable Corporation","General Dynamics Corporation","General Electric Company","General Mills Inc","General Motors Corporation","Genesis Health Ventures Inc.","Gentek Inc.","Gentiva Health Services Inc.","Genuine Parts Company","Genuity Inc.","Genzyme Corporation","Georgia Gulf Corporation","Georgia-Pacific Corporation","Gillette Company","Gold Kist Inc.","Golden State Bancorp Inc.","Golden West Financial Corporation","Goldman Sachs Group Inc.","Goodrich Corporation","The Goodyear Tire & Rubber Company","Granite Construction Incorporated","Graybar Electric Company Inc.","Great Lakes Chemical Corporation","Great Plains Energy Inc.","GreenPoint Financial Corp.","Greif Bros. Corporation","Grey Global Group Inc.","Group 1 Automotive Inc.","Guidant Corporation","H&R Block Inc.","H.B. Fuller Company","H.J. Heinz Company","Halliburton Co.","Harley-Davidson Inc.","Harman International Industries Inc.","Harrah's Entertainment Inc.","Harris Corp.","Harsco Corp.","Hartford Financial Services Group Inc.","Hasbro Inc.","Hawaiian Electric Industries Inc.","HCA Inc.","Health Management Associates Inc.","Health Net Inc.","Healthsouth Corp","Henry Schein Inc.","Hercules Inc.","Herman Miller Inc.","Hershey Foods Corp.","Hewlett-Packard Company","Hibernia Corp.","Hillenbrand Industries Inc.","Hilton Hotels Corp.","Hollywood Entertainment Corp.","Home Depot Inc.","Hon Industries Inc.","Honeywell International Inc.","Hormel Foods Corp.","Host Marriott Corp.","Household International Corp.","Hovnanian Enterprises Inc.","Hub Group Inc.","Hubbell Inc.","Hughes Supply Inc.","Humana Inc.","Huntington Bancshares Inc.","Idacorp Inc.","IDT Corporation","IKON Office Solutions Inc.","Illinois Tool Works Inc.","IMC Global Inc.","Imperial Sugar Company","IMS Health Inc.","Ingles Market Inc","Ingram Micro Inc.","Insight Enterprises Inc.","Integrated Electrical Services Inc.","Intel Corporation","International Paper Co.","Interpublic Group of Companies Inc.","Interstate Bakeries Corporation","International Business Machines Corp.","International Flavors & Fragrances Inc.","International Multifoods Corporation","Intuit Inc.","IT Group Inc.","ITT Industries Inc.","Ivax Corp.","J.B. Hunt Transport Services Inc.","J.C. Penny Co.","J.P. Morgan Chase & Co.","Jabil Circuit Inc.","Jack In The Box Inc.","Jacobs Engineering Group Inc.","JDS Uniphase Corp.","Jefferson-Pilot Co.","John Hancock Financial Services Inc.","Johnson & Johnson","Johnson Controls Inc.","Jones Apparel Group Inc.","KB Home","Kellogg Company","Kellwood Company","Kelly Services Inc.","Kemet Corp.","Kennametal Inc.","Kerr-McGee Corporation","KeyCorp","KeySpan Corp.","Kimball International Inc.","Kimberly-Clark Corporation","Kindred Healthcare Inc.","KLA-Tencor Corporation","K-Mart Corp.","Knight-Ridder Inc.","Kohl's Corp.","KPMG Consulting Inc.","Kroger Co.","L-3 Communications Holdings Inc.","Laboratory Corporation of America Holdings","Lam Research Corporation","LandAmerica Financial Group Inc.","Lands' End Inc.","Landstar System Inc.","La-Z-Boy Inc.","Lear Corporation","Legg Mason Inc.","Leggett & Platt Inc.","Lehman Brothers Holdings Inc.","Lennar Corporation","Lennox International Inc.","Level 3 Communications Inc.","Levi Strauss & Co.","Lexmark International Inc.","Limited Inc.","Lincoln National Corporation","Linens 'n Things Inc.","Lithia Motors Inc.","Liz Claiborne Inc.","Lockheed Martin Corporation","Loews Corporation","Longs Drug Stores Corporation","Louisiana-Pacific Corporation","Lowe's Companies Inc.","LSI Logic Corporation","The LTV Corporation","The Lubrizol Corporation","Lucent Technologies Inc.","Lyondell Chemical Company","M & T Bank Corporation","Magellan Health Services Inc.","Mail-Well Inc.","Mandalay Resort Group","Manor Care Inc.","Manpower Inc.","Marathon Oil Corporation","Mariner Health Care Inc.","Markel Corporation","Marriott International Inc.","Marsh & McLennan Companies Inc.","Marsh Supermarkets Inc.","Marshall & Ilsley Corporation","Martin Marietta Materials Inc.","Masco Corporation","Massey Energy Company","MasTec Inc.","Mattel Inc.","Maxim Integrated Products Inc.","Maxtor Corporation","Maxxam Inc.","The May Department Stores Company","Maytag Corporation","MBNA Corporation","McCormick & Company Incorporated","McDonald's Corporation","The McGraw-Hill Companies Inc.","McKesson Corporation","McLeodUSA Incorporated","M.D.C. Holdings Inc.","MDU Resources Group Inc.","MeadWestvaco Corporation","Medtronic Inc.","Mellon Financial Corporation","The Men's Wearhouse Inc.","Merck & Co., Inc.","Mercury General Corporation","Merrill Lynch & Co. Inc.","Metaldyne Corporation","Metals USA Inc.","MetLife Inc.","Metris Companies Inc","MGIC Investment Corporation","MGM Mirage","Michaels Stores Inc.","Micron Technology Inc.","Microsoft Corporation","Milacron Inc.","Millennium Chemicals Inc.","Mirant Corporation","Mohawk Industries Inc.","Molex Incorporated","The MONY Group Inc.","Morgan Stanley Dean Witter & Co.","Motorola Inc.","MPS Group Inc.","Murphy Oil Corporation","Nabors Industries Inc","Nacco Industries Inc","Nash Finch Company","National City Corp.","National Commerce Financial Corporation","National Fuel Gas Company","National Oilwell Inc","National Rural Utilities Cooperative Finance Corporation","National Semiconductor Corporation","National Service Industries Inc","Navistar International Corporation","NCR Corporation","The Neiman Marcus Group Inc.","New Jersey Resources Corporation","New York Times Company","Newell Rubbermaid Inc","Newmont Mining Corporation","Nextel Communications Inc","Nicor Inc","Nike Inc","NiSource Inc","Noble Energy Inc","Nordstrom Inc","Norfolk Southern Corporation","Nortek Inc","North Fork Bancorporation Inc","Northeast Utilities System","Northern Trust Corporation","Northrop Grumman Corporation","NorthWestern Corporation","Novellus Systems Inc","NSTAR","NTL Incorporated","Nucor Corp","Nvidia Corp","NVR Inc","Northwest Airlines Corp","Occidental Petroleum Corp","Ocean Energy Inc","Office Depot Inc.","OfficeMax Inc","OGE Energy Corp","Oglethorpe Power Corp.","Ohio Casualty Corp.","Old Republic International Corp.","Olin Corp.","OM Group Inc","Omnicare Inc","Omnicom Group","On Semiconductor Corp","ONEOK Inc","Oracle Corp","Oshkosh Truck Corp","Outback Steakhouse Inc.","Owens & Minor Inc.","Owens Corning","Owens-Illinois Inc","Oxford Health Plans Inc","Paccar Inc","PacifiCare Health Systems Inc","Packaging Corp. of America","Pactiv Corp","Pall Corp","Pantry Inc","Park Place Entertainment Corp","Parker Hannifin Corp.","Pathmark Stores Inc.","Paychex Inc","Payless Shoesource Inc","Penn Traffic Co.","Pennzoil-Quaker State Company","Pentair Inc","Peoples Energy Corp.","PeopleSoft Inc","Pep Boys Manny, Moe & Jack","Potomac Electric Power Co.","Pepsi Bottling Group Inc.","PepsiAmericas Inc.","PepsiCo Inc.","Performance Food Group Co.","Perini Corp","PerkinElmer Inc","Perot Systems Corp","Petco Animal Supplies Inc.","Peter Kiewit Sons', Inc.","PETsMART Inc","Pfizer Inc","Pacific Gas & Electric Corp.","Pharmacia Corp","Phar Mor Inc.","Phelps Dodge Corp.","Philip Morris Companies Inc.","Phillips Petroleum Co","Phillips Van Heusen Corp.","Phoenix Companies Inc","Pier 1 Imports Inc.","Pilgrim's Pride Corporation","Pinnacle West Capital Corp","Pioneer-Standard Electronics Inc.","Pitney Bowes Inc.","Pittston Brinks Group","Plains All American Pipeline LP","PNC Financial Services Group Inc.","PNM Resources Inc","Polaris Industries Inc.","Polo Ralph Lauren Corp","PolyOne Corp","Popular Inc","Potlatch Corp","PPG Industries Inc","PPL Corp","Praxair Inc","Precision Castparts Corp","Premcor Inc.","Pride International Inc","Primedia Inc","Principal Financial Group Inc.","Procter & Gamble Co.","Pro-Fac Cooperative Inc.","Progress Energy Inc","Progressive Corporation","Protective Life Corp","Provident Financial Group","Providian Financial Corp.","Prudential Financial Inc.","PSS World Medical Inc","Public Service Enterprise Group Inc.","Publix Super Markets Inc.","Puget Energy Inc.","Pulte Homes Inc","Qualcomm Inc","Quanta Services Inc.","Quantum Corp","Quest Diagnostics Inc.","Questar Corp","Quintiles Transnational","Qwest Communications Intl Inc","R.J. Reynolds Tobacco Company","R.R. Donnelley & Sons Company","Radio Shack Corporation","Raymond James Financial Inc.","Raytheon Company","Reader's Digest Association Inc.","Reebok International Ltd.","Regions Financial Corp.","Regis Corporation","Reliance Steel & Aluminum Co.","Reliant Energy Inc.","Rent A Center Inc","Republic Services Inc","Revlon Inc","RGS Energy Group Inc","Rite Aid Corp","Riverwood Holding Inc.","RoadwayCorp","Robert Half International Inc.","Rock-Tenn Co","Rockwell Automation Inc","Rockwell Collins Inc","Rohm & Haas Co.","Ross Stores Inc","RPM Inc.","Ruddick Corp","Ryder System Inc","Ryerson Tull Inc","Ryland Group Inc.","Sabre Holdings Corp","Safeco Corp","Safeguard Scientifics Inc.","Safeway Inc","Saks Inc","Sanmina-SCI Inc","Sara Lee Corp","SBC Communications Inc","Scana Corp.","Schering-Plough Corp","Scholastic Corp","SCI Systems Onc.","Science Applications Intl. Inc.","Scientific-Atlanta Inc","Scotts Company","Seaboard Corp","Sealed Air Corp","Sears Roebuck & Co","Sempra Energy","Sequa Corp","Service Corp. International","ServiceMaster Co","Shaw Group Inc","Sherwin-Williams Company","Shopko Stores Inc","Siebel Systems Inc","Sierra Health Services Inc","Sierra Pacific Resources","Silgan Holdings Inc.","Silicon Graphics Inc","Simon Property Group Inc","SLM Corporation","Smith International Inc","Smithfield Foods Inc","Smurfit-Stone Container Corp","Snap-On Inc","Solectron Corp","Solutia Inc","Sonic Automotive Inc.","Sonoco Products Co.","Southern Company","Southern Union Company","SouthTrust Corp.","Southwest Airlines Co","Southwest Gas Corp","Sovereign Bancorp Inc.","Spartan Stores Inc","Spherion Corp","Sports Authority Inc","Sprint Corp.","SPX Corp","St. Jude Medical Inc","St. Paul Cos.","Staff Leasing Inc.","StanCorp Financial Group Inc","Standard Pacific Corp.","Stanley Works","Staples Inc","Starbucks Corp","Starwood Hotels & Resorts Worldwide Inc","State Street Corp.","Stater Bros. Holdings Inc.","Steelcase Inc","Stein Mart Inc","Stewart & Stevenson Services Inc","Stewart Information Services Corp","Stilwell Financial Inc","Storage Technology Corporation","Stryker Corp","Sun Healthcare Group Inc.","Sun Microsystems Inc.","SunGard Data Systems Inc.","Sunoco Inc.","SunTrust Banks Inc","Supervalu Inc","Swift Transportation, Co., Inc","Symbol Technologies Inc","Synovus Financial Corp.","Sysco Corp","Systemax Inc.","Target Corp.","Tech Data Corporation","TECO Energy Inc","Tecumseh Products Company","Tektronix Inc","Teleflex Incorporated","Telephone & Data Systems Inc","Tellabs Inc.","Temple-Inland Inc","Tenet Healthcare Corporation","Tenneco Automotive Inc.","Teradyne Inc","Terex Corp","Tesoro Petroleum Corp.","Texas Industries Inc.","Texas Instruments Incorporated","Textron Inc","Thermo Electron Corporation","Thomas & Betts Corporation","Tiffany & Co","Timken Company","TJX Companies Inc","TMP Worldwide Inc","Toll Brothers Inc","Torchmark Corporation","Toro Company","Tower Automotive Inc.","Toys 'R' Us Inc","Trans World Entertainment Corp.","TransMontaigne Inc","Transocean Inc","TravelCenters of America Inc.","Triad Hospitals Inc","Tribune Company","Trigon Healthcare Inc.","Trinity Industries Inc","Trump Hotels & Casino Resorts Inc.","TruServ Corporation","TRW Inc","TXU Corp","Tyson Foods Inc","U.S. Bancorp","U.S. Industries Inc.","UAL Corporation","UGI Corporation","Unified Western Grocers Inc","Union Pacific Corporation","Union Planters Corp","Unisource Energy Corp","Unisys Corporation","United Auto Group Inc","United Defense Industries Inc.","United Parcel Service Inc","United Rentals Inc","United Stationers Inc","United Technologies Corporation","UnitedHealth Group Incorporated","Unitrin Inc","Universal Corporation","Universal Forest Products Inc","Universal Health Services Inc","Unocal Corporation","Unova Inc","UnumProvident Corporation","URS Corporation","US Airways Group Inc","US Oncology Inc","USA Interactive","USFreighways Corporation","USG Corporation","UST Inc","Valero Energy Corporation","Valspar Corporation","Value City Department Stores Inc","Varco International Inc","Vectren Corporation","Veritas Software Corporation","Verizon Communications Inc","VF Corporation","Viacom Inc","Viad Corp","Viasystems Group Inc","Vishay Intertechnology Inc","Visteon Corporation","Volt Information Sciences Inc","Vulcan Materials Company","W.R. Berkley Corporation","W.R. Grace & Co","W.W. Grainger Inc","Wachovia Corporation","Wakenhut Corporation","Walgreen Co","Wallace Computer Services Inc","Wal-Mart Stores Inc","Walt Disney Co","Walter Industries Inc","Washington Mutual Inc","Washington Post Co.","Waste Management Inc","Watsco Inc","Weatherford International Inc","Weis Markets Inc.","Wellpoint Health Networks Inc","Wells Fargo & Company","Wendy's International Inc","Werner Enterprises Inc","WESCO International Inc","Western Digital Inc","Western Gas Resources Inc","WestPoint Stevens Inc","Weyerhauser Company","WGL Holdings Inc","Whirlpool Corporation","Whole Foods Market Inc","Willamette Industries Inc.","Williams Companies Inc","Williams Sonoma Inc","Winn Dixie Stores Inc","Wisconsin Energy Corporation","Wm Wrigley Jr Company","World Fuel Services Corporation","WorldCom Inc","Worthington Industries Inc","WPS Resources Corporation","Wyeth","Wyndham International Inc","Xcel Energy Inc","Xerox Corp","Xilinx Inc","XO Communications Inc","Yellow Corporation","York International Corp","Yum Brands Inc.","Zale Corporation","Zions Bancorporation"],fileExtension:{raster:["bmp","gif","gpl","ico","jpeg","psd","png","psp","raw","tiff"],vector:["3dv","amf","awg","ai","cgm","cdr","cmx","dxf","e2d","egt","eps","fs","odg","svg","xar"],"3d":["3dmf","3dm","3mf","3ds","an8","aoi","blend","cal3d","cob","ctm","iob","jas","max","mb","mdx","obj","x","x3d"],document:["doc","docx","dot","html","xml","odt","odm","ott","csv","rtf","tex","xhtml","xps"]},timezones:[{name:"Dateline Standard Time",abbr:"DST",offset:-12,isdst:!1,text:"(UTC-12:00) International Date Line West",utc:["Etc/GMT+12"]},{name:"UTC-11",abbr:"U",offset:-11,isdst:!1,text:"(UTC-11:00) Coordinated Universal Time-11",utc:["Etc/GMT+11","Pacific/Midway","Pacific/Niue","Pacific/Pago_Pago"]},{name:"Hawaiian Standard Time",abbr:"HST",offset:-10,isdst:!1,text:"(UTC-10:00) Hawaii",utc:["Etc/GMT+10","Pacific/Honolulu","Pacific/Johnston","Pacific/Rarotonga","Pacific/Tahiti"]},{name:"Alaskan Standard Time",abbr:"AKDT",offset:-8,isdst:!0,text:"(UTC-09:00) Alaska",utc:["America/Anchorage","America/Juneau","America/Nome","America/Sitka","America/Yakutat"]},{name:"Pacific Standard Time (Mexico)",abbr:"PDT",offset:-7,isdst:!0,text:"(UTC-08:00) Baja California",utc:["America/Santa_Isabel"]},{name:"Pacific Daylight Time",abbr:"PDT",offset:-7,isdst:!0,text:"(UTC-07:00) Pacific Time (US & Canada)",utc:["America/Dawson","America/Los_Angeles","America/Tijuana","America/Vancouver","America/Whitehorse"]},{name:"Pacific Standard Time",abbr:"PST",offset:-8,isdst:!1,text:"(UTC-08:00) Pacific Time (US & Canada)",utc:["America/Dawson","America/Los_Angeles","America/Tijuana","America/Vancouver","America/Whitehorse","PST8PDT"]},{name:"US Mountain Standard Time",abbr:"UMST",offset:-7,isdst:!1,text:"(UTC-07:00) Arizona",utc:["America/Creston","America/Dawson_Creek","America/Hermosillo","America/Phoenix","Etc/GMT+7"]},{name:"Mountain Standard Time (Mexico)",abbr:"MDT",offset:-6,isdst:!0,text:"(UTC-07:00) Chihuahua, La Paz, Mazatlan",utc:["America/Chihuahua","America/Mazatlan"]},{name:"Mountain Standard Time",abbr:"MDT",offset:-6,isdst:!0,text:"(UTC-07:00) Mountain Time (US & Canada)",utc:["America/Boise","America/Cambridge_Bay","America/Denver","America/Edmonton","America/Inuvik","America/Ojinaga","America/Yellowknife","MST7MDT"]},{name:"Central America Standard Time",abbr:"CAST",offset:-6,isdst:!1,text:"(UTC-06:00) Central America",utc:["America/Belize","America/Costa_Rica","America/El_Salvador","America/Guatemala","America/Managua","America/Tegucigalpa","Etc/GMT+6","Pacific/Galapagos"]},{name:"Central Standard Time",abbr:"CDT",offset:-5,isdst:!0,text:"(UTC-06:00) Central Time (US & Canada)",utc:["America/Chicago","America/Indiana/Knox","America/Indiana/Tell_City","America/Matamoros","America/Menominee","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Rainy_River","America/Rankin_Inlet","America/Resolute","America/Winnipeg","CST6CDT"]},{name:"Central Standard Time (Mexico)",abbr:"CDT",offset:-5,isdst:!0,text:"(UTC-06:00) Guadalajara, Mexico City, Monterrey",utc:["America/Bahia_Banderas","America/Cancun","America/Merida","America/Mexico_City","America/Monterrey"]},{name:"Canada Central Standard Time",abbr:"CCST",offset:-6,isdst:!1,text:"(UTC-06:00) Saskatchewan",utc:["America/Regina","America/Swift_Current"]},{name:"SA Pacific Standard Time",abbr:"SPST",offset:-5,isdst:!1,text:"(UTC-05:00) Bogota, Lima, Quito",utc:["America/Bogota","America/Cayman","America/Coral_Harbour","America/Eirunepe","America/Guayaquil","America/Jamaica","America/Lima","America/Panama","America/Rio_Branco","Etc/GMT+5"]},{name:"Eastern Standard Time",abbr:"EDT",offset:-4,isdst:!0,text:"(UTC-05:00) Eastern Time (US & Canada)",utc:["America/Detroit","America/Havana","America/Indiana/Petersburg","America/Indiana/Vincennes","America/Indiana/Winamac","America/Iqaluit","America/Kentucky/Monticello","America/Louisville","America/Montreal","America/Nassau","America/New_York","America/Nipigon","America/Pangnirtung","America/Port-au-Prince","America/Thunder_Bay","America/Toronto","EST5EDT"]},{name:"US Eastern Standard Time",abbr:"UEDT",offset:-4,isdst:!0,text:"(UTC-05:00) Indiana (East)",utc:["America/Indiana/Marengo","America/Indiana/Vevay","America/Indianapolis"]},{name:"Venezuela Standard Time",abbr:"VST",offset:-4.5,isdst:!1,text:"(UTC-04:30) Caracas",utc:["America/Caracas"]},{name:"Paraguay Standard Time",abbr:"PYT",offset:-4,isdst:!1,text:"(UTC-04:00) Asuncion",utc:["America/Asuncion"]},{name:"Atlantic Standard Time",abbr:"ADT",offset:-3,isdst:!0,text:"(UTC-04:00) Atlantic Time (Canada)",utc:["America/Glace_Bay","America/Goose_Bay","America/Halifax","America/Moncton","America/Thule","Atlantic/Bermuda"]},{name:"Central Brazilian Standard Time",abbr:"CBST",offset:-4,isdst:!1,text:"(UTC-04:00) Cuiaba",utc:["America/Campo_Grande","America/Cuiaba"]},{name:"SA Western Standard Time",abbr:"SWST",offset:-4,isdst:!1,text:"(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",utc:["America/Anguilla","America/Antigua","America/Aruba","America/Barbados","America/Blanc-Sablon","America/Boa_Vista","America/Curacao","America/Dominica","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guyana","America/Kralendijk","America/La_Paz","America/Lower_Princes","America/Manaus","America/Marigot","America/Martinique","America/Montserrat","America/Port_of_Spain","America/Porto_Velho","America/Puerto_Rico","America/Santo_Domingo","America/St_Barthelemy","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Tortola","Etc/GMT+4"]},{name:"Pacific SA Standard Time",abbr:"PSST",offset:-4,isdst:!1,text:"(UTC-04:00) Santiago",utc:["America/Santiago","Antarctica/Palmer"]},{name:"Newfoundland Standard Time",abbr:"NDT",offset:-2.5,isdst:!0,text:"(UTC-03:30) Newfoundland",utc:["America/St_Johns"]},{name:"E. South America Standard Time",abbr:"ESAST",offset:-3,isdst:!1,text:"(UTC-03:00) Brasilia",utc:["America/Sao_Paulo"]},{name:"Argentina Standard Time",abbr:"AST",offset:-3,isdst:!1,text:"(UTC-03:00) Buenos Aires",utc:["America/Argentina/La_Rioja","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Buenos_Aires","America/Catamarca","America/Cordoba","America/Jujuy","America/Mendoza"]},{name:"SA Eastern Standard Time",abbr:"SEST",offset:-3,isdst:!1,text:"(UTC-03:00) Cayenne, Fortaleza",utc:["America/Araguaina","America/Belem","America/Cayenne","America/Fortaleza","America/Maceio","America/Paramaribo","America/Recife","America/Santarem","Antarctica/Rothera","Atlantic/Stanley","Etc/GMT+3"]},{name:"Greenland Standard Time",abbr:"GDT",offset:-3,isdst:!0,text:"(UTC-03:00) Greenland",utc:["America/Godthab"]},{name:"Montevideo Standard Time",abbr:"MST",offset:-3,isdst:!1,text:"(UTC-03:00) Montevideo",utc:["America/Montevideo"]},{name:"Bahia Standard Time",abbr:"BST",offset:-3,isdst:!1,text:"(UTC-03:00) Salvador",utc:["America/Bahia"]},{name:"UTC-02",abbr:"U",offset:-2,isdst:!1,text:"(UTC-02:00) Coordinated Universal Time-02",utc:["America/Noronha","Atlantic/South_Georgia","Etc/GMT+2"]},{name:"Mid-Atlantic Standard Time",abbr:"MDT",offset:-1,isdst:!0,text:"(UTC-02:00) Mid-Atlantic - Old",utc:[]},{name:"Azores Standard Time",abbr:"ADT",offset:0,isdst:!0,text:"(UTC-01:00) Azores",utc:["America/Scoresbysund","Atlantic/Azores"]},{name:"Cape Verde Standard Time",abbr:"CVST",offset:-1,isdst:!1,text:"(UTC-01:00) Cape Verde Is.",utc:["Atlantic/Cape_Verde","Etc/GMT+1"]},{name:"Morocco Standard Time",abbr:"MDT",offset:1,isdst:!0,text:"(UTC) Casablanca",utc:["Africa/Casablanca","Africa/El_Aaiun"]},{name:"UTC",abbr:"UTC",offset:0,isdst:!1,text:"(UTC) Coordinated Universal Time",utc:["America/Danmarkshavn","Etc/GMT"]},{name:"GMT Standard Time",abbr:"GMT",offset:0,isdst:!1,text:"(UTC) Edinburgh, London",utc:["Europe/Isle_of_Man","Europe/Guernsey","Europe/Jersey","Europe/London"]},{name:"British Summer Time",abbr:"BST",offset:1,isdst:!0,text:"(UTC+01:00) Edinburgh, London",utc:["Europe/Isle_of_Man","Europe/Guernsey","Europe/Jersey","Europe/London"]},{name:"GMT Standard Time",abbr:"GDT",offset:1,isdst:!0,text:"(UTC) Dublin, Lisbon",utc:["Atlantic/Canary","Atlantic/Faeroe","Atlantic/Madeira","Europe/Dublin","Europe/Lisbon"]},{name:"Greenwich Standard Time",abbr:"GST",offset:0,isdst:!1,text:"(UTC) Monrovia, Reykjavik",utc:["Africa/Abidjan","Africa/Accra","Africa/Bamako","Africa/Banjul","Africa/Bissau","Africa/Conakry","Africa/Dakar","Africa/Freetown","Africa/Lome","Africa/Monrovia","Africa/Nouakchott","Africa/Ouagadougou","Africa/Sao_Tome","Atlantic/Reykjavik","Atlantic/St_Helena"]},{name:"W. Europe Standard Time",abbr:"WEDT",offset:2,isdst:!0,text:"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",utc:["Arctic/Longyearbyen","Europe/Amsterdam","Europe/Andorra","Europe/Berlin","Europe/Busingen","Europe/Gibraltar","Europe/Luxembourg","Europe/Malta","Europe/Monaco","Europe/Oslo","Europe/Rome","Europe/San_Marino","Europe/Stockholm","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Zurich"]},{name:"Central Europe Standard Time",abbr:"CEDT",offset:2,isdst:!0,text:"(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",utc:["Europe/Belgrade","Europe/Bratislava","Europe/Budapest","Europe/Ljubljana","Europe/Podgorica","Europe/Prague","Europe/Tirane"]},{name:"Romance Standard Time",abbr:"RDT",offset:2,isdst:!0,text:"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",utc:["Africa/Ceuta","Europe/Brussels","Europe/Copenhagen","Europe/Madrid","Europe/Paris"]},{name:"Central European Standard Time",abbr:"CEDT",offset:2,isdst:!0,text:"(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",utc:["Europe/Sarajevo","Europe/Skopje","Europe/Warsaw","Europe/Zagreb"]},{name:"W. Central Africa Standard Time",abbr:"WCAST",offset:1,isdst:!1,text:"(UTC+01:00) West Central Africa",utc:["Africa/Algiers","Africa/Bangui","Africa/Brazzaville","Africa/Douala","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Luanda","Africa/Malabo","Africa/Ndjamena","Africa/Niamey","Africa/Porto-Novo","Africa/Tunis","Etc/GMT-1"]},{name:"Namibia Standard Time",abbr:"NST",offset:1,isdst:!1,text:"(UTC+01:00) Windhoek",utc:["Africa/Windhoek"]},{name:"GTB Standard Time",abbr:"GDT",offset:3,isdst:!0,text:"(UTC+02:00) Athens, Bucharest",utc:["Asia/Nicosia","Europe/Athens","Europe/Bucharest","Europe/Chisinau"]},{name:"Middle East Standard Time",abbr:"MEDT",offset:3,isdst:!0,text:"(UTC+02:00) Beirut",utc:["Asia/Beirut"]},{name:"Egypt Standard Time",abbr:"EST",offset:2,isdst:!1,text:"(UTC+02:00) Cairo",utc:["Africa/Cairo"]},{name:"Syria Standard Time",abbr:"SDT",offset:3,isdst:!0,text:"(UTC+02:00) Damascus",utc:["Asia/Damascus"]},{name:"E. Europe Standard Time",abbr:"EEDT",offset:3,isdst:!0,text:"(UTC+02:00) E. Europe",utc:["Asia/Nicosia","Europe/Athens","Europe/Bucharest","Europe/Chisinau","Europe/Helsinki","Europe/Kiev","Europe/Mariehamn","Europe/Nicosia","Europe/Riga","Europe/Sofia","Europe/Tallinn","Europe/Uzhgorod","Europe/Vilnius","Europe/Zaporozhye"]},{name:"South Africa Standard Time",abbr:"SAST",offset:2,isdst:!1,text:"(UTC+02:00) Harare, Pretoria",utc:["Africa/Blantyre","Africa/Bujumbura","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Kigali","Africa/Lubumbashi","Africa/Lusaka","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Etc/GMT-2"]},{name:"FLE Standard Time",abbr:"FDT",offset:3,isdst:!0,text:"(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",utc:["Europe/Helsinki","Europe/Kiev","Europe/Mariehamn","Europe/Riga","Europe/Sofia","Europe/Tallinn","Europe/Uzhgorod","Europe/Vilnius","Europe/Zaporozhye"]},{name:"Turkey Standard Time",abbr:"TDT",offset:3,isdst:!1,text:"(UTC+03:00) Istanbul",utc:["Europe/Istanbul"]},{name:"Israel Standard Time",abbr:"JDT",offset:3,isdst:!0,text:"(UTC+02:00) Jerusalem",utc:["Asia/Jerusalem"]},{name:"Libya Standard Time",abbr:"LST",offset:2,isdst:!1,text:"(UTC+02:00) Tripoli",utc:["Africa/Tripoli"]},{name:"Jordan Standard Time",abbr:"JST",offset:3,isdst:!1,text:"(UTC+03:00) Amman",utc:["Asia/Amman"]},{name:"Arabic Standard Time",abbr:"AST",offset:3,isdst:!1,text:"(UTC+03:00) Baghdad",utc:["Asia/Baghdad"]},{name:"Kaliningrad Standard Time",abbr:"KST",offset:3,isdst:!1,text:"(UTC+02:00) Kaliningrad",utc:["Europe/Kaliningrad"]},{name:"Arab Standard Time",abbr:"AST",offset:3,isdst:!1,text:"(UTC+03:00) Kuwait, Riyadh",utc:["Asia/Aden","Asia/Bahrain","Asia/Kuwait","Asia/Qatar","Asia/Riyadh"]},{name:"E. Africa Standard Time",abbr:"EAST",offset:3,isdst:!1,text:"(UTC+03:00) Nairobi",utc:["Africa/Addis_Ababa","Africa/Asmera","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Mogadishu","Africa/Nairobi","Antarctica/Syowa","Etc/GMT-3","Indian/Antananarivo","Indian/Comoro","Indian/Mayotte"]},{name:"Moscow Standard Time",abbr:"MSK",offset:3,isdst:!1,text:"(UTC+03:00) Moscow, St. Petersburg, Volgograd, Minsk",utc:["Europe/Kirov","Europe/Moscow","Europe/Simferopol","Europe/Volgograd","Europe/Minsk"]},{name:"Samara Time",abbr:"SAMT",offset:4,isdst:!1,text:"(UTC+04:00) Samara, Ulyanovsk, Saratov",utc:["Europe/Astrakhan","Europe/Samara","Europe/Ulyanovsk"]},{name:"Iran Standard Time",abbr:"IDT",offset:4.5,isdst:!0,text:"(UTC+03:30) Tehran",utc:["Asia/Tehran"]},{name:"Arabian Standard Time",abbr:"AST",offset:4,isdst:!1,text:"(UTC+04:00) Abu Dhabi, Muscat",utc:["Asia/Dubai","Asia/Muscat","Etc/GMT-4"]},{name:"Azerbaijan Standard Time",abbr:"ADT",offset:5,isdst:!0,text:"(UTC+04:00) Baku",utc:["Asia/Baku"]},{name:"Mauritius Standard Time",abbr:"MST",offset:4,isdst:!1,text:"(UTC+04:00) Port Louis",utc:["Indian/Mahe","Indian/Mauritius","Indian/Reunion"]},{name:"Georgian Standard Time",abbr:"GET",offset:4,isdst:!1,text:"(UTC+04:00) Tbilisi",utc:["Asia/Tbilisi"]},{name:"Caucasus Standard Time",abbr:"CST",offset:4,isdst:!1,text:"(UTC+04:00) Yerevan",utc:["Asia/Yerevan"]},{name:"Afghanistan Standard Time",abbr:"AST",offset:4.5,isdst:!1,text:"(UTC+04:30) Kabul",utc:["Asia/Kabul"]},{name:"West Asia Standard Time",abbr:"WAST",offset:5,isdst:!1,text:"(UTC+05:00) Ashgabat, Tashkent",utc:["Antarctica/Mawson","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Dushanbe","Asia/Oral","Asia/Samarkand","Asia/Tashkent","Etc/GMT-5","Indian/Kerguelen","Indian/Maldives"]},{name:"Yekaterinburg Time",abbr:"YEKT",offset:5,isdst:!1,text:"(UTC+05:00) Yekaterinburg",utc:["Asia/Yekaterinburg"]},{name:"Pakistan Standard Time",abbr:"PKT",offset:5,isdst:!1,text:"(UTC+05:00) Islamabad, Karachi",utc:["Asia/Karachi"]},{name:"India Standard Time",abbr:"IST",offset:5.5,isdst:!1,text:"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",utc:["Asia/Kolkata"]},{name:"Sri Lanka Standard Time",abbr:"SLST",offset:5.5,isdst:!1,text:"(UTC+05:30) Sri Jayawardenepura",utc:["Asia/Colombo"]},{name:"Nepal Standard Time",abbr:"NST",offset:5.75,isdst:!1,text:"(UTC+05:45) Kathmandu",utc:["Asia/Kathmandu"]},{name:"Central Asia Standard Time",abbr:"CAST",offset:6,isdst:!1,text:"(UTC+06:00) Nur-Sultan (Astana)",utc:["Antarctica/Vostok","Asia/Almaty","Asia/Bishkek","Asia/Qyzylorda","Asia/Urumqi","Etc/GMT-6","Indian/Chagos"]},{name:"Bangladesh Standard Time",abbr:"BST",offset:6,isdst:!1,text:"(UTC+06:00) Dhaka",utc:["Asia/Dhaka","Asia/Thimphu"]},{name:"Myanmar Standard Time",abbr:"MST",offset:6.5,isdst:!1,text:"(UTC+06:30) Yangon (Rangoon)",utc:["Asia/Rangoon","Indian/Cocos"]},{name:"SE Asia Standard Time",abbr:"SAST",offset:7,isdst:!1,text:"(UTC+07:00) Bangkok, Hanoi, Jakarta",utc:["Antarctica/Davis","Asia/Bangkok","Asia/Hovd","Asia/Jakarta","Asia/Phnom_Penh","Asia/Pontianak","Asia/Saigon","Asia/Vientiane","Etc/GMT-7","Indian/Christmas"]},{name:"N. Central Asia Standard Time",abbr:"NCAST",offset:7,isdst:!1,text:"(UTC+07:00) Novosibirsk",utc:["Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk"]},{name:"China Standard Time",abbr:"CST",offset:8,isdst:!1,text:"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi",utc:["Asia/Hong_Kong","Asia/Macau","Asia/Shanghai"]},{name:"North Asia Standard Time",abbr:"NAST",offset:8,isdst:!1,text:"(UTC+08:00) Krasnoyarsk",utc:["Asia/Krasnoyarsk"]},{name:"Singapore Standard Time",abbr:"MPST",offset:8,isdst:!1,text:"(UTC+08:00) Kuala Lumpur, Singapore",utc:["Asia/Brunei","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Makassar","Asia/Manila","Asia/Singapore","Etc/GMT-8"]},{name:"W. Australia Standard Time",abbr:"WAST",offset:8,isdst:!1,text:"(UTC+08:00) Perth",utc:["Antarctica/Casey","Australia/Perth"]},{name:"Taipei Standard Time",abbr:"TST",offset:8,isdst:!1,text:"(UTC+08:00) Taipei",utc:["Asia/Taipei"]},{name:"Ulaanbaatar Standard Time",abbr:"UST",offset:8,isdst:!1,text:"(UTC+08:00) Ulaanbaatar",utc:["Asia/Choibalsan","Asia/Ulaanbaatar"]},{name:"North Asia East Standard Time",abbr:"NAEST",offset:8,isdst:!1,text:"(UTC+08:00) Irkutsk",utc:["Asia/Irkutsk"]},{name:"Japan Standard Time",abbr:"JST",offset:9,isdst:!1,text:"(UTC+09:00) Osaka, Sapporo, Tokyo",utc:["Asia/Dili","Asia/Jayapura","Asia/Tokyo","Etc/GMT-9","Pacific/Palau"]},{name:"Korea Standard Time",abbr:"KST",offset:9,isdst:!1,text:"(UTC+09:00) Seoul",utc:["Asia/Pyongyang","Asia/Seoul"]},{name:"Cen. Australia Standard Time",abbr:"CAST",offset:9.5,isdst:!1,text:"(UTC+09:30) Adelaide",utc:["Australia/Adelaide","Australia/Broken_Hill"]},{name:"AUS Central Standard Time",abbr:"ACST",offset:9.5,isdst:!1,text:"(UTC+09:30) Darwin",utc:["Australia/Darwin"]},{name:"E. Australia Standard Time",abbr:"EAST",offset:10,isdst:!1,text:"(UTC+10:00) Brisbane",utc:["Australia/Brisbane","Australia/Lindeman"]},{name:"AUS Eastern Standard Time",abbr:"AEST",offset:10,isdst:!1,text:"(UTC+10:00) Canberra, Melbourne, Sydney",utc:["Australia/Melbourne","Australia/Sydney"]},{name:"West Pacific Standard Time",abbr:"WPST",offset:10,isdst:!1,text:"(UTC+10:00) Guam, Port Moresby",utc:["Antarctica/DumontDUrville","Etc/GMT-10","Pacific/Guam","Pacific/Port_Moresby","Pacific/Saipan","Pacific/Truk"]},{name:"Tasmania Standard Time",abbr:"TST",offset:10,isdst:!1,text:"(UTC+10:00) Hobart",utc:["Australia/Currie","Australia/Hobart"]},{name:"Yakutsk Standard Time",abbr:"YST",offset:9,isdst:!1,text:"(UTC+09:00) Yakutsk",utc:["Asia/Chita","Asia/Khandyga","Asia/Yakutsk"]},{name:"Central Pacific Standard Time",abbr:"CPST",offset:11,isdst:!1,text:"(UTC+11:00) Solomon Is., New Caledonia",utc:["Antarctica/Macquarie","Etc/GMT-11","Pacific/Efate","Pacific/Guadalcanal","Pacific/Kosrae","Pacific/Noumea","Pacific/Ponape"]},{name:"Vladivostok Standard Time",abbr:"VST",offset:11,isdst:!1,text:"(UTC+11:00) Vladivostok",utc:["Asia/Sakhalin","Asia/Ust-Nera","Asia/Vladivostok"]},{name:"New Zealand Standard Time",abbr:"NZST",offset:12,isdst:!1,text:"(UTC+12:00) Auckland, Wellington",utc:["Antarctica/McMurdo","Pacific/Auckland"]},{name:"UTC+12",abbr:"U",offset:12,isdst:!1,text:"(UTC+12:00) Coordinated Universal Time+12",utc:["Etc/GMT-12","Pacific/Funafuti","Pacific/Kwajalein","Pacific/Majuro","Pacific/Nauru","Pacific/Tarawa","Pacific/Wake","Pacific/Wallis"]},{name:"Fiji Standard Time",abbr:"FST",offset:12,isdst:!1,text:"(UTC+12:00) Fiji",utc:["Pacific/Fiji"]},{name:"Magadan Standard Time",abbr:"MST",offset:12,isdst:!1,text:"(UTC+12:00) Magadan",utc:["Asia/Anadyr","Asia/Kamchatka","Asia/Magadan","Asia/Srednekolymsk"]},{name:"Kamchatka Standard Time",abbr:"KDT",offset:13,isdst:!0,text:"(UTC+12:00) Petropavlovsk-Kamchatsky - Old",utc:["Asia/Kamchatka"]},{name:"Tonga Standard Time",abbr:"TST",offset:13,isdst:!1,text:"(UTC+13:00) Nuku'alofa",utc:["Etc/GMT-13","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Tongatapu"]},{name:"Samoa Standard Time",abbr:"SST",offset:13,isdst:!1,text:"(UTC+13:00) Samoa",utc:["Pacific/Apia"]}],profession:["Airline Pilot","Academic Team","Accountant","Account Executive","Actor","Actuary","Acquisition Analyst","Administrative Asst.","Administrative Analyst","Administrator","Advertising Director","Aerospace Engineer","Agent","Agricultural Inspector","Agricultural Scientist","Air Traffic Controller","Animal Trainer","Anthropologist","Appraiser","Architect","Art Director","Artist","Astronomer","Athletic Coach","Auditor","Author","Baker","Banker","Bankruptcy Attorney","Benefits Manager","Biologist","Bio-feedback Specialist","Biomedical Engineer","Biotechnical Researcher","Broadcaster","Broker","Building Manager","Building Contractor","Building Inspector","Business Analyst","Business Planner","Business Manager","Buyer","Call Center Manager","Career Counselor","Cash Manager","Ceramic Engineer","Chief Executive Officer","Chief Operation Officer","Chef","Chemical Engineer","Chemist","Child Care Manager","Chief Medical Officer","Chiropractor","Cinematographer","City Housing Manager","City Manager","Civil Engineer","Claims Manager","Clinical Research Assistant","Collections Manager","Compliance Manager","Comptroller","Computer Manager","Commercial Artist","Communications Affairs Director","Communications Director","Communications Engineer","Compensation Analyst","Computer Programmer","Computer Ops. Manager","Computer Engineer","Computer Operator","Computer Graphics Specialist","Construction Engineer","Construction Manager","Consultant","Consumer Relations Manager","Contract Administrator","Copyright Attorney","Copywriter","Corporate Planner","Corrections Officer","Cosmetologist","Credit Analyst","Cruise Director","Chief Information Officer","Chief Technology Officer","Customer Service Manager","Cryptologist","Dancer","Data Security Manager","Database Manager","Day Care Instructor","Dentist","Designer","Design Engineer","Desktop Publisher","Developer","Development Officer","Diamond Merchant","Dietitian","Direct Marketer","Director","Distribution Manager","Diversity Manager","Economist","EEO Compliance Manager","Editor","Education Adminator","Electrical Engineer","Electro Optical Engineer","Electronics Engineer","Embassy Management","Employment Agent","Engineer Technician","Entrepreneur","Environmental Analyst","Environmental Attorney","Environmental Engineer","Environmental Specialist","Escrow Officer","Estimator","Executive Assistant","Executive Director","Executive Recruiter","Facilities Manager","Family Counselor","Fashion Events Manager","Fashion Merchandiser","Fast Food Manager","Film Producer","Film Production Assistant","Financial Analyst","Financial Planner","Financier","Fine Artist","Wildlife Specialist","Fitness Consultant","Flight Attendant","Flight Engineer","Floral Designer","Food & Beverage Director","Food Service Manager","Forestry Technician","Franchise Management","Franchise Sales","Fraud Investigator","Freelance Writer","Fund Raiser","General Manager","Geologist","General Counsel","Geriatric Specialist","Gerontologist","Glamour Photographer","Golf Club Manager","Gourmet Chef","Graphic Designer","Grounds Keeper","Hazardous Waste Manager","Health Care Manager","Health Therapist","Health Service Administrator","Hearing Officer","Home Economist","Horticulturist","Hospital Administrator","Hotel Manager","Human Resources Manager","Importer","Industrial Designer","Industrial Engineer","Information Director","Inside Sales","Insurance Adjuster","Interior Decorator","Internal Controls Director","International Acct.","International Courier","International Lawyer","Interpreter","Investigator","Investment Banker","Investment Manager","IT Architect","IT Project Manager","IT Systems Analyst","Jeweler","Joint Venture Manager","Journalist","Labor Negotiator","Labor Organizer","Labor Relations Manager","Lab Services Director","Lab Technician","Land Developer","Landscape Architect","Law Enforcement Officer","Lawyer","Lead Software Engineer","Lead Software Test Engineer","Leasing Manager","Legal Secretary","Library Manager","Litigation Attorney","Loan Officer","Lobbyist","Logistics Manager","Maintenance Manager","Management Consultant","Managed Care Director","Managing Partner","Manufacturing Director","Manpower Planner","Marine Biologist","Market Res. Analyst","Marketing Director","Materials Manager","Mathematician","Membership Chairman","Mechanic","Mechanical Engineer","Media Buyer","Medical Investor","Medical Secretary","Medical Technician","Mental Health Counselor","Merchandiser","Metallurgical Engineering","Meteorologist","Microbiologist","MIS Manager","Motion Picture Director","Multimedia Director","Musician","Network Administrator","Network Specialist","Network Operator","New Product Manager","Novelist","Nuclear Engineer","Nuclear Specialist","Nutritionist","Nursing Administrator","Occupational Therapist","Oceanographer","Office Manager","Operations Manager","Operations Research Director","Optical Technician","Optometrist","Organizational Development Manager","Outplacement Specialist","Paralegal","Park Ranger","Patent Attorney","Payroll Specialist","Personnel Specialist","Petroleum Engineer","Pharmacist","Photographer","Physical Therapist","Physician","Physician Assistant","Physicist","Planning Director","Podiatrist","Political Analyst","Political Scientist","Politician","Portfolio Manager","Preschool Management","Preschool Teacher","Principal","Private Banker","Private Investigator","Probation Officer","Process Engineer","Producer","Product Manager","Product Engineer","Production Engineer","Production Planner","Professional Athlete","Professional Coach","Professor","Project Engineer","Project Manager","Program Manager","Property Manager","Public Administrator","Public Safety Director","PR Specialist","Publisher","Purchasing Agent","Publishing Director","Quality Assurance Specialist","Quality Control Engineer","Quality Control Inspector","Radiology Manager","Railroad Engineer","Real Estate Broker","Recreational Director","Recruiter","Redevelopment Specialist","Regulatory Affairs Manager","Registered Nurse","Rehabilitation Counselor","Relocation Manager","Reporter","Research Specialist","Restaurant Manager","Retail Store Manager","Risk Analyst","Safety Engineer","Sales Engineer","Sales Trainer","Sales Promotion Manager","Sales Representative","Sales Manager","Service Manager","Sanitation Engineer","Scientific Programmer","Scientific Writer","Securities Analyst","Security Consultant","Security Director","Seminar Presenter","Ship's Officer","Singer","Social Director","Social Program Planner","Social Research","Social Scientist","Social Worker","Sociologist","Software Developer","Software Engineer","Software Test Engineer","Soil Scientist","Special Events Manager","Special Education Teacher","Special Projects Director","Speech Pathologist","Speech Writer","Sports Event Manager","Statistician","Store Manager","Strategic Alliance Director","Strategic Planning Director","Stress Reduction Specialist","Stockbroker","Surveyor","Structural Engineer","Superintendent","Supply Chain Director","System Engineer","Systems Analyst","Systems Programmer","System Administrator","Tax Specialist","Teacher","Technical Support Specialist","Technical Illustrator","Technical Writer","Technology Director","Telecom Analyst","Telemarketer","Theatrical Director","Title Examiner","Tour Escort","Tour Guide Director","Traffic Manager","Trainer Translator","Transportation Manager","Travel Agent","Treasurer","TV Programmer","Underwriter","Union Representative","University Administrator","University Dean","Urban Planner","Veterinarian","Vendor Relations Director","Viticulturist","Warehouse Manager"],animals:{ocean:["Acantharea","Anemone","Angelfish King","Ahi Tuna","Albacore","American Oyster","Anchovy","Armored Snail","Arctic Char","Atlantic Bluefin Tuna","Atlantic Cod","Atlantic Goliath Grouper","Atlantic Trumpetfish","Atlantic Wolffish","Baleen Whale","Banded Butterflyfish","Banded Coral Shrimp","Banded Sea Krait","Barnacle","Barndoor Skate","Barracuda","Basking Shark","Bass","Beluga Whale","Bluebanded Goby","Bluehead Wrasse","Bluefish","Bluestreak Cleaner-Wrasse","Blue Marlin","Blue Shark","Blue Spiny Lobster","Blue Tang","Blue Whale","Broadclub Cuttlefish","Bull Shark","Chambered Nautilus","Chilean Basket Star","Chilean Jack Mackerel","Chinook Salmon","Christmas Tree Worm","Clam","Clown Anemonefish","Clown Triggerfish","Cod","Coelacanth","Cockscomb Cup Coral","Common Fangtooth","Conch","Cookiecutter Shark","Copepod","Coral","Corydoras","Cownose Ray","Crab","Crown-of-Thorns Starfish","Cushion Star","Cuttlefish","California Sea Otters","Dolphin","Dolphinfish","Dory","Devil Fish","Dugong","Dumbo Octopus","Dungeness Crab","Eccentric Sand Dollar","Edible Sea Cucumber","Eel","Elephant Seal","Elkhorn Coral","Emperor Shrimp","Estuarine Crocodile","Fathead Sculpin","Fiddler Crab","Fin Whale","Flameback","Flamingo Tongue Snail","Flashlight Fish","Flatback Turtle","Flatfish","Flying Fish","Flounder","Fluke","French Angelfish","Frilled Shark","Fugu (also called Pufferfish)","Gar","Geoduck","Giant Barrel Sponge","Giant Caribbean Sea Anemone","Giant Clam","Giant Isopod","Giant Kingfish","Giant Oarfish","Giant Pacific Octopus","Giant Pyrosome","Giant Sea Star","Giant Squid","Glowing Sucker Octopus","Giant Tube Worm","Goblin Shark","Goosefish","Great White Shark","Greenland Shark","Grey Atlantic Seal","Grouper","Grunion","Guineafowl Puffer","Haddock","Hake","Halibut","Hammerhead Shark","Hapuka","Harbor Porpoise","Harbor Seal","Hatchetfish","Hawaiian Monk Seal","Hawksbill Turtle","Hector's Dolphin","Hermit Crab","Herring","Hoki","Horn Shark","Horseshoe Crab","Humpback Anglerfish","Humpback Whale","Icefish","Imperator Angelfish","Irukandji Jellyfish","Isopod","Ivory Bush Coral","Japanese Spider Crab","Jellyfish","John Dory","Juan Fernandez Fur Seal","Killer Whale","Kiwa Hirsuta","Krill","Lagoon Triggerfish","Lamprey","Leafy Seadragon","Leopard Seal","Limpet","Ling","Lionfish","Lions Mane Jellyfish","Lobe Coral","Lobster","Loggerhead Turtle","Longnose Sawshark","Longsnout Seahorse","Lophelia Coral","Marrus Orthocanna","Manatee","Manta Ray","Marlin","Megamouth Shark","Mexican Lookdown","Mimic Octopus","Moon Jelly","Mollusk","Monkfish","Moray Eel","Mullet","Mussel","Megaladon","Napoleon Wrasse","Nassau Grouper","Narwhal","Nautilus","Needlefish","Northern Seahorse","North Atlantic Right Whale","Northern Red Snapper","Norway Lobster","Nudibranch","Nurse Shark","Oarfish","Ocean Sunfish","Oceanic Whitetip Shark","Octopus","Olive Sea Snake","Orange Roughy","Ostracod","Otter","Oyster","Pacific Angelshark","Pacific Blackdragon","Pacific Halibut","Pacific Sardine","Pacific Sea Nettle Jellyfish","Pacific White Sided Dolphin","Pantropical Spotted Dolphin","Patagonian Toothfish","Peacock Mantis Shrimp","Pelagic Thresher Shark","Penguin","Peruvian Anchoveta","Pilchard","Pink Salmon","Pinniped","Plankton","Porpoise","Polar Bear","Portuguese Man o' War","Pycnogonid Sea Spider","Quahog","Queen Angelfish","Queen Conch","Queen Parrotfish","Queensland Grouper","Ragfish","Ratfish","Rattail Fish","Ray","Red Drum","Red King Crab","Ringed Seal","Risso's Dolphin","Ross Seals","Sablefish","Salmon","Sand Dollar","Sandbar Shark","Sawfish","Sarcastic Fringehead","Scalloped Hammerhead Shark","Seahorse","Sea Cucumber","Sea Lion","Sea Urchin","Seal","Shark","Shortfin Mako Shark","Shovelnose Guitarfish","Shrimp","Silverside Fish","Skipjack Tuna","Slender Snipe Eel","Smalltooth Sawfish","Smelts","Sockeye Salmon","Southern Stingray","Sponge","Spotted Porcupinefish","Spotted Dolphin","Spotted Eagle Ray","Spotted Moray","Squid","Squidworm","Starfish","Stickleback","Stonefish","Stoplight Loosejaw","Sturgeon","Swordfish","Tan Bristlemouth","Tasseled Wobbegong","Terrible Claw Lobster","Threespot Damselfish","Tiger Prawn","Tiger Shark","Tilefish","Toadfish","Tropical Two-Wing Flyfish","Tuna","Umbrella Squid","Velvet Crab","Venus Flytrap Sea Anemone","Vigtorniella Worm","Viperfish","Vampire Squid","Vaquita","Wahoo","Walrus","West Indian Manatee","Whale","Whale Shark","Whiptail Gulper","White-Beaked Dolphin","White-Ring Garden Eel","White Shrimp","Wobbegong","Wrasse","Wreckfish","Xiphosura","Yellowtail Damselfish","Yelloweye Rockfish","Yellow Cup Black Coral","Yellow Tube Sponge","Yellowfin Tuna","Zebrashark","Zooplankton"],desert:["Aardwolf","Addax","African Wild Ass","Ant","Antelope","Armadillo","Baboon","Badger","Bat","Bearded Dragon","Beetle","Bird","Black-footed Cat","Boa","Brown Bear","Bustard","Butterfly","Camel","Caracal","Caracara","Caterpillar","Centipede","Cheetah","Chipmunk","Chuckwalla","Climbing Mouse","Coati","Cobra","Cotton Rat","Cougar","Courser","Crane Fly","Crow","Dassie Rat","Dove","Dunnart","Eagle","Echidna","Elephant","Emu","Falcon","Fly","Fox","Frogmouth","Gecko","Geoffroy's Cat","Gerbil","Grasshopper","Guanaco","Gundi","Hamster","Hawk","Hedgehog","Hyena","Hyrax","Jackal","Kangaroo","Kangaroo Rat","Kestrel","Kowari","Kultarr","Leopard","Lion","Macaw","Meerkat","Mouse","Oryx","Ostrich","Owl","Pronghorn","Python","Rabbit","Raccoon","Rattlesnake","Rhinoceros","Sand Cat","Spectacled Bear","Spiny Mouse","Starling","Stick Bug","Tarantula","Tit","Toad","Tortoise","Tyrant Flycatcher","Viper","Vulture","Waxwing","Xerus","Zebra"],grassland:["Aardvark","Aardwolf","Accentor","African Buffalo","African Wild Dog","Alpaca","Anaconda","Ant","Anteater","Antelope","Armadillo","Baboon","Badger","Bandicoot","Barbet","Bat","Bee","Bee-eater","Beetle","Bird","Bison","Black-footed Cat","Black-footed Ferret","Bluebird","Boa","Bowerbird","Brown Bear","Bush Dog","Bushshrike","Bustard","Butterfly","Buzzard","Caracal","Caracara","Cardinal","Caterpillar","Cheetah","Chipmunk","Civet","Climbing Mouse","Clouded Leopard","Coati","Cobra","Cockatoo","Cockroach","Common Genet","Cotton Rat","Cougar","Courser","Coyote","Crane","Crane Fly","Cricket","Crow","Culpeo","Death Adder","Deer","Deer Mouse","Dingo","Dinosaur","Dove","Drongo","Duck","Duiker","Dunnart","Eagle","Echidna","Elephant","Elk","Emu","Falcon","Finch","Flea","Fly","Flying Frog","Fox","Frog","Frogmouth","Garter Snake","Gazelle","Gecko","Geoffroy's Cat","Gerbil","Giant Tortoise","Giraffe","Grasshopper","Grison","Groundhog","Grouse","Guanaco","Guinea Pig","Hamster","Harrier","Hartebeest","Hawk","Hedgehog","Helmetshrike","Hippopotamus","Hornbill","Hyena","Hyrax","Impala","Jackal","Jaguar","Jaguarundi","Kangaroo","Kangaroo Rat","Kestrel","Kultarr","Ladybug","Leopard","Lion","Macaw","Meerkat","Mouse","Newt","Oryx","Ostrich","Owl","Pangolin","Pheasant","Prairie Dog","Pronghorn","Przewalski's Horse","Python","Quoll","Rabbit","Raven","Rhinoceros","Shelduck","Sloth Bear","Spectacled Bear","Squirrel","Starling","Stick Bug","Tamandua","Tasmanian Devil","Thornbill","Thrush","Toad","Tortoise"],forest:["Agouti","Anaconda","Anoa","Ant","Anteater","Antelope","Armadillo","Asian Black Bear","Aye-aye","Babirusa","Baboon","Badger","Bandicoot","Banteng","Barbet","Basilisk","Bat","Bearded Dragon","Bee","Bee-eater","Beetle","Bettong","Binturong","Bird-of-paradise","Bongo","Bowerbird","Bulbul","Bush Dog","Bushbaby","Bushshrike","Butterfly","Buzzard","Caecilian","Cardinal","Cassowary","Caterpillar","Centipede","Chameleon","Chimpanzee","Cicada","Civet","Clouded Leopard","Coati","Cobra","Cockatoo","Cockroach","Colugo","Cotinga","Cotton Rat","Cougar","Crane Fly","Cricket","Crocodile","Crow","Cuckoo","Cuscus","Death Adder","Deer","Dhole","Dingo","Dinosaur","Drongo","Duck","Duiker","Eagle","Echidna","Elephant","Finch","Flat-headed Cat","Flea","Flowerpecker","Fly","Flying Frog","Fossa","Frog","Frogmouth","Gaur","Gecko","Gorilla","Grison","Hawaiian Honeycreeper","Hawk","Hedgehog","Helmetshrike","Hornbill","Hyrax","Iguana","Jackal","Jaguar","Jaguarundi","Kestrel","Ladybug","Lemur","Leopard","Lion","Macaw","Mandrill","Margay","Monkey","Mouse","Mouse Deer","Newt","Okapi","Old World Flycatcher","Orangutan","Owl","Pangolin","Peafowl","Pheasant","Possum","Python","Quokka","Rabbit","Raccoon","Red Panda","Red River Hog","Rhinoceros","Sloth Bear","Spectacled Bear","Squirrel","Starling","Stick Bug","Sun Bear","Tamandua","Tamarin","Tapir","Tarantula","Thrush","Tiger","Tit","Toad","Tortoise","Toucan","Trogon","Trumpeter","Turaco","Turtle","Tyrant Flycatcher","Viper","Vulture","Wallaby","Warbler","Wasp","Waxwing","Weaver","Weaver-finch","Whistler","White-eye","Whydah","Woodswallow","Worm","Wren","Xenops","Yellowjacket","Accentor","African Buffalo","American Black Bear","Anole","Bird","Bison","Boa","Brown Bear","Chipmunk","Common Genet","Copperhead","Coyote","Deer Mouse","Dormouse","Elk","Emu","Fisher","Fox","Garter Snake","Giant Panda","Giant Tortoise","Groundhog","Grouse","Guanaco","Himalayan Tahr","Kangaroo","Koala","Numbat","Quoll","Raccoon dog","Tasmanian Devil","Thornbill","Turkey","Vole","Weasel","Wildcat","Wolf","Wombat","Woodchuck","Woodpecker"],farm:["Alpaca","Buffalo","Banteng","Cow","Cat","Chicken","Carp","Camel","Donkey","Dog","Duck","Emu","Goat","Gayal","Guinea","Goose","Horse","Honey","Llama","Pig","Pigeon","Rhea","Rabbit","Sheep","Silkworm","Turkey","Yak","Zebu"],pet:["Bearded Dragon","Birds","Burro","Cats","Chameleons","Chickens","Chinchillas","Chinese Water Dragon","Cows","Dogs","Donkey","Ducks","Ferrets","Fish","Geckos","Geese","Gerbils","Goats","Guinea Fowl","Guinea Pigs","Hamsters","Hedgehogs","Horses","Iguanas","Llamas","Lizards","Mice","Mule","Peafowl","Pigs and Hogs","Pigeons","Ponies","Pot Bellied Pig","Rabbits","Rats","Sheep","Skinks","Snakes","Stick Insects","Sugar Gliders","Tarantula","Turkeys","Turtles"],zoo:["Aardvark","African Wild Dog","Aldabra Tortoise","American Alligator","American Bison","Amur Tiger","Anaconda","Andean Condor","Asian Elephant","Baby Doll Sheep","Bald Eagle","Barred Owl","Blue Iguana","Boer Goat","California Sea Lion","Caribbean Flamingo","Chinchilla","Collared Lemur","Coquerel's Sifaka","Cuban Amazon Parrot","Ebony Langur","Fennec Fox","Fossa","Gelada","Giant Anteater","Giraffe","Gorilla","Grizzly Bear","Henkel's Leaf-tailed Gecko","Indian Gharial","Indian Rhinoceros","King Cobra","King Vulture","Komodo Dragon","Linne's Two-toed Sloth","Lion","Little Penguin","Madagascar Tree Boa","Magellanic Penguin","Malayan Tapir","Malayan Tiger","Matschies Tree Kangaroo","Mini Donkey","Monarch Butterfly","Nile crocodile","North American Porcupine","Nubian Ibex","Okapi","Poison Dart Frog","Polar Bear","Pygmy Marmoset","Radiated Tortoise","Red Panda","Red Ruffed Lemur","Ring-tailed Lemur","Ring-tailed Mongoose","Rock Hyrax","Small Clawed Asian Otter","Snow Leopard","Snowy Owl","Southern White-faced Owl","Southern White Rhinocerous","Squirrel Monkey","Tufted Puffin","White Cheeked Gibbon","White-throated Bee Eater","Zebra"]},primes:[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007],emotions:["love","joy","surprise","anger","sadness","fear"]},_=Object.prototype.hasOwnProperty,y=Object.keys||function(e){var t=[];for(var n in e)_.call(e,n)&&t.push(n);return t};function C(e,t){var n=Array.isArray(e),i=t||(n?new Array(e.length):{});return n?function(e,t){for(var n=0,i=e.length;n<i;n++)t[n]=e[n]}(e,i):function(e,t){for(var n,i=y(e),r=0,o=i.length;r<o;r++)t[n=i[r]]=e[n]||t[n]}(e,i),i}l.prototype.get=function(e){return C(f[e])},l.prototype.mac_address=function(e){(e=c(e)).separator||(e.separator=e.networkVersion?".":":");var t="ABCDEF1234567890";return e.networkVersion?this.n(this.string,3,{pool:t,length:4}).join(e.separator):this.n(this.string,6,{pool:t,length:2}).join(e.separator)},l.prototype.normal=function(e){if(h((e=c(e,{mean:0,dev:1,pool:[]})).pool.constructor!==Array,"Chance: The pool option must be a valid array."),h("number"!=typeof e.mean,"Chance: Mean (mean) must be a number"),h("number"!=typeof e.dev,"Chance: Standard deviation (dev) must be a number"),e.pool.length>0)return this.normal_pool(e);var t,n,i,r=e.mean,o=e.dev;do{t=(n=2*this.random()-1)*n+(i=2*this.random()-1)*i}while(t>=1);return o*(n*Math.sqrt(-2*Math.log(t)/t))+r},l.prototype.normal_pool=function(e){var t=0;do{var n=Math.round(this.normal({mean:e.mean,dev:e.dev}));if(n<e.pool.length&&n>=0)return e.pool[n];t++}while(t<100);throw new RangeError("Chance: Your pool is too small for the given mean and standard deviation. Please adjust.")},l.prototype.radio=function(e){var t="";switch((e=c(e,{side:"?"})).side.toLowerCase()){case"east":case"e":t="W";break;case"west":case"w":t="K";break;default:t=this.character({pool:"KW"})}return t+this.character({alpha:!0,casing:"upper"})+this.character({alpha:!0,casing:"upper"})+this.character({alpha:!0,casing:"upper"})},l.prototype.set=function(e,t){"string"==typeof e?f[e]=t:f=C(e,f)},l.prototype.tv=function(e){return this.radio(e)},l.prototype.cnpj=function(){var e=this.n(this.natural,8,{max:9}),t=2+6*e[7]+7*e[6]+8*e[5]+9*e[4]+2*e[3]+3*e[2]+4*e[1]+5*e[0];(t=11-t%11)>=10&&(t=0);var n=2*t+3+7*e[7]+8*e[6]+9*e[5]+2*e[4]+3*e[3]+4*e[2]+5*e[1]+6*e[0];return(n=11-n%11)>=10&&(n=0),""+e[0]+e[1]+"."+e[2]+e[3]+e[4]+"."+e[5]+e[6]+e[7]+"/0001-"+t+n},l.prototype.emotion=function(){return this.pick(this.get("emotions"))},l.prototype.mersenne_twister=function(e){return new b(e)},l.prototype.blueimp_md5=function(){return new S};var b=function(e){void 0===e&&(e=Math.floor(Math.random()*Math.pow(10,13))),this.N=624,this.M=397,this.MATRIX_A=2567483615,this.UPPER_MASK=2147483648,this.LOWER_MASK=2147483647,this.mt=new Array(this.N),this.mti=this.N+1,this.init_genrand(e)};b.prototype.init_genrand=function(e){for(this.mt[0]=e>>>0,this.mti=1;this.mti<this.N;this.mti++)e=this.mt[this.mti-1]^this.mt[this.mti-1]>>>30,this.mt[this.mti]=(1812433253*((4294901760&e)>>>16)<<16)+1812433253*(65535&e)+this.mti,this.mt[this.mti]>>>=0},b.prototype.init_by_array=function(e,t){var n,i,r=1,o=0;for(this.init_genrand(19650218),n=this.N>t?this.N:t;n;n--)i=this.mt[r-1]^this.mt[r-1]>>>30,this.mt[r]=(this.mt[r]^(1664525*((4294901760&i)>>>16)<<16)+1664525*(65535&i))+e[o]+o,this.mt[r]>>>=0,o++,++r>=this.N&&(this.mt[0]=this.mt[this.N-1],r=1),o>=t&&(o=0);for(n=this.N-1;n;n--)i=this.mt[r-1]^this.mt[r-1]>>>30,this.mt[r]=(this.mt[r]^(1566083941*((4294901760&i)>>>16)<<16)+1566083941*(65535&i))-r,this.mt[r]>>>=0,++r>=this.N&&(this.mt[0]=this.mt[this.N-1],r=1);this.mt[0]=2147483648},b.prototype.genrand_int32=function(){var e,t=new Array(0,this.MATRIX_A);if(this.mti>=this.N){var n;for(this.mti===this.N+1&&this.init_genrand(5489),n=0;n<this.N-this.M;n++)e=this.mt[n]&this.UPPER_MASK|this.mt[n+1]&this.LOWER_MASK,this.mt[n]=this.mt[n+this.M]^e>>>1^t[1&e];for(;n<this.N-1;n++)e=this.mt[n]&this.UPPER_MASK|this.mt[n+1]&this.LOWER_MASK,this.mt[n]=this.mt[n+(this.M-this.N)]^e>>>1^t[1&e];e=this.mt[this.N-1]&this.UPPER_MASK|this.mt[0]&this.LOWER_MASK,this.mt[this.N-1]=this.mt[this.M-1]^e>>>1^t[1&e],this.mti=0}return e=this.mt[this.mti++],e^=e>>>11,e^=e<<7&2636928640,e^=e<<15&4022730752,(e^=e>>>18)>>>0},b.prototype.genrand_int31=function(){return this.genrand_int32()>>>1},b.prototype.genrand_real1=function(){return this.genrand_int32()*(1/4294967295)},b.prototype.random=function(){return this.genrand_int32()*(1/4294967296)},b.prototype.genrand_real3=function(){return(this.genrand_int32()+.5)*(1/4294967296)},b.prototype.genrand_res53=function(){return(67108864*(this.genrand_int32()>>>5)+(this.genrand_int32()>>>6))*(1/9007199254740992)};var S=function(){};S.prototype.VERSION="1.0.1",S.prototype.safe_add=function(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n},S.prototype.bit_roll=function(e,t){return e<<t|e>>>32-t},S.prototype.md5_cmn=function(e,t,n,i,r,o){return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(t,e),this.safe_add(i,o)),r),n)},S.prototype.md5_ff=function(e,t,n,i,r,o,a){return this.md5_cmn(t&n|~t&i,e,t,r,o,a)},S.prototype.md5_gg=function(e,t,n,i,r,o,a){return this.md5_cmn(t&i|n&~i,e,t,r,o,a)},S.prototype.md5_hh=function(e,t,n,i,r,o,a){return this.md5_cmn(t^n^i,e,t,r,o,a)},S.prototype.md5_ii=function(e,t,n,i,r,o,a){return this.md5_cmn(n^(t|~i),e,t,r,o,a)},S.prototype.binl_md5=function(e,t){e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var n,i,r,o,a,s=1732584193,l=-271733879,c=-1732584194,h=271733878;for(n=0;n<e.length;n+=16)i=s,r=l,o=c,a=h,s=this.md5_ff(s,l,c,h,e[n],7,-680876936),h=this.md5_ff(h,s,l,c,e[n+1],12,-389564586),c=this.md5_ff(c,h,s,l,e[n+2],17,606105819),l=this.md5_ff(l,c,h,s,e[n+3],22,-1044525330),s=this.md5_ff(s,l,c,h,e[n+4],7,-176418897),h=this.md5_ff(h,s,l,c,e[n+5],12,1200080426),c=this.md5_ff(c,h,s,l,e[n+6],17,-1473231341),l=this.md5_ff(l,c,h,s,e[n+7],22,-45705983),s=this.md5_ff(s,l,c,h,e[n+8],7,1770035416),h=this.md5_ff(h,s,l,c,e[n+9],12,-1958414417),c=this.md5_ff(c,h,s,l,e[n+10],17,-42063),l=this.md5_ff(l,c,h,s,e[n+11],22,-1990404162),s=this.md5_ff(s,l,c,h,e[n+12],7,1804603682),h=this.md5_ff(h,s,l,c,e[n+13],12,-40341101),c=this.md5_ff(c,h,s,l,e[n+14],17,-1502002290),l=this.md5_ff(l,c,h,s,e[n+15],22,1236535329),s=this.md5_gg(s,l,c,h,e[n+1],5,-165796510),h=this.md5_gg(h,s,l,c,e[n+6],9,-1069501632),c=this.md5_gg(c,h,s,l,e[n+11],14,643717713),l=this.md5_gg(l,c,h,s,e[n],20,-373897302),s=this.md5_gg(s,l,c,h,e[n+5],5,-701558691),h=this.md5_gg(h,s,l,c,e[n+10],9,38016083),c=this.md5_gg(c,h,s,l,e[n+15],14,-660478335),l=this.md5_gg(l,c,h,s,e[n+4],20,-405537848),s=this.md5_gg(s,l,c,h,e[n+9],5,568446438),h=this.md5_gg(h,s,l,c,e[n+14],9,-1019803690),c=this.md5_gg(c,h,s,l,e[n+3],14,-187363961),l=this.md5_gg(l,c,h,s,e[n+8],20,1163531501),s=this.md5_gg(s,l,c,h,e[n+13],5,-1444681467),h=this.md5_gg(h,s,l,c,e[n+2],9,-51403784),c=this.md5_gg(c,h,s,l,e[n+7],14,1735328473),l=this.md5_gg(l,c,h,s,e[n+12],20,-1926607734),s=this.md5_hh(s,l,c,h,e[n+5],4,-378558),h=this.md5_hh(h,s,l,c,e[n+8],11,-2022574463),c=this.md5_hh(c,h,s,l,e[n+11],16,1839030562),l=this.md5_hh(l,c,h,s,e[n+14],23,-35309556),s=this.md5_hh(s,l,c,h,e[n+1],4,-1530992060),h=this.md5_hh(h,s,l,c,e[n+4],11,1272893353),c=this.md5_hh(c,h,s,l,e[n+7],16,-155497632),l=this.md5_hh(l,c,h,s,e[n+10],23,-1094730640),s=this.md5_hh(s,l,c,h,e[n+13],4,681279174),h=this.md5_hh(h,s,l,c,e[n],11,-358537222),c=this.md5_hh(c,h,s,l,e[n+3],16,-722521979),l=this.md5_hh(l,c,h,s,e[n+6],23,76029189),s=this.md5_hh(s,l,c,h,e[n+9],4,-640364487),h=this.md5_hh(h,s,l,c,e[n+12],11,-421815835),c=this.md5_hh(c,h,s,l,e[n+15],16,530742520),l=this.md5_hh(l,c,h,s,e[n+2],23,-995338651),s=this.md5_ii(s,l,c,h,e[n],6,-198630844),h=this.md5_ii(h,s,l,c,e[n+7],10,1126891415),c=this.md5_ii(c,h,s,l,e[n+14],15,-1416354905),l=this.md5_ii(l,c,h,s,e[n+5],21,-57434055),s=this.md5_ii(s,l,c,h,e[n+12],6,1700485571),h=this.md5_ii(h,s,l,c,e[n+3],10,-1894986606),c=this.md5_ii(c,h,s,l,e[n+10],15,-1051523),l=this.md5_ii(l,c,h,s,e[n+1],21,-2054922799),s=this.md5_ii(s,l,c,h,e[n+8],6,1873313359),h=this.md5_ii(h,s,l,c,e[n+15],10,-30611744),c=this.md5_ii(c,h,s,l,e[n+6],15,-1560198380),l=this.md5_ii(l,c,h,s,e[n+13],21,1309151649),s=this.md5_ii(s,l,c,h,e[n+4],6,-145523070),h=this.md5_ii(h,s,l,c,e[n+11],10,-1120210379),c=this.md5_ii(c,h,s,l,e[n+2],15,718787259),l=this.md5_ii(l,c,h,s,e[n+9],21,-343485551),s=this.safe_add(s,i),l=this.safe_add(l,r),c=this.safe_add(c,o),h=this.safe_add(h,a);return[s,l,c,h]},S.prototype.binl2rstr=function(e){var t,n="";for(t=0;t<32*e.length;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n},S.prototype.rstr2binl=function(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;for(t=0;t<8*e.length;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n},S.prototype.rstr_md5=function(e){return this.binl2rstr(this.binl_md5(this.rstr2binl(e),8*e.length))},S.prototype.rstr_hmac_md5=function(e,t){var n,i,r=this.rstr2binl(e),o=[],a=[];for(o[15]=a[15]=void 0,r.length>16&&(r=this.binl_md5(r,8*e.length)),n=0;n<16;n+=1)o[n]=909522486^r[n],a[n]=1549556828^r[n];return i=this.binl_md5(o.concat(this.rstr2binl(t)),512+8*t.length),this.binl2rstr(this.binl_md5(a.concat(i),640))},S.prototype.rstr2hex=function(e){var t,n,i="0123456789abcdef",r="";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),r+=i.charAt(t>>>4&15)+i.charAt(15&t);return r},S.prototype.str2rstr_utf8=function(e){return unescape(encodeURIComponent(e))},S.prototype.raw_md5=function(e){return this.rstr_md5(this.str2rstr_utf8(e))},S.prototype.hex_md5=function(e){return this.rstr2hex(this.raw_md5(e))},S.prototype.raw_hmac_md5=function(e,t){return this.rstr_hmac_md5(this.str2rstr_utf8(e),this.str2rstr_utf8(t))},S.prototype.hex_hmac_md5=function(e,t){return this.rstr2hex(this.raw_hmac_md5(e,t))},S.prototype.md5=function(e,t,n){return t?n?this.raw_hmac_md5(t,e):this.hex_hmac_md5(t,e):n?this.raw_md5(e):this.hex_md5(e)},_n.exports&&(yn=_n.exports=l),yn.Chance=l,"undefined"!=typeof importScripts&&(chance=new l,self.Chance=l),"object"==typeof window&&"object"==typeof window.document&&(window.Chance=l,window.chance=new l)}();var Sn=bn.exports,xn={exports:{}};!function(e,t){function n(e,t){if(!(this instanceof n))return new n(e,t);this.x=e||0,this.y=t||0}xn.exports=n,n.fromArray=function(e){return new n(e[0]||0,e[1]||0)},n.fromObject=function(e){return new n(e.x||0,e.y||0)},n.prototype.addX=function(e){return this.x+=e.x,this},n.prototype.addY=function(e){return this.y+=e.y,this},n.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this},n.prototype.addScalar=function(e){return this.x+=e,this.y+=e,this},n.prototype.addScalarX=function(e){return this.x+=e,this},n.prototype.addScalarY=function(e){return this.y+=e,this},n.prototype.subtractX=function(e){return this.x-=e.x,this},n.prototype.subtractY=function(e){return this.y-=e.y,this},n.prototype.subtract=function(e){return this.x-=e.x,this.y-=e.y,this},n.prototype.subtractScalar=function(e){return this.x-=e,this.y-=e,this},n.prototype.subtractScalarX=function(e){return this.x-=e,this},n.prototype.subtractScalarY=function(e){return this.y-=e,this},n.prototype.divideX=function(e){return this.x/=e.x,this},n.prototype.divideY=function(e){return this.y/=e.y,this},n.prototype.divide=function(e){return this.x/=e.x,this.y/=e.y,this},n.prototype.divideScalar=function(e){return 0!==e?(this.x/=e,this.y/=e):(this.x=0,this.y=0),this},n.prototype.divideScalarX=function(e){return 0!==e?this.x/=e:this.x=0,this},n.prototype.divideScalarY=function(e){return 0!==e?this.y/=e:this.y=0,this},n.prototype.invertX=function(){return this.x*=-1,this},n.prototype.invertY=function(){return this.y*=-1,this},n.prototype.invert=function(){return this.invertX(),this.invertY(),this},n.prototype.multiplyX=function(e){return this.x*=e.x,this},n.prototype.multiplyY=function(e){return this.y*=e.y,this},n.prototype.multiply=function(e){return this.x*=e.x,this.y*=e.y,this},n.prototype.multiplyScalar=function(e){return this.x*=e,this.y*=e,this},n.prototype.multiplyScalarX=function(e){return this.x*=e,this},n.prototype.multiplyScalarY=function(e){return this.y*=e,this},n.prototype.normalize=function(){var e=this.length();return 0===e?(this.x=1,this.y=0):this.divide(n(e,e)),this},n.prototype.norm=n.prototype.normalize,n.prototype.limit=function(e,t){return Math.abs(this.x)>e&&(this.x*=t),Math.abs(this.y)>e&&(this.y*=t),this},n.prototype.randomize=function(e,t){return this.randomizeX(e,t),this.randomizeY(e,t),this},n.prototype.randomizeX=function(e,t){var n=Math.min(e.x,t.x),i=Math.max(e.x,t.x);return this.x=r(n,i),this},n.prototype.randomizeY=function(e,t){var n=Math.min(e.y,t.y),i=Math.max(e.y,t.y);return this.y=r(n,i),this},n.prototype.randomizeAny=function(e,t){return Math.round(Math.random())?this.randomizeX(e,t):this.randomizeY(e,t),this},n.prototype.unfloat=function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},n.prototype.toFixed=function(e){return void 0===e&&(e=8),this.x=this.x.toFixed(e),this.y=this.y.toFixed(e),this},n.prototype.mixX=function(e,t){return void 0===t&&(t=.5),this.x=(1-t)*this.x+t*e.x,this},n.prototype.mixY=function(e,t){return void 0===t&&(t=.5),this.y=(1-t)*this.y+t*e.y,this},n.prototype.mix=function(e,t){return this.mixX(e,t),this.mixY(e,t),this},n.prototype.clone=function(){return new n(this.x,this.y)},n.prototype.copyX=function(e){return this.x=e.x,this},n.prototype.copyY=function(e){return this.y=e.y,this},n.prototype.copy=function(e){return this.copyX(e),this.copyY(e),this},n.prototype.zero=function(){return this.x=this.y=0,this},n.prototype.dot=function(e){return this.x*e.x+this.y*e.y},n.prototype.cross=function(e){return this.x*e.y-this.y*e.x},n.prototype.projectOnto=function(e){var t=(this.x*e.x+this.y*e.y)/(e.x*e.x+e.y*e.y);return this.x=t*e.x,this.y=t*e.y,this},n.prototype.horizontalAngle=function(){return Math.atan2(this.y,this.x)},n.prototype.horizontalAngleDeg=function(){return o(this.horizontalAngle())},n.prototype.verticalAngle=function(){return Math.atan2(this.x,this.y)},n.prototype.verticalAngleDeg=function(){return o(this.verticalAngle())},n.prototype.angle=n.prototype.horizontalAngle,n.prototype.angleDeg=n.prototype.horizontalAngleDeg,n.prototype.direction=n.prototype.horizontalAngle,n.prototype.rotate=function(e){var t=this.x*Math.cos(e)-this.y*Math.sin(e),n=this.x*Math.sin(e)+this.y*Math.cos(e);return this.x=t,this.y=n,this},n.prototype.rotateDeg=function(e){return e=a(e),this.rotate(e)},n.prototype.rotateTo=function(e){return this.rotate(e-this.angle())},n.prototype.rotateToDeg=function(e){return e=a(e),this.rotateTo(e)},n.prototype.rotateBy=function(e){var t=this.angle()+e;return this.rotate(t)},n.prototype.rotateByDeg=function(e){return e=a(e),this.rotateBy(e)},n.prototype.distanceX=function(e){return this.x-e.x},n.prototype.absDistanceX=function(e){return Math.abs(this.distanceX(e))},n.prototype.distanceY=function(e){return this.y-e.y},n.prototype.absDistanceY=function(e){return Math.abs(this.distanceY(e))},n.prototype.distance=function(e){return Math.sqrt(this.distanceSq(e))},n.prototype.distanceSq=function(e){var t=this.distanceX(e),n=this.distanceY(e);return t*t+n*n},n.prototype.length=function(){return Math.sqrt(this.lengthSq())},n.prototype.lengthSq=function(){return this.x*this.x+this.y*this.y},n.prototype.magnitude=n.prototype.length,n.prototype.isZero=function(){return 0===this.x&&0===this.y},n.prototype.isEqualTo=function(e){return this.x===e.x&&this.y===e.y},n.prototype.toString=function(){return"x:"+this.x+", y:"+this.y},n.prototype.toArray=function(){return[this.x,this.y]},n.prototype.toObject=function(){return{x:this.x,y:this.y}};var i=180/Math.PI;function r(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function o(e){return e*i}function a(e){return e/i}}();var In=xn.exports,Tn={exports:{}};Tn.exports=function(){var e="1.13.2",t="object"==typeof self&&self.self===self&&self||"object"==typeof et&&et.global===et&&et||Function("return this")()||{},n=Array.prototype,i=Object.prototype,r="undefined"!=typeof Symbol?Symbol.prototype:null,o=n.push,a=n.slice,s=i.toString,l=i.hasOwnProperty,c="undefined"!=typeof ArrayBuffer,h="undefined"!=typeof DataView,u=Array.isArray,d=Object.keys,g=Object.create,m=c&&ArrayBuffer.isView,p=isNaN,f=isFinite,_=!{toString:null}.propertyIsEnumerable("toString"),y=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],C=Math.pow(2,53)-1;function b(e,t){return t=null==t?e.length-1:+t,function(){for(var n=Math.max(arguments.length-t,0),i=Array(n),r=0;r<n;r++)i[r]=arguments[r+t];switch(t){case 0:return e.call(this,i);case 1:return e.call(this,arguments[0],i);case 2:return e.call(this,arguments[0],arguments[1],i)}var o=Array(t+1);for(r=0;r<t;r++)o[r]=arguments[r];return o[t]=i,e.apply(this,o)}}function S(e){var t=typeof e;return"function"===t||"object"===t&&!!e}function x(e){return null===e}function I(e){return void 0===e}function T(e){return!0===e||!1===e||"[object Boolean]"===s.call(e)}function v(e){return!(!e||1!==e.nodeType)}function E(e){var t="[object "+e+"]";return function(e){return s.call(e)===t}}var w=E("String"),A=E("Number"),L=E("Date"),D=E("RegExp"),M=E("Error"),N=E("Symbol"),P=E("ArrayBuffer"),R=E("Function"),O=t.document&&t.document.childNodes;"function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof O&&(R=function(e){return"function"==typeof e||!1});var B=R,G=E("Object"),k=h&&G(new DataView(new ArrayBuffer(8))),F="undefined"!=typeof Map&&G(new Map),W=E("DataView");function z(e){return null!=e&&B(e.getInt8)&&P(e.buffer)}var H=k?z:W,U=u||E("Array");function V(e,t){return null!=e&&l.call(e,t)}var Y=E("Arguments");!function(){Y(arguments)||(Y=function(e){return V(e,"callee")})}();var q=Y;function K(e){return!N(e)&&f(e)&&!isNaN(parseFloat(e))}function j(e){return A(e)&&p(e)}function X(e){return function(){return e}}function J(e){return function(t){var n=e(t);return"number"==typeof n&&n>=0&&n<=C}}function Z(e){return function(t){return null==t?void 0:t[e]}}var Q=Z("byteLength"),$=J(Q),ee=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;function te(e){return m?m(e)&&!H(e):$(e)&&ee.test(s.call(e))}var ne=c?te:X(!1),ie=Z("length");function re(e){for(var t={},n=e.length,i=0;i<n;++i)t[e[i]]=!0;return{contains:function(e){return!0===t[e]},push:function(n){return t[n]=!0,e.push(n)}}}function oe(e,t){t=re(t);var n=y.length,r=e.constructor,o=B(r)&&r.prototype||i,a="constructor";for(V(e,a)&&!t.contains(a)&&t.push(a);n--;)(a=y[n])in e&&e[a]!==o[a]&&!t.contains(a)&&t.push(a)}function ae(e){if(!S(e))return[];if(d)return d(e);var t=[];for(var n in e)V(e,n)&&t.push(n);return _&&oe(e,t),t}function se(e){if(null==e)return!0;var t=ie(e);return"number"==typeof t&&(U(e)||w(e)||q(e))?0===t:0===ie(ae(e))}function le(e,t){var n=ae(t),i=n.length;if(null==e)return!i;for(var r=Object(e),o=0;o<i;o++){var a=n[o];if(t[a]!==r[a]||!(a in r))return!1}return!0}function ce(e){return e instanceof ce?e:this instanceof ce?void(this._wrapped=e):new ce(e)}function he(e){return new Uint8Array(e.buffer||e,e.byteOffset||0,Q(e))}ce.VERSION=e,ce.prototype.value=function(){return this._wrapped},ce.prototype.valueOf=ce.prototype.toJSON=ce.prototype.value,ce.prototype.toString=function(){return String(this._wrapped)};var ue="[object DataView]";function de(e,t,n,i){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var r=typeof e;return("function"===r||"object"===r||"object"==typeof t)&&ge(e,t,n,i)}function ge(e,t,n,i){e instanceof ce&&(e=e._wrapped),t instanceof ce&&(t=t._wrapped);var o=s.call(e);if(o!==s.call(t))return!1;if(k&&"[object Object]"==o&&H(e)){if(!H(t))return!1;o=ue}switch(o){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return r.valueOf.call(e)===r.valueOf.call(t);case"[object ArrayBuffer]":case ue:return ge(he(e),he(t),n,i)}var a="[object Array]"===o;if(!a&&ne(e)){if(Q(e)!==Q(t))return!1;if(e.buffer===t.buffer&&e.byteOffset===t.byteOffset)return!0;a=!0}if(!a){if("object"!=typeof e||"object"!=typeof t)return!1;var l=e.constructor,c=t.constructor;if(l!==c&&!(B(l)&&l instanceof l&&B(c)&&c instanceof c)&&"constructor"in e&&"constructor"in t)return!1}i=i||[];for(var h=(n=n||[]).length;h--;)if(n[h]===e)return i[h]===t;if(n.push(e),i.push(t),a){if((h=e.length)!==t.length)return!1;for(;h--;)if(!de(e[h],t[h],n,i))return!1}else{var u,d=ae(e);if(h=d.length,ae(t).length!==h)return!1;for(;h--;)if(!V(t,u=d[h])||!de(e[u],t[u],n,i))return!1}return n.pop(),i.pop(),!0}function me(e,t){return de(e,t)}function pe(e){if(!S(e))return[];var t=[];for(var n in e)t.push(n);return _&&oe(e,t),t}function fe(e){var t=ie(e);return function(n){if(null==n)return!1;var i=pe(n);if(ie(i))return!1;for(var r=0;r<t;r++)if(!B(n[e[r]]))return!1;return e!==xe||!B(n[_e])}}var _e="forEach",ye="has",Ce=["clear","delete"],be=["get",ye,"set"],Se=Ce.concat(_e,be),xe=Ce.concat(be),Ie=["add"].concat(Ce,_e,ye),Te=F?fe(Se):E("Map"),ve=F?fe(xe):E("WeakMap"),Ee=F?fe(Ie):E("Set"),we=E("WeakSet");function Ae(e){for(var t=ae(e),n=t.length,i=Array(n),r=0;r<n;r++)i[r]=e[t[r]];return i}function Le(e){for(var t=ae(e),n=t.length,i=Array(n),r=0;r<n;r++)i[r]=[t[r],e[t[r]]];return i}function De(e){for(var t={},n=ae(e),i=0,r=n.length;i<r;i++)t[e[n[i]]]=n[i];return t}function Me(e){var t=[];for(var n in e)B(e[n])&&t.push(n);return t.sort()}function Ne(e,t){return function(n){var i=arguments.length;if(t&&(n=Object(n)),i<2||null==n)return n;for(var r=1;r<i;r++)for(var o=arguments[r],a=e(o),s=a.length,l=0;l<s;l++){var c=a[l];t&&void 0!==n[c]||(n[c]=o[c])}return n}}var Pe=Ne(pe),Re=Ne(ae),Oe=Ne(pe,!0);function Be(){return function(){}}function Ge(e){if(!S(e))return{};if(g)return g(e);var t=Be();t.prototype=e;var n=new t;return t.prototype=null,n}function ke(e,t){var n=Ge(e);return t&&Re(n,t),n}function Fe(e){return S(e)?U(e)?e.slice():Pe({},e):e}function We(e,t){return t(e),e}function ze(e){return U(e)?e:[e]}function He(e){return ce.toPath(e)}function Ue(e,t){for(var n=t.length,i=0;i<n;i++){if(null==e)return;e=e[t[i]]}return n?e:void 0}function Ve(e,t,n){var i=Ue(e,He(t));return I(i)?n:i}function Ye(e,t){for(var n=(t=He(t)).length,i=0;i<n;i++){var r=t[i];if(!V(e,r))return!1;e=e[r]}return!!n}function qe(e){return e}function Ke(e){return e=Re({},e),function(t){return le(t,e)}}function je(e){return e=He(e),function(t){return Ue(t,e)}}function Xe(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,i,r){return e.call(t,n,i,r)};case 4:return function(n,i,r,o){return e.call(t,n,i,r,o)}}return function(){return e.apply(t,arguments)}}function Je(e,t,n){return null==e?qe:B(e)?Xe(e,t,n):S(e)&&!U(e)?Ke(e):je(e)}function Ze(e,t){return Je(e,t,1/0)}function Qe(e,t,n){return ce.iteratee!==Ze?ce.iteratee(e,t):Je(e,t,n)}function $e(e,t,n){t=Qe(t,n);for(var i=ae(e),r=i.length,o={},a=0;a<r;a++){var s=i[a];o[s]=t(e[s],s,e)}return o}function tt(){}function nt(e){return null==e?tt:function(t){return Ve(e,t)}}function it(e,t,n){var i=Array(Math.max(0,e));t=Xe(t,n,1);for(var r=0;r<e;r++)i[r]=t(r);return i}function rt(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))}ce.toPath=ze,ce.iteratee=Ze;var ot=Date.now||function(){return(new Date).getTime()};function at(e){var t=function(t){return e[t]},n="(?:"+ae(e).join("|")+")",i=RegExp(n),r=RegExp(n,"g");return function(e){return e=null==e?"":""+e,i.test(e)?e.replace(r,t):e}}var st={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},lt=at(st),ct=at(De(st)),ht=ce.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},ut=/(.)^/,dt={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},gt=/\\|'|\r|\n|\u2028|\u2029/g;function mt(e){return"\\"+dt[e]}var pt=/^\s*(\w|\$)+\s*$/;function ft(e,t,n){!t&&n&&(t=n),t=Oe({},t,ce.templateSettings);var i=RegExp([(t.escape||ut).source,(t.interpolate||ut).source,(t.evaluate||ut).source].join("|")+"|$","g"),r=0,o="__p+='";e.replace(i,(function(t,n,i,a,s){return o+=e.slice(r,s).replace(gt,mt),r=s+t.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":i?o+="'+\n((__t=("+i+"))==null?'':__t)+\n'":a&&(o+="';\n"+a+"\n__p+='"),t})),o+="';\n";var a,s=t.variable;if(s){if(!pt.test(s))throw new Error("variable is not a bare identifier: "+s)}else o="with(obj||{}){\n"+o+"}\n",s="obj";o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{a=new Function(s,"_",o)}catch(e){throw e.source=o,e}var l=function(e){return a.call(this,e,ce)};return l.source="function("+s+"){\n"+o+"}",l}function _t(e,t,n){var i=(t=He(t)).length;if(!i)return B(n)?n.call(e):n;for(var r=0;r<i;r++){var o=null==e?void 0:e[t[r]];void 0===o&&(o=n,r=i),e=B(o)?o.call(e):o}return e}var yt=0;function Ct(e){var t=++yt+"";return e?e+t:t}function bt(e){var t=ce(e);return t._chain=!0,t}function St(e,t,n,i,r){if(!(i instanceof t))return e.apply(n,r);var o=Ge(e.prototype),a=e.apply(o,r);return S(a)?a:o}var xt=b((function(e,t){var n=xt.placeholder,i=function(){for(var r=0,o=t.length,a=Array(o),s=0;s<o;s++)a[s]=t[s]===n?arguments[r++]:t[s];for(;r<arguments.length;)a.push(arguments[r++]);return St(e,i,this,this,a)};return i}));xt.placeholder=ce;var It=b((function(e,t,n){if(!B(e))throw new TypeError("Bind must be called on a function");var i=b((function(r){return St(e,i,t,this,n.concat(r))}));return i})),Tt=J(ie);function vt(e,t,n,i){if(i=i||[],t||0===t){if(t<=0)return i.concat(e)}else t=1/0;for(var r=i.length,o=0,a=ie(e);o<a;o++){var s=e[o];if(Tt(s)&&(U(s)||q(s)))if(t>1)vt(s,t-1,n,i),r=i.length;else for(var l=0,c=s.length;l<c;)i[r++]=s[l++];else n||(i[r++]=s)}return i}var Et=b((function(e,t){var n=(t=vt(t,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var i=t[n];e[i]=It(e[i],e)}return e}));function wt(e,t){var n=function(i){var r=n.cache,o=""+(t?t.apply(this,arguments):i);return V(r,o)||(r[o]=e.apply(this,arguments)),r[o]};return n.cache={},n}var At=b((function(e,t,n){return setTimeout((function(){return e.apply(null,n)}),t)})),Lt=xt(At,ce,1);function Dt(e,t,n){var i,r,o,a,s=0;n||(n={});var l=function(){s=!1===n.leading?0:ot(),i=null,a=e.apply(r,o),i||(r=o=null)},c=function(){var c=ot();s||!1!==n.leading||(s=c);var h=t-(c-s);return r=this,o=arguments,h<=0||h>t?(i&&(clearTimeout(i),i=null),s=c,a=e.apply(r,o),i||(r=o=null)):i||!1===n.trailing||(i=setTimeout(l,h)),a};return c.cancel=function(){clearTimeout(i),s=0,i=r=o=null},c}function Mt(e,t,n){var i,r,o,a,s,l=function(){var c=ot()-r;t>c?i=setTimeout(l,t-c):(i=null,n||(a=e.apply(s,o)),i||(o=s=null))},c=b((function(c){return s=this,o=c,r=ot(),i||(i=setTimeout(l,t),n&&(a=e.apply(s,o))),a}));return c.cancel=function(){clearTimeout(i),i=o=s=null},c}function Nt(e,t){return xt(t,e)}function Pt(e){return function(){return!e.apply(this,arguments)}}function Rt(){var e=arguments,t=e.length-1;return function(){for(var n=t,i=e[t].apply(this,arguments);n--;)i=e[n].call(this,i);return i}}function Ot(e,t){return function(){if(--e<1)return t.apply(this,arguments)}}function Bt(e,t){var n;return function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=null),n}}var Gt=xt(Bt,2);function kt(e,t,n){t=Qe(t,n);for(var i,r=ae(e),o=0,a=r.length;o<a;o++)if(t(e[i=r[o]],i,e))return i}function Ft(e){return function(t,n,i){n=Qe(n,i);for(var r=ie(t),o=e>0?0:r-1;o>=0&&o<r;o+=e)if(n(t[o],o,t))return o;return-1}}var Wt=Ft(1),zt=Ft(-1);function Ht(e,t,n,i){for(var r=(n=Qe(n,i,1))(t),o=0,a=ie(e);o<a;){var s=Math.floor((o+a)/2);n(e[s])<r?o=s+1:a=s}return o}function Ut(e,t,n){return function(i,r,o){var s=0,l=ie(i);if("number"==typeof o)e>0?s=o>=0?o:Math.max(o+l,s):l=o>=0?Math.min(o+1,l):o+l+1;else if(n&&o&&l)return i[o=n(i,r)]===r?o:-1;if(r!=r)return(o=t(a.call(i,s,l),j))>=0?o+s:-1;for(o=e>0?s:l-1;o>=0&&o<l;o+=e)if(i[o]===r)return o;return-1}}var Vt=Ut(1,Wt,Ht),Yt=Ut(-1,zt);function qt(e,t,n){var i=(Tt(e)?Wt:kt)(e,t,n);if(void 0!==i&&-1!==i)return e[i]}function Kt(e,t){return qt(e,Ke(t))}function jt(e,t,n){var i,r;if(t=Xe(t,n),Tt(e))for(i=0,r=e.length;i<r;i++)t(e[i],i,e);else{var o=ae(e);for(i=0,r=o.length;i<r;i++)t(e[o[i]],o[i],e)}return e}function Xt(e,t,n){t=Qe(t,n);for(var i=!Tt(e)&&ae(e),r=(i||e).length,o=Array(r),a=0;a<r;a++){var s=i?i[a]:a;o[a]=t(e[s],s,e)}return o}function Jt(e){var t=function(t,n,i,r){var o=!Tt(t)&&ae(t),a=(o||t).length,s=e>0?0:a-1;for(r||(i=t[o?o[s]:s],s+=e);s>=0&&s<a;s+=e){var l=o?o[s]:s;i=n(i,t[l],l,t)}return i};return function(e,n,i,r){var o=arguments.length>=3;return t(e,Xe(n,r,4),i,o)}}var Zt=Jt(1),Qt=Jt(-1);function $t(e,t,n){var i=[];return t=Qe(t,n),jt(e,(function(e,n,r){t(e,n,r)&&i.push(e)})),i}function en(e,t,n){return $t(e,Pt(Qe(t)),n)}function tn(e,t,n){t=Qe(t,n);for(var i=!Tt(e)&&ae(e),r=(i||e).length,o=0;o<r;o++){var a=i?i[o]:o;if(!t(e[a],a,e))return!1}return!0}function nn(e,t,n){t=Qe(t,n);for(var i=!Tt(e)&&ae(e),r=(i||e).length,o=0;o<r;o++){var a=i?i[o]:o;if(t(e[a],a,e))return!0}return!1}function rn(e,t,n,i){return Tt(e)||(e=Ae(e)),("number"!=typeof n||i)&&(n=0),Vt(e,t,n)>=0}var on=b((function(e,t,n){var i,r;return B(t)?r=t:(t=He(t),i=t.slice(0,-1),t=t[t.length-1]),Xt(e,(function(e){var o=r;if(!o){if(i&&i.length&&(e=Ue(e,i)),null==e)return;o=e[t]}return null==o?o:o.apply(e,n)}))}));function an(e,t){return Xt(e,je(t))}function sn(e,t){return $t(e,Ke(t))}function ln(e,t,n){var i,r,o=-1/0,a=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var s=0,l=(e=Tt(e)?e:Ae(e)).length;s<l;s++)null!=(i=e[s])&&i>o&&(o=i);else t=Qe(t,n),jt(e,(function(e,n,i){((r=t(e,n,i))>a||r===-1/0&&o===-1/0)&&(o=e,a=r)}));return o}function cn(e,t,n){var i,r,o=1/0,a=1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var s=0,l=(e=Tt(e)?e:Ae(e)).length;s<l;s++)null!=(i=e[s])&&i<o&&(o=i);else t=Qe(t,n),jt(e,(function(e,n,i){((r=t(e,n,i))<a||r===1/0&&o===1/0)&&(o=e,a=r)}));return o}var hn=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function un(e){return e?U(e)?a.call(e):w(e)?e.match(hn):Tt(e)?Xt(e,qe):Ae(e):[]}function dn(e,t,n){if(null==t||n)return Tt(e)||(e=Ae(e)),e[rt(e.length-1)];var i=un(e),r=ie(i);t=Math.max(Math.min(t,r),0);for(var o=r-1,a=0;a<t;a++){var s=rt(a,o),l=i[a];i[a]=i[s],i[s]=l}return i.slice(0,t)}function gn(e){return dn(e,1/0)}function mn(e,t,n){var i=0;return t=Qe(t,n),an(Xt(e,(function(e,n,r){return{value:e,index:i++,criteria:t(e,n,r)}})).sort((function(e,t){var n=e.criteria,i=t.criteria;if(n!==i){if(n>i||void 0===n)return 1;if(n<i||void 0===i)return-1}return e.index-t.index})),"value")}function pn(e,t){return function(n,i,r){var o=t?[[],[]]:{};return i=Qe(i,r),jt(n,(function(t,r){var a=i(t,r,n);e(o,t,a)})),o}}var fn=pn((function(e,t,n){V(e,n)?e[n].push(t):e[n]=[t]})),_n=pn((function(e,t,n){e[n]=t})),yn=pn((function(e,t,n){V(e,n)?e[n]++:e[n]=1})),Cn=pn((function(e,t,n){e[n?0:1].push(t)}),!0);function bn(e){return null==e?0:Tt(e)?e.length:ae(e).length}function Sn(e,t,n){return t in n}var xn=b((function(e,t){var n={},i=t[0];if(null==e)return n;B(i)?(t.length>1&&(i=Xe(i,t[1])),t=pe(e)):(i=Sn,t=vt(t,!1,!1),e=Object(e));for(var r=0,o=t.length;r<o;r++){var a=t[r],s=e[a];i(s,a,e)&&(n[a]=s)}return n})),In=b((function(e,t){var n,i=t[0];return B(i)?(i=Pt(i),t.length>1&&(n=t[1])):(t=Xt(vt(t,!1,!1),String),i=function(e,n){return!rn(t,n)}),xn(e,i,n)}));function Tn(e,t,n){return a.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))}function vn(e,t,n){return null==e||e.length<1?null==t||n?void 0:[]:null==t||n?e[0]:Tn(e,e.length-t)}function En(e,t,n){return a.call(e,null==t||n?1:t)}function wn(e,t,n){return null==e||e.length<1?null==t||n?void 0:[]:null==t||n?e[e.length-1]:En(e,Math.max(0,e.length-t))}function An(e){return $t(e,Boolean)}function Ln(e,t){return vt(e,t,!1)}var Dn=b((function(e,t){return t=vt(t,!0,!0),$t(e,(function(e){return!rn(t,e)}))})),Mn=b((function(e,t){return Dn(e,t)}));function Nn(e,t,n,i){T(t)||(i=n,n=t,t=!1),null!=n&&(n=Qe(n,i));for(var r=[],o=[],a=0,s=ie(e);a<s;a++){var l=e[a],c=n?n(l,a,e):l;t&&!n?(a&&o===c||r.push(l),o=c):n?rn(o,c)||(o.push(c),r.push(l)):rn(r,l)||r.push(l)}return r}var Pn=b((function(e){return Nn(vt(e,!0,!0))}));function Rn(e){for(var t=[],n=arguments.length,i=0,r=ie(e);i<r;i++){var o=e[i];if(!rn(t,o)){var a;for(a=1;a<n&&rn(arguments[a],o);a++);a===n&&t.push(o)}}return t}function On(e){for(var t=e&&ln(e,ie).length||0,n=Array(t),i=0;i<t;i++)n[i]=an(e,i);return n}var Bn=b(On);function Gn(e,t){for(var n={},i=0,r=ie(e);i<r;i++)t?n[e[i]]=t[i]:n[e[i][0]]=e[i][1];return n}function kn(e,t,n){null==t&&(t=e||0,e=0),n||(n=t<e?-1:1);for(var i=Math.max(Math.ceil((t-e)/n),0),r=Array(i),o=0;o<i;o++,e+=n)r[o]=e;return r}function Fn(e,t){if(null==t||t<1)return[];for(var n=[],i=0,r=e.length;i<r;)n.push(a.call(e,i,i+=t));return n}function Wn(e,t){return e._chain?ce(t).chain():t}function zn(e){return jt(Me(e),(function(t){var n=ce[t]=e[t];ce.prototype[t]=function(){var e=[this._wrapped];return o.apply(e,arguments),Wn(this,n.apply(ce,e))}})),ce}jt(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var t=n[e];ce.prototype[e]=function(){var n=this._wrapped;return null!=n&&(t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0]),Wn(this,n)}})),jt(["concat","join","slice"],(function(e){var t=n[e];ce.prototype[e]=function(){var e=this._wrapped;return null!=e&&(e=t.apply(e,arguments)),Wn(this,e)}}));var Hn={__proto__:null,VERSION:e,restArguments:b,isObject:S,isNull:x,isUndefined:I,isBoolean:T,isElement:v,isString:w,isNumber:A,isDate:L,isRegExp:D,isError:M,isSymbol:N,isArrayBuffer:P,isDataView:H,isArray:U,isFunction:B,isArguments:q,isFinite:K,isNaN:j,isTypedArray:ne,isEmpty:se,isMatch:le,isEqual:me,isMap:Te,isWeakMap:ve,isSet:Ee,isWeakSet:we,keys:ae,allKeys:pe,values:Ae,pairs:Le,invert:De,functions:Me,methods:Me,extend:Pe,extendOwn:Re,assign:Re,defaults:Oe,create:ke,clone:Fe,tap:We,get:Ve,has:Ye,mapObject:$e,identity:qe,constant:X,noop:tt,toPath:ze,property:je,propertyOf:nt,matcher:Ke,matches:Ke,times:it,random:rt,now:ot,escape:lt,unescape:ct,templateSettings:ht,template:ft,result:_t,uniqueId:Ct,chain:bt,iteratee:Ze,partial:xt,bind:It,bindAll:Et,memoize:wt,delay:At,defer:Lt,throttle:Dt,debounce:Mt,wrap:Nt,negate:Pt,compose:Rt,after:Ot,before:Bt,once:Gt,findKey:kt,findIndex:Wt,findLastIndex:zt,sortedIndex:Ht,indexOf:Vt,lastIndexOf:Yt,find:qt,detect:qt,findWhere:Kt,each:jt,forEach:jt,map:Xt,collect:Xt,reduce:Zt,foldl:Zt,inject:Zt,reduceRight:Qt,foldr:Qt,filter:$t,select:$t,reject:en,every:tn,all:tn,some:nn,any:nn,contains:rn,includes:rn,include:rn,invoke:on,pluck:an,where:sn,max:ln,min:cn,shuffle:gn,sample:dn,sortBy:mn,groupBy:fn,indexBy:_n,countBy:yn,partition:Cn,toArray:un,size:bn,pick:xn,omit:In,first:vn,head:vn,take:vn,initial:Tn,last:wn,rest:En,tail:En,drop:En,compact:An,flatten:Ln,without:Mn,uniq:Nn,unique:Nn,union:Pn,intersection:Rn,difference:Dn,unzip:On,transpose:On,zip:Bn,object:Gn,range:kn,chunk:Fn,mixin:zn,default:ce},Un=zn(Hn);return Un._=Un,Un}();var vn=Tn.exports;const En=function(e,t,n,i){this.x=e,this.y=t,this.width=n,this.height=i};En.prototype.getBoundingBox=function(){return{top:this.y,right:this.x+this.width-1,bottom:this.y+this.height-1,left:this.x}},En.prototype.containsTile=function(e,t){const n=this.getBoundingBox();return!(e<n.left||e>n.right||t<n.top||t>n.bottom)},En.prototype.intersects=function(e){if(!e.getBoundingBox)throw new Error("Given entity has no method getBoundingBox");var t=this.getBoundingBox(),n=e.getBoundingBox();return!(n.left>t.right||n.right<t.left||n.top>t.bottom||n.bottom<t.top)},En.prototype.toJS=function(){return{x:this.x,y:this.y,width:this.width,height:this.height}};var wn=En;const An=function(e,t,n){this.type=e,this.neighbours=[],this.x=t,this.y=n};An.prototype.setNeighbours=function(e){return this.neighbours=e,this},An.prototype.toJS=function(){return{x:this.x,y:this.y,type:this.type}};const Ln=Sn,Dn=In,Mn=vn,Nn=wn,Pn=An,Rn=e=>{const t=[];return e.neighbours.n&&t.push(e.neighbours.n),e.neighbours.e&&t.push(e.neighbours.e),e.neighbours.s&&t.push(e.neighbours.s),e.neighbours.w&&t.push(e.neighbours.w),t},On=new Ln,Bn=function(){var e,t,n=[],i=-1;const r=[new Dn(0,1),new Dn(1,0),new Dn(0,-1),new Dn(-1,0)],o=t=>{e=t};let a,s=[];const l=(e,n)=>t.integer({min:e,max:n}),c=(e,t)=>s[e][t],h=t=>{let n={};var i,r;for(i=0;i<e.width;i++)for(s.push([]),r=0;r<e.height;r++)s[i].push(new Pn(t,i,r));for(i=0;i<e.width;i++)for(r=0;r<e.height;r++)n={},s[i][r-1]&&(n.n=s[i][r-1]),s[i+1]&&s[i+1][r-1]&&(n.ne=s[i+1][r-1]),s[i+1]&&s[i+1][r]&&(n.e=s[i+1][r]),s[i+1]&&s[i+1][r+1]&&(n.se=s[i+1][r+1]),s[i]&&s[i][r+1]&&(n.s=s[i][r+1]),s[i-1]&&s[i-1][r+1]&&(n.sw=s[i-1][r+1]),s[i-1]&&s[i-1][r]&&(n.w=s[i-1][r]),s[i-1]&&s[i-1][r-1]&&(n.nw=s[i-1][r-1]),s[i][r].setNeighbours(n);return s},u=()=>{const e=[],t=[];for(const t of n)e.push(t.toJS());for(let e=0;e<s.length;e++){t[e]||t.push([]);for(let n=0;n<s[e].length;n++){const i=s[e][n];t[e].push(i.toJS())}}return{tiles:t,rooms:e,seed:a}},d=(e,t)=>{var n,i=[];if(Object.keys(s[e][t].neighbours).filter((e=>"floor"===e.type)).length>0)return;C(),b(e,t),i.push(new Dn(e,t));let o=0;for(;i.length&&o<500;){o++;var a=i[i.length-1],c=[];for(let e of r)y(a,e)&&c.push(e);if(c.length){var h,u=c.map((e=>e.toString()));if(n&&u.indexOf(n.toString())>-1&&l(1,100)>50)h=n.clone();else{h=c[l(0,c.length-1)].clone()}let e=a.clone().add(h).toObject();b(e.x,e.y);let t=a.clone().add(h).add(h).toObject();b(t.x,t.y),i.push(a.clone().add(h).add(h)),n=h.clone()}else i.pop(),n=null}},g=()=>{for(var t=0;t<50;t++){var i=2*l(1,3)+1,r=2*l(0,1+Math.floor(i/2)),o=i,a=i;f(2)?o+=r:a+=r,o=Math.min(o,e.width-4),a=Math.min(o,e.height-4);var s=2*l(0,Math.floor((e.width-o)/2))+1,c=2*l(0,Math.floor((e.height-a)/2))+1;s+o>e.width&&(s=Math.max(1,e.width-o-1)),c+a>e.height&&(c=Math.max(1,e.height-a-1));var h=new Nn(s,c,o,a),u=!1;for(var d of n)if(h.intersects(d)){u=!0;break}u||(n.push(h),C(),m(s,c,o,a))}},m=(e,t,n,i)=>{for(var r=e;r<e+n;r++)for(var o=t;o<t+i;o++)b(r,o)},p=()=>{let e={};s.forEach((t=>{t.forEach((t=>{if("floor"===t.type)return;let n=Mn.unique(Rn(t).map((e=>e.region)).filter((e=>!Mn.isUndefined(e))));if(n.length<=1)return;let i=n.join("-");e[i]||(e[i]=[]),e[i].push(t)}))})),Mn.each(e,(e=>{let t=l(0,e.length-1);e[t].type="door",e.splice(t,1),e.forEach((e=>{f(50)&&(e.type="door")}))}))},f=e=>1===l(1,e),_=()=>{var e=!1;const t=()=>{let e=!0;return s.forEach((t=>{t.forEach((t=>{"wall"!==t.type&&Rn(t).filter((e=>"wall"!==e.type)).length<=1&&!n.find((e=>e.containsTile(t.x,t.y)))&&(t.type="wall",e=!1)}))})),e};for(;!e;)e=!0,e=t()},y=(e,t)=>{let n=e.clone().add(t).add(t).add(t).toObject();if(!s[n.x]||!s[n.x][n.y])return!1;if("wall"!==c(n.x,n.y).type)return!1;let i=e.clone().add(t).add(t).toObject();return"floor"!==c(i.x,i.y).type},C=()=>++i,b=(e,t,n="floor")=>{((e,t,n)=>{if(s[e]&&s[e][t])return s[e][t].type=n,s[e][t].region=i,s[e][t];throw new RangeError(`tile at ${e}, ${t} is unreachable`)})(e,t,n)};return{build:e=>{if(e.width<5)throw new RangeError(`DungeoneerError: options.width must not be less than 5, received ${e.width}`);if(e.height<5)throw new RangeError(`DungeoneerError: options.height must not be less than 5, received ${e.height}`);e.width%2==0&&(e.width+=1),e.height%2==0&&(e.height+=1);const i=e.seed||`${On.word({length:7})}-${On.word({length:7})}`;t=new Ln(i),a=i,o(e),h("wall"),g();for(var r=1;r<e.height;r+=2)for(var l=1;l<e.width;l+=2)"floor"!==c(l,r).type&&d(l,r);return p(),_(),{rooms:n,tiles:s,seed:i,toJS:u}}}};var Gn=e=>(new Bn).build(e);const kn=2.3283064365386963e-10;class RNG{constructor(){this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}getSeed(){return this._seed}setSeed(e){return e=e<1?1/e:e,this._seed=e,this._s0=(e>>>0)*kn,e=69069*e+1>>>0,this._s1=e*kn,e=69069*e+1>>>0,this._s2=e*kn,this._c=1,this}getUniform(){let e=2091639*this._s0+this._c*kn;return this._s0=this._s1,this._s1=this._s2,this._c=0|e,this._s2=e-this._c,this._s2}getUniformInt(e,t){let n=Math.max(e,t),i=Math.min(e,t);return Math.floor(this.getUniform()*(n-i+1))+i}getNormal(e=0,t=1){let n,i,r;do{n=2*this.getUniform()-1,i=2*this.getUniform()-1,r=n*n+i*i}while(r>1||0==r);return e+n*Math.sqrt(-2*Math.log(r)/r)*t}getPercentage(){return 1+Math.floor(100*this.getUniform())}getItem(e){return e.length?e[Math.floor(this.getUniform()*e.length)]:null}shuffle(e){let t=[],n=e.slice();for(;n.length;){let e=n.indexOf(this.getItem(n));t.push(n.splice(e,1)[0])}return t}getWeightedValue(e){let t=0;for(let n in e)t+=e[n];let n,i=this.getUniform()*t,r=0;for(n in e)if(r+=e[n],i<r)return n;return n}getState(){return[this._s0,this._s1,this._s2,this._c]}setState(e){return this._s0=e[0],this._s1=e[1],this._s2=e[2],this._c=e[3],this}clone(){return(new RNG).setState(this.getState())}}var Fn=(new RNG).setSeed(Date.now());class Backend{getContainer(){return null}setOptions(e){this._options=e}}class Canvas extends Backend{constructor(){super(),this._ctx=document.createElement("canvas").getContext("2d")}schedule(e){requestAnimationFrame(e)}getContainer(){return this._ctx.canvas}setOptions(e){super.setOptions(e);const t=`${e.fontStyle?`${e.fontStyle} `:""} ${e.fontSize}px ${e.fontFamily}`;this._ctx.font=t,this._updateSize(),this._ctx.font=t,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}clear(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}eventToPosition(e,t){let n=this._ctx.canvas,i=n.getBoundingClientRect();return e-=i.left,t-=i.top,e*=n.width/i.width,t*=n.height/i.height,e<0||t<0||e>=n.width||t>=n.height?[-1,-1]:this._normalizedEventToPosition(e,t)}}(()=>{class Rect extends Canvas{constructor(){super(),this._spacingX=0,this._spacingY=0,this._canvasCache={}}setOptions(e){super.setOptions(e),this._canvasCache={}}draw(e,t){Rect.cache?this._drawWithCache(e):this._drawNoCache(e,t)}_drawWithCache(e){let t,[n,i,r,o,a]=e,s=""+r+o+a;if(s in this._canvasCache)t=this._canvasCache[s];else{let e=this._options.border;t=document.createElement("canvas");let n=t.getContext("2d");if(t.width=this._spacingX,t.height=this._spacingY,n.fillStyle=a,n.fillRect(e,e,t.width-e,t.height-e),r){n.fillStyle=o,n.font=this._ctx.font,n.textAlign="center",n.textBaseline="middle";let e=[].concat(r);for(let t=0;t<e.length;t++)n.fillText(e[t],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[s]=t}this._ctx.drawImage(t,n*this._spacingX,i*this._spacingY)}_drawNoCache(e,t){let[n,i,r,o,a]=e;if(t){let e=this._options.border;this._ctx.fillStyle=a,this._ctx.fillRect(n*this._spacingX+e,i*this._spacingY+e,this._spacingX-e,this._spacingY-e)}if(!r)return;this._ctx.fillStyle=o;let s=[].concat(r);for(let e=0;e<s.length;e++)this._ctx.fillText(s[e],(n+.5)*this._spacingX,Math.ceil((i+.5)*this._spacingY))}computeSize(e,t){return[Math.floor(e/this._spacingX),Math.floor(t/this._spacingY)]}computeFontSize(e,t){let n=Math.floor(e/this._options.width),i=Math.floor(t/this._options.height),r=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let o=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=r;let a=o/100*i/n;return a>1&&(i=Math.floor(i/a)),Math.floor(i/this._options.spacing)}_normalizedEventToPosition(e,t){return[Math.floor(e/this._spacingX),Math.floor(t/this._spacingY)]}_updateSize(){const e=this._options,t=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(e.spacing*t),this._spacingY=Math.ceil(e.spacing*e.fontSize),e.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=e.width*this._spacingX,this._ctx.canvas.height=e.height*this._spacingY}}Rect.cache=!1})();const Wn={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]};let zn=class Map{constructor(e=80,t=25){this._width=e,this._height=t}_fillMap(e){let t=[];for(let n=0;n<this._width;n++){t.push([]);for(let i=0;i<this._height;i++)t[n].push(e)}return t}};class Dungeon extends zn{constructor(e,t){super(e,t),this._rooms=[],this._corridors=[]}getRooms(){return this._rooms}getCorridors(){return this._corridors}}class Feature{}class Room extends Feature{constructor(e,t,n,i,r,o){super(),this._x1=e,this._y1=t,this._x2=n,this._y2=i,this._doors={},void 0!==r&&void 0!==o&&this.addDoor(r,o)}static createRandomAt(e,t,n,i,r){let o=r.roomWidth[0],a=r.roomWidth[1],s=Fn.getUniformInt(o,a);o=r.roomHeight[0],a=r.roomHeight[1];let l=Fn.getUniformInt(o,a);if(1==n){let n=t-Math.floor(Fn.getUniform()*l);return new this(e+1,n,e+s,n+l-1,e,t)}if(-1==n){let n=t-Math.floor(Fn.getUniform()*l);return new this(e-s,n,e-1,n+l-1,e,t)}if(1==i){let n=e-Math.floor(Fn.getUniform()*s);return new this(n,t+1,n+s-1,t+l,e,t)}if(-1==i){let n=e-Math.floor(Fn.getUniform()*s);return new this(n,t-l,n+s-1,t-1,e,t)}throw new Error("dx or dy must be 1 or -1")}static createRandomCenter(e,t,n){let i=n.roomWidth[0],r=n.roomWidth[1],o=Fn.getUniformInt(i,r);i=n.roomHeight[0],r=n.roomHeight[1];let a=Fn.getUniformInt(i,r),s=e-Math.floor(Fn.getUniform()*o),l=t-Math.floor(Fn.getUniform()*a);return new this(s,l,s+o-1,l+a-1)}static createRandom(e,t,n){let i=n.roomWidth[0],r=n.roomWidth[1],o=Fn.getUniformInt(i,r);i=n.roomHeight[0],r=n.roomHeight[1];let a=Fn.getUniformInt(i,r),s=e-o-1,l=t-a-1,c=1+Math.floor(Fn.getUniform()*s),h=1+Math.floor(Fn.getUniform()*l);return new this(c,h,c+o-1,h+a-1)}addDoor(e,t){return this._doors[e+","+t]=1,this}getDoors(e){for(let t in this._doors){let n=t.split(",");e(parseInt(n[0]),parseInt(n[1]))}return this}clearDoors(){return this._doors={},this}addDoors(e){let t=this._x1-1,n=this._x2+1,i=this._y1-1,r=this._y2+1;for(let o=t;o<=n;o++)for(let a=i;a<=r;a++)o!=t&&o!=n&&a!=i&&a!=r||e(o,a)||this.addDoor(o,a);return this}debug(){console.log("room",this._x1,this._y1,this._x2,this._y2)}isValid(e,t){let n=this._x1-1,i=this._x2+1,r=this._y1-1,o=this._y2+1;for(let a=n;a<=i;a++)for(let s=r;s<=o;s++)if(a==n||a==i||s==r||s==o){if(!e(a,s))return!1}else if(!t(a,s))return!1;return!0}create(e){let t=this._x1-1,n=this._x2+1,i=this._y1-1,r=this._y2+1,o=0;for(let a=t;a<=n;a++)for(let s=i;s<=r;s++)o=a+","+s in this._doors?2:a==t||a==n||s==i||s==r?1:0,e(a,s,o)}getCenter(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}getLeft(){return this._x1}getRight(){return this._x2}getTop(){return this._y1}getBottom(){return this._y2}}class Corridor extends Feature{constructor(e,t,n,i){super(),this._startX=e,this._startY=t,this._endX=n,this._endY=i,this._endsWithAWall=!0}static createRandomAt(e,t,n,i,r){let o=r.corridorLength[0],a=r.corridorLength[1],s=Fn.getUniformInt(o,a);return new this(e,t,e+n*s,t+i*s)}debug(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}isValid(e,t){let n=this._startX,i=this._startY,r=this._endX-n,o=this._endY-i,a=1+Math.max(Math.abs(r),Math.abs(o));r&&(r/=Math.abs(r)),o&&(o/=Math.abs(o));let s=o,l=-r,c=!0;for(let h=0;h<a;h++){let u=n+h*r,d=i+h*o;if(t(u,d)||(c=!1),e(u+s,d+l)||(c=!1),e(u-s,d-l)||(c=!1),!c){a=h,this._endX=u-r,this._endY=d-o;break}}if(0==a)return!1;if(1==a&&e(this._endX+r,this._endY+o))return!1;let h=!e(this._endX+r+s,this._endY+o+l),u=!e(this._endX+r-s,this._endY+o-l);return this._endsWithAWall=e(this._endX+r,this._endY+o),!h&&!u||!this._endsWithAWall}create(e){let t=this._startX,n=this._startY,i=this._endX-t,r=this._endY-n,o=1+Math.max(Math.abs(i),Math.abs(r));i&&(i/=Math.abs(i)),r&&(r/=Math.abs(r));for(let a=0;a<o;a++){e(t+a*i,n+a*r,0)}return!0}createPriorityWalls(e){if(!this._endsWithAWall)return;let t=this._startX,n=this._startY,i=this._endX-t,r=this._endY-n;i&&(i/=Math.abs(i)),r&&(r/=Math.abs(r));let o=r,a=-i;e(this._endX+i,this._endY+r),e(this._endX+o,this._endY+a),e(this._endX-o,this._endY-a)}}const Hn={room:Room,corridor:Corridor};function Un(e,t,n){n[t[e+1]]=n[e],t[n[e]]=t[e+1],n[e]=e+1,t[e+1]=e}function Vn(e,t,n){n[t[e]]=n[e],t[n[e]]=t[e],n[e]=e,t[e]=e}var Yn={Arena:class Arena extends zn{create(e){let t=this._width-1,n=this._height-1;for(let i=0;i<=t;i++)for(let r=0;r<=n;r++){e(i,r,i&&r&&i<t&&r<n?0:1)}return this}},Uniform:class Uniform extends Dungeon{constructor(e,t,n){super(e,t),this._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(this._options,n),this._map=[],this._dug=0,this._roomAttempts=20,this._corridorAttempts=20,this._connected=[],this._unconnected=[],this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this)}create(e){let t=Date.now();for(;;){if(Date.now()-t>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(e)for(let t=0;t<this._width;t++)for(let n=0;n<this._height;n++)e(t,n,this._map[t][n]);return this}_generateRooms(){let e,t=this._width-2,n=this._height-2;do{if(e=this._generateRoom(),this._dug/(t*n)>this._options.roomDugPercentage)break}while(e)}_generateRoom(){let e=0;for(;e<this._roomAttempts;){e++;let t=Room.createRandom(this._width,this._height,this._options);if(t.isValid(this._isWallCallback,this._canBeDugCallback))return t.create(this._digCallback),this._rooms.push(t),t}return null}_generateCorridors(){let e=0;for(;e<this._corridorAttempts;){e++,this._corridors=[],this._map=this._fillMap(1);for(let e=0;e<this._rooms.length;e++){let t=this._rooms[e];t.clearDoors(),t.create(this._digCallback)}for(this._unconnected=Fn.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){let e=Fn.getItem(this._connected);if(!e)break;let t=this._closestRoom(this._unconnected,e);if(!t)break;let n=this._closestRoom(this._connected,t);if(!n)break;if(!this._connectRooms(t,n))break;if(!this._unconnected.length)return!0}}return!1}_closestRoom(e,t){let n=1/0,i=t.getCenter(),r=null;for(let t=0;t<e.length;t++){let o=e[t],a=o.getCenter(),s=a[0]-i[0],l=a[1]-i[1],c=s*s+l*l;c<n&&(n=c,r=o)}return r}_connectRooms(e,t){let n,i,r,o,a,s,l,c=e.getCenter(),h=t.getCenter(),u=h[0]-c[0],d=h[1]-c[1];if(Math.abs(u)<Math.abs(d)?(r=d>0?2:0,o=(r+2)%4,a=t.getLeft(),s=t.getRight(),l=0):(r=u>0?1:3,o=(r+2)%4,a=t.getTop(),s=t.getBottom(),l=1),n=this._placeInWall(e,r),!n)return!1;if(n[l]>=a&&n[l]<=s){i=n.slice();let e=0;switch(o){case 0:e=t.getTop()-1;break;case 1:e=t.getRight()+1;break;case 2:e=t.getBottom()+1;break;case 3:e=t.getLeft()-1}i[(l+1)%2]=e,this._digLine([n,i])}else if(n[l]<a-1||n[l]>s+1){let e=n[l]-h[l],r=0;switch(o){case 0:case 1:r=e<0?3:1;break;case 2:case 3:r=e<0?1:3}if(o=(o+r)%4,i=this._placeInWall(t,o),!i)return!1;let a=[0,0];a[l]=n[l];let s=(l+1)%2;a[s]=i[s],this._digLine([n,a,i])}else{let e=(l+1)%2;if(i=this._placeInWall(t,o),!i)return!1;let r=Math.round((i[e]+n[e])/2),a=[0,0],s=[0,0];a[l]=n[l],a[e]=r,s[l]=i[l],s[e]=r,this._digLine([n,a,s,i])}return e.addDoor(n[0],n[1]),t.addDoor(i[0],i[1]),l=this._unconnected.indexOf(e),-1!=l&&(this._unconnected.splice(l,1),this._connected.push(e)),l=this._unconnected.indexOf(t),-1!=l&&(this._unconnected.splice(l,1),this._connected.push(t)),!0}_placeInWall(e,t){let n=[0,0],i=[0,0],r=0;switch(t){case 0:i=[1,0],n=[e.getLeft(),e.getTop()-1],r=e.getRight()-e.getLeft()+1;break;case 1:i=[0,1],n=[e.getRight()+1,e.getTop()],r=e.getBottom()-e.getTop()+1;break;case 2:i=[1,0],n=[e.getLeft(),e.getBottom()+1],r=e.getRight()-e.getLeft()+1;break;case 3:i=[0,1],n=[e.getLeft()-1,e.getTop()],r=e.getBottom()-e.getTop()+1}let o=[],a=-2;for(let e=0;e<r;e++){let t=n[0]+e*i[0],r=n[1]+e*i[1];o.push(null),1==this._map[t][r]?a!=e-1&&(o[e]=[t,r]):(a=e,e&&(o[e-1]=null))}for(let e=o.length-1;e>=0;e--)o[e]||o.splice(e,1);return o.length?Fn.getItem(o):null}_digLine(e){for(let t=1;t<e.length;t++){let n=e[t-1],i=e[t],r=new Corridor(n[0],n[1],i[0],i[1]);r.create(this._digCallback),this._corridors.push(r)}}_digCallback(e,t,n){this._map[e][t]=n,0==n&&this._dug++}_isWallCallback(e,t){return!(e<0||t<0||e>=this._width||t>=this._height)&&1==this._map[e][t]}_canBeDugCallback(e,t){return!(e<1||t<1||e+1>=this._width||t+1>=this._height)&&1==this._map[e][t]}},Cellular:class Cellular extends zn{constructor(e,t,n={}){super(e,t),this._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},this.setOptions(n),this._dirs=Wn[this._options.topology],this._map=this._fillMap(0)}randomize(e){for(let t=0;t<this._width;t++)for(let n=0;n<this._height;n++)this._map[t][n]=Fn.getUniform()<e?1:0;return this}setOptions(e){Object.assign(this._options,e)}set(e,t,n){this._map[e][t]=n}create(e){let t=this._fillMap(0),n=this._options.born,i=this._options.survive;for(let e=0;e<this._height;e++){let r=1,o=0;6==this._options.topology&&(r=2,o=e%2);for(let a=o;a<this._width;a+=r){let r=this._map[a][e],o=this._getNeighbors(a,e);r&&-1!=i.indexOf(o)?t[a][e]=1:r||-1==n.indexOf(o)||(t[a][e]=1)}}this._map=t,e&&this._serviceCallback(e)}_serviceCallback(e){for(let t=0;t<this._height;t++){let n=1,i=0;6==this._options.topology&&(n=2,i=t%2);for(let r=i;r<this._width;r+=n)e(r,t,this._map[r][t])}}_getNeighbors(e,t){let n=0;for(let i=0;i<this._dirs.length;i++){let r=this._dirs[i],o=e+r[0],a=t+r[1];o<0||o>=this._width||a<0||a>=this._height||(n+=1==this._map[o][a]?1:0)}return n}connect(e,t,n){t||(t=0);let i=[],r={},o=1,a=[0,0];6==this._options.topology&&(o=2,a=[0,1]);for(let e=0;e<this._height;e++)for(let n=a[e%2];n<this._width;n+=o)if(this._freeSpace(n,e,t)){let t=[n,e];r[this._pointKey(t)]=t,i.push([n,e])}let s=i[Fn.getUniformInt(0,i.length-1)],l=this._pointKey(s),c={};for(c[l]=s,delete r[l],this._findConnected(c,r,[s],!1,t);Object.keys(r).length>0;){let e=this._getFromTo(c,r),i=e[0],o=e[1],a={};a[this._pointKey(i)]=i,this._findConnected(a,r,[i],!0,t),(6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected).call(this,o,i,c,r,t,n);for(let e in a){let n=a[e];this._map[n[0]][n[1]]=t,c[e]=n,delete r[e]}}e&&this._serviceCallback(e)}_getFromTo(e,t){let n,i=[0,0],r=[0,0],o=Object.keys(e),a=Object.keys(t);for(let s=0;s<5;s++){if(o.length<a.length){let n=o;r=e[n[Fn.getUniformInt(0,n.length-1)]],i=this._getClosest(r,t)}else{let n=a;i=t[n[Fn.getUniformInt(0,n.length-1)]],r=this._getClosest(i,e)}if(n=(i[0]-r[0])*(i[0]-r[0])+(i[1]-r[1])*(i[1]-r[1]),n<64)break}return[i,r]}_getClosest(e,t){let n=null,i=null;for(let r in t){let o=t[r],a=(o[0]-e[0])*(o[0]-e[0])+(o[1]-e[1])*(o[1]-e[1]);(null==i||a<i)&&(i=a,n=o)}return n}_findConnected(e,t,n,i,r){for(;n.length>0;){let o,a=n.splice(0,1)[0];o=6==this._options.topology?[[a[0]+2,a[1]],[a[0]+1,a[1]-1],[a[0]-1,a[1]-1],[a[0]-2,a[1]],[a[0]-1,a[1]+1],[a[0]+1,a[1]+1]]:[[a[0]+1,a[1]],[a[0]-1,a[1]],[a[0],a[1]+1],[a[0],a[1]-1]];for(let a=0;a<o.length;a++){let s=this._pointKey(o[a]);null==e[s]&&this._freeSpace(o[a][0],o[a][1],r)&&(e[s]=o[a],i||delete t[s],n.push(o[a]))}}}_tunnelToConnected(e,t,n,i,r,o){let a,s;t[0]<e[0]?(a=t,s=e):(a=e,s=t);for(let e=a[0];e<=s[0];e++){this._map[e][a[1]]=r;let t=[e,a[1]],o=this._pointKey(t);n[o]=t,delete i[o]}o&&a[0]<s[0]&&o(a,[s[0],a[1]]);let l=s[0];t[1]<e[1]?(a=t,s=e):(a=e,s=t);for(let e=a[1];e<s[1];e++){this._map[l][e]=r;let t=[l,e],o=this._pointKey(t);n[o]=t,delete i[o]}o&&a[1]<s[1]&&o([s[0],a[1]],[s[0],s[1]])}_tunnelToConnected6(e,t,n,i,r,o){let a,s;t[0]<e[0]?(a=t,s=e):(a=e,s=t);let l=a[0],c=a[1];for(;l!=s[0]||c!=s[1];){let e=2;c<s[1]?(c++,e=1):c>s[1]&&(c--,e=1),l<s[0]?l+=e:l>s[0]||s[1]%2?l-=e:l+=e,this._map[l][c]=r;let t=[l,c],o=this._pointKey(t);n[o]=t,delete i[o]}o&&o(t,e)}_freeSpace(e,t,n){return e>=0&&e<this._width&&t>=0&&t<this._height&&this._map[e][t]==n}_pointKey(e){return e[0]+"."+e[1]}},Digger:class Digger extends Dungeon{constructor(e,t,n={}){super(e,t),this._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},n),this._features={room:4,corridor:4},this._map=[],this._featureAttempts=20,this._walls={},this._dug=0,this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this),this._priorityWallCallback=this._priorityWallCallback.bind(this)}create(e){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;let t=(this._width-2)*(this._height-2);this._firstRoom();let n,i=Date.now();do{if(n=0,Date.now()-i>this._options.timeLimit)break;let e=this._findWall();if(!e)break;let t=e.split(","),r=parseInt(t[0]),o=parseInt(t[1]),a=this._getDiggingDirection(r,o);if(!a)continue;let s=0;do{if(s++,this._tryFeature(r,o,a[0],a[1])){this._removeSurroundingWalls(r,o),this._removeSurroundingWalls(r-a[0],o-a[1]);break}}while(s<this._featureAttempts);for(let e in this._walls)this._walls[e]>1&&n++}while(this._dug/t<this._options.dugPercentage||n);if(this._addDoors(),e)for(let t=0;t<this._width;t++)for(let n=0;n<this._height;n++)e(t,n,this._map[t][n]);return this._walls={},this._map=[],this}_digCallback(e,t,n){0==n||2==n?(this._map[e][t]=0,this._dug++):this._walls[e+","+t]=1}_isWallCallback(e,t){return!(e<0||t<0||e>=this._width||t>=this._height)&&1==this._map[e][t]}_canBeDugCallback(e,t){return!(e<1||t<1||e+1>=this._width||t+1>=this._height)&&1==this._map[e][t]}_priorityWallCallback(e,t){this._walls[e+","+t]=2}_firstRoom(){let e=Math.floor(this._width/2),t=Math.floor(this._height/2),n=Room.createRandomCenter(e,t,this._options);this._rooms.push(n),n.create(this._digCallback)}_findWall(){let e=[],t=[];for(let n in this._walls){2==this._walls[n]?t.push(n):e.push(n)}let n=t.length?t:e;if(!n.length)return null;let i=Fn.getItem(n.sort());return delete this._walls[i],i}_tryFeature(e,t,n,i){let r=Fn.getWeightedValue(this._features),o=Hn[r].createRandomAt(e,t,n,i,this._options);return!!o.isValid(this._isWallCallback,this._canBeDugCallback)&&(o.create(this._digCallback),o instanceof Room&&this._rooms.push(o),o instanceof Corridor&&(o.createPriorityWalls(this._priorityWallCallback),this._corridors.push(o)),!0)}_removeSurroundingWalls(e,t){let n=Wn[4];for(let i=0;i<n.length;i++){let r=n[i],o=e+r[0],a=t+r[1];delete this._walls[o+","+a],o=e+2*r[0],a=t+2*r[1],delete this._walls[o+","+a]}}_getDiggingDirection(e,t){if(e<=0||t<=0||e>=this._width-1||t>=this._height-1)return null;let n=null,i=Wn[4];for(let r=0;r<i.length;r++){let o=i[r],a=e+o[0],s=t+o[1];if(!this._map[a][s]){if(n)return null;n=o}}return n?[-n[0],-n[1]]:null}_addDoors(){let e=this._map;function t(t,n){return 1==e[t][n]}for(let e=0;e<this._rooms.length;e++){let n=this._rooms[e];n.clearDoors(),n.addDoors(t)}}},EllerMaze:class EllerMaze extends zn{create(e){let t,n=this._fillMap(1),i=Math.ceil((this._width-2)/2),r=9/24,o=[],a=[];for(let e=0;e<i;e++)o.push(e),a.push(e);for(o.push(i-1),t=1;t+3<this._height;t+=2)for(let e=0;e<i;e++){let i=2*e+1,s=t;n[i][s]=0,e!=o[e+1]&&Fn.getUniform()>r&&(Un(e,o,a),n[i+1][s]=0),e!=o[e]&&Fn.getUniform()>r?Vn(e,o,a):n[i][s+1]=0}for(let e=0;e<i;e++){let i=2*e+1,s=t;n[i][s]=0,e!=o[e+1]&&(e==o[e]||Fn.getUniform()>r)&&(Un(e,o,a),n[i+1][s]=0),Vn(e,o,a)}for(let t=0;t<this._width;t++)for(let i=0;i<this._height;i++)e(t,i,n[t][i]);return this}},DividedMaze:class DividedMaze extends zn{constructor(){super(...arguments),this._stack=[],this._map=[]}create(e){let t=this._width,n=this._height;this._map=[];for(let e=0;e<t;e++){this._map.push([]);for(let i=0;i<n;i++){let r=0==e||0==i||e+1==t||i+1==n;this._map[e].push(r?1:0)}}this._stack=[[1,1,t-2,n-2]],this._process();for(let i=0;i<t;i++)for(let t=0;t<n;t++)e(i,t,this._map[i][t]);return this._map=[],this}_process(){for(;this._stack.length;){let e=this._stack.shift();this._partitionRoom(e)}}_partitionRoom(e){let t=[],n=[];for(let n=e[0]+1;n<e[2];n++){let i=this._map[n][e[1]-1],r=this._map[n][e[3]+1];!i||!r||n%2||t.push(n)}for(let t=e[1]+1;t<e[3];t++){let i=this._map[e[0]-1][t],r=this._map[e[2]+1][t];!i||!r||t%2||n.push(t)}if(!t.length||!n.length)return;let i=Fn.getItem(t),r=Fn.getItem(n);this._map[i][r]=1;let o=[],a=[];o.push(a);for(let t=e[0];t<i;t++)this._map[t][r]=1,t%2&&a.push([t,r]);a=[],o.push(a);for(let t=i+1;t<=e[2];t++)this._map[t][r]=1,t%2&&a.push([t,r]);a=[],o.push(a);for(let t=e[1];t<r;t++)this._map[i][t]=1,t%2&&a.push([i,t]);a=[],o.push(a);for(let t=r+1;t<=e[3];t++)this._map[i][t]=1,t%2&&a.push([i,t]);let s=Fn.getItem(o);for(let e=0;e<o.length;e++){let t=o[e];if(t==s)continue;let n=Fn.getItem(t);this._map[n[0]][n[1]]=0}this._stack.push([e[0],e[1],i-1,r-1]),this._stack.push([i+1,e[1],e[2],r-1]),this._stack.push([e[0],r+1,i-1,e[3]]),this._stack.push([i+1,r+1,e[2],e[3]])}},IceyMaze:class IceyMaze extends zn{constructor(e,t,n=0){super(e,t),this._regularity=n,this._map=[]}create(e){let t=this._width,n=this._height,i=this._fillMap(1);t-=t%2?1:2,n-=n%2?1:2;let r=0,o=0,a=0,s=0,l=0,c=!1,h=[[0,0],[0,0],[0,0],[0,0]];do{if(r=1+2*Math.floor(Fn.getUniform()*(t-1)/2),o=1+2*Math.floor(Fn.getUniform()*(n-1)/2),l||(i[r][o]=0),!i[r][o]){this._randomize(h);do{0==Math.floor(Fn.getUniform()*(this._regularity+1))&&this._randomize(h),c=!0;for(let e=0;e<4;e++)if(a=r+2*h[e][0],s=o+2*h[e][1],this._isFree(i,a,s,t,n)){i[a][s]=0,i[r+h[e][0]][o+h[e][1]]=0,r=a,o=s,c=!1,l++;break}}while(!c)}}while(l+1<t*n/4);for(let t=0;t<this._width;t++)for(let n=0;n<this._height;n++)e(t,n,i[t][n]);return this._map=[],this}_randomize(e){for(let t=0;t<4;t++)e[t][0]=0,e[t][1]=0;switch(Math.floor(4*Fn.getUniform())){case 0:e[0][0]=-1,e[1][0]=1,e[2][1]=-1,e[3][1]=1;break;case 1:e[3][0]=-1,e[2][0]=1,e[1][1]=-1,e[0][1]=1;break;case 2:e[2][0]=-1,e[3][0]=1,e[0][1]=-1,e[1][1]=1;break;case 3:e[1][0]=-1,e[0][0]=1,e[3][1]=-1,e[2][1]=1}}_isFree(e,t,n,i,r){return!(t<1||n<1||t>=i||n>=r)&&e[t][n]}},Rogue:class Rogue extends zn{constructor(e,t,n){super(e,t),this.map=[],this.rooms=[],this.connectedCells=[],(n=Object.assign({cellWidth:3,cellHeight:3},n)).hasOwnProperty("roomWidth")||(n.roomWidth=this._calculateRoomSize(this._width,n.cellWidth)),n.hasOwnProperty("roomHeight")||(n.roomHeight=this._calculateRoomSize(this._height,n.cellHeight)),this._options=n}create(e){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),e)for(let t=0;t<this._width;t++)for(let n=0;n<this._height;n++)e(t,n,this.map[t][n]);return this}_calculateRoomSize(e,t){let n=Math.floor(e/t*.8),i=Math.floor(e/t*.25);return i<2&&(i=2),n<2&&(n=2),[i,n]}_initRooms(){for(let e=0;e<this._options.cellWidth;e++){this.rooms.push([]);for(let t=0;t<this._options.cellHeight;t++)this.rooms[e].push({x:0,y:0,width:0,height:0,connections:[],cellx:e,celly:t})}}_connectRooms(){let e,t,n,i,r,o,a=Fn.getUniformInt(0,this._options.cellWidth-1),s=Fn.getUniformInt(0,this._options.cellHeight-1),l=!1;do{o=[0,2,4,6],o=Fn.shuffle(o);do{if(l=!1,e=o.pop(),t=a+Wn[8][e][0],n=s+Wn[8][e][1],!(t<0||t>=this._options.cellWidth||n<0||n>=this._options.cellHeight)){if(i=this.rooms[a][s],i.connections.length>0&&i.connections[0][0]==t&&i.connections[0][1]==n)break;r=this.rooms[t][n],0==r.connections.length&&(r.connections.push([a,s]),this.connectedCells.push([t,n]),a=t,s=n,l=!0)}}while(o.length>0&&0==l)}while(o.length>0)}_connectUnconnectedRooms(){let e,t,n,i=this._options.cellWidth,r=this._options.cellHeight;this.connectedCells=Fn.shuffle(this.connectedCells);for(let o=0;o<this._options.cellWidth;o++)for(let a=0;a<this._options.cellHeight;a++)if(e=this.rooms[o][a],0==e.connections.length){let s=[0,2,4,6];s=Fn.shuffle(s),n=!1;do{let e=s.pop(),l=o+Wn[8][e][0],c=a+Wn[8][e][1];if(!(l<0||l>=i||c<0||c>=r)){if(t=this.rooms[l][c],n=!0,0==t.connections.length)break;for(let e=0;e<t.connections.length;e++)if(t.connections[e][0]==o&&t.connections[e][1]==a){n=!1;break}if(n)break}}while(s.length);n?e.connections.push([t.cellx,t.celly]):console.log("-- Unable to connect room.")}}_createRandomRoomConnections(){}_createRooms(){let e,t,n,i,r,o=this._width,a=this._height,s=this._options.cellWidth,l=this._options.cellHeight,c=Math.floor(this._width/s),h=Math.floor(this._height/l),u=this._options.roomWidth,d=this._options.roomHeight;for(let g=0;g<s;g++)for(let s=0;s<l;s++){if(n=c*g,i=h*s,0==n&&(n=1),0==i&&(i=1),e=Fn.getUniformInt(u[0],u[1]),t=Fn.getUniformInt(d[0],d[1]),s>0)for(r=this.rooms[g][s-1];i-(r.y+r.height)<3;)i++;if(g>0)for(r=this.rooms[g-1][s];n-(r.x+r.width)<3;)n++;let l=Math.round(Fn.getUniformInt(0,c-e)/2),m=Math.round(Fn.getUniformInt(0,h-t)/2);for(;n+l+e>=o;)l?l--:e--;for(;i+m+t>=a;)m?m--:t--;n+=l,i+=m,this.rooms[g][s].x=n,this.rooms[g][s].y=i,this.rooms[g][s].width=e,this.rooms[g][s].height=t;for(let r=n;r<n+e;r++)for(let e=i;e<i+t;e++)this.map[r][e]=0}}_getWallPosition(e,t){let n,i,r;return 1==t||3==t?(n=Fn.getUniformInt(e.x+1,e.x+e.width-2),1==t?(i=e.y-2,r=i+1):(i=e.y+e.height+1,r=i-1),this.map[n][r]=0):(i=Fn.getUniformInt(e.y+1,e.y+e.height-2),2==t?(n=e.x+e.width+1,r=n-1):(n=e.x-2,r=n+1),this.map[r][i]=0),[n,i]}_drawCorridor(e,t){let n,i,r,o,a=t[0]-e[0],s=t[1]-e[1],l=e[0],c=e[1],h=[],u=Math.abs(a),d=Math.abs(s),g=Fn.getUniform(),m=g,p=1-g;for(i=a>0?2:6,r=s>0?4:0,u<d?(n=Math.ceil(d*m),h.push([r,n]),h.push([i,u]),n=Math.floor(d*p),h.push([r,n])):(n=Math.ceil(u*m),h.push([i,n]),h.push([r,d]),n=Math.floor(u*p),h.push([i,n])),this.map[l][c]=0;h.length>0;)for(o=h.pop();o[1]>0;)l+=Wn[8][o[0]][0],c+=Wn[8][o[0]][1],this.map[l][c]=0,o[1]=o[1]-1}_createCorridors(){let e,t,n,i,r,o=this._options.cellWidth,a=this._options.cellHeight;for(let s=0;s<o;s++)for(let o=0;o<a;o++){e=this.rooms[s][o];for(let o=0;o<e.connections.length;o++)t=e.connections[o],n=this.rooms[t[0]][t[1]],n.cellx>e.cellx?(i=2,r=4):n.cellx<e.cellx?(i=4,r=2):n.celly>e.celly?(i=3,r=1):(i=1,r=3),this._drawCorridor(this._getWallPosition(e,i),this._getWallPosition(n,r))}}}};const qn=()=>Math.ceil(canvas.scene.width*canvas.scene.padding/canvas.scene.grid.size)*canvas.scene.grid.size,Kn=()=>Math.ceil(canvas.scene.height*canvas.scene.padding/canvas.scene.grid.size)*canvas.scene.grid.size,jn=async(e,t)=>{const n=1*t.height,i=1*t.width,r=new Yn.Cellular(i,n);r.randomize(.5);for(let e=0;e<4;e++)r.create();t.connectCaves&&r.connect(null,1);const o=canvas.scene.grid.size/1,a=qn(),s=Kn();let l;for(let e=0;e<n;e++)for(let t=0;t<i;t++)if(r._map[e][t]){const n=le({x:a+t*o,y:s+e*o,height:o,width:o});l=l?re(l,n):n}if(l=ye(l),t.smoothing)for(let e=0;e<t.smoothing;e++)l=Ce(l);const c=e.state().clone();c.geometry=l,await e.pushState(c)},Xn=async(e,t)=>{const n=t.height,i=t.width,r=new Cn({max_iterations:50,size:[i,n],rooms:{any:{min_size:[t.minRoomSize,t.minRoomSize],max_size:[t.maxRoomSize,t.maxRoomSize],max_exits:4}},min_corridor_length:2,max_corridor_length:8,corridor_density:.5,symmetric_rooms:t.centerExits,interconnects:t.circularPaths?1:0,max_interconnect_length:10,room_count:t.roomCount});r.generate();const o=canvas.scene.grid.size,a=qn(),s=Kn();let l;for(let e=0;e<i;e++)for(let t=0;t<n;t++){if(!1===r.walls.get([e,t])){const n=le({x:a+e*o,y:s+t*o,height:o,width:o});l=l?re(l,n):n}}l=ye(l);const c=[];for(const e of r.children)if(1!==e.room_size[0]&&1!==e.room_size[1])for(const t of e.exits){const[[n,i],r]=t,l=e.position[0]+n,h=e.position[1]+i;90===r?c.push([a+(l+1)*o,s+h*o,a+(l+1)*o,s+(h+1)*o]):270===r?c.push([a+l*o,s+h*o,a+l*o,s+(h+1)*o]):0===r?c.push([a+l*o,s+h*o,a+(l+1)*o,s+h*o]):180===r&&c.push([a+l*o,s+(h+1)*o,a+(l+1)*o,s+(h+1)*o])}const h=e.state().clone();h.geometry=l,h.doors=t.generate2DDungeonDoors?c:[],await e.pushState(h)},Jn=async(e,t)=>{const n=Gn({width:t.width,height:t.height}),i=canvas.scene.grid.size,r=qn(),o=Kn();let a;const s=[];for(const e of n.tiles)for(const t of e){if("floor"===t.type||"door"===t.type){const e={x:r+t.x*i,y:o+t.y*i,height:i,width:i},n=le(e);a=a?re(a,n):n}"door"===t.type&&("floor"===t.neighbours.w?.type?s.push([r+(t.x+.5)*i,o+t.y*i,r+(t.x+.5)*i,o+(t.y+1)*i]):s.push([r+t.x*i,o+(t.y+.5)*i,r+(t.x+1)*i,o+(t.y+.5)*i]))}a=ye(a);const l=e.state().clone();l.geometry=a,l.doors=t.generateDungeoneerDoors?s:[],await e.pushState(l)};class GridPainterHelper{constructor(){this.gridDrawings=[],this.gridSpaceDictionary={}}gridDrawings;gridSpaceDictionary;paintedGeometry;onGridPainterMouseDraw(e,t){if(this.gridSpaceDictionary[e]??=new Set,!this.gridSpaceDictionary[e].has(t)){this.gridSpaceDictionary[e].add(t);const n=canvas.grid.getVertices({i:e,j:t}),i=[...n.map((e=>[e.x,e.y])),[n[0].x,n[0].y]],r=i.flat();this._addPreviewDrawing(r),this._addGridSpaceGeometry(i)}}_addGridSpaceGeometry(e){null==this.paintedGeometry?this.paintedGeometry=ue(e):this.paintedGeometry=re(this.paintedGeometry,ue(e))}_addPreviewDrawing(e){const t=game.scenes.current,n=foundry.utils.randomID(),i=DrawingDocument.create({fillColor:game.user.color.css,shape:{type:Drawing.SHAPE_TYPES.POLYGON,points:e},fillAlpha:.7,fillType:CONST.DRAWING_FILL_TYPES.SOLID,strokeWidth:0,_id:n},{parent:t});this.gridDrawings.push(i)}}const Zn="Dungeon Draw";function Qn(){return"freehand"===game.activeDungeonDrawTool}function $n(){return"gridpainter"===game.activeDungeonDrawTool}async function ei(){const e=await async function(){let e=game.folders.filter((e=>"JournalEntry"===e.type&&e.name===Zn)).pop();e||(e=await Folder.create({name:Zn,type:"JournalEntry"}));const t=await JournalEntry.create({name:canvas.scene.name,folder:e.id,flags:{"dungeon-draw":{dungeonVersion:"1.0"}}});return t}(),t=await async function(e){await canvas.scene.createEmbeddedDocuments("Note",[{entryId:e.id,fontSize:20,icon:"icons/svg/cave.svg",iconSize:32,textAnchor:1,textColor:"#FFFFFF",x:50,y:50,iconTint:"",text:"Dungeon Draw",flags:{}}])}(e);return{journalEntry:e,note:t}}function ti(e){const t=[];for(let n=0;n<=e.shape.points.length-2;n+=2)t.push([e.shape.points[n]+e.x,e.shape.points[n+1]+e.y]);return t}class DungeonLayer extends PlaceablesLayer{static LAYER_NAME="dungeon";static documentName="Drawing";constructor(){super(),this.dungeon=null}get documentCollection(){return null}static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:DungeonLayer.LAYER_NAME,canDragCreate:!0,snapToGrid:Settings.snapToGrid(),zIndex:-1,quadtree:!0})}_getNewDrawingData(e){const t=game.user.color.css,n={fillColor:t,strokeColor:t,strokeWidth:8};if(n.x=e.x,n.y=e.y,n.sort=Math.max(this.getMaxSort()+1,0),n.author=game.user.id,n.shape={},"add"===game.activeDungeonDrawMode)switch(game.activeDungeonDrawTool){case"rectangle":n.shape.type=Drawing.SHAPE_TYPES.RECTANGLE,n.shape.width=1,n.shape.height=1;break;case"ellipse":n.shape.type=Drawing.SHAPE_TYPES.ELLIPSE,n.shape.width=1,n.shape.height=1;break;case"polygon":case"interiorwall":case"door":case"secretdoor":case"invisiblewall":case"themepainter":n.shape.type=Drawing.SHAPE_TYPES.POLYGON,n.shape.points=[0,0],n.bezierFactor=0;break;case"freehand":n.shape.type=Drawing.SHAPE_TYPES.POLYGON,n.shape.points=[0,0],n.bezierFactor=n.bezierFactor??.5;break;case"gridpainter":n.flags={gridPainterHelper:new GridPainterHelper},n.shape.width=0,n.shape.height=0}else if("remove"===game.activeDungeonDrawMode)switch(game.activeDungeonDrawTool){case"rectangle":case"interiorwall":case"door":case"secretdoor":case"invisiblewall":case"themepainter":n.shape.type=Drawing.SHAPE_TYPES.RECTANGLE,n.shape.width=1,n.shape.height=1;break;case"ellipse":n.shape.type=Drawing.SHAPE_TYPES.ELLIPSE,n.shape.width=1,n.shape.height=1;break;case"polygon":n.shape.type=Drawing.SHAPE_TYPES.POLYGON,n.shape.points=[0,0],n.bezierFactor=0;break;case"freehand":n.shape.type=Drawing.SHAPE_TYPES.POLYGON,n.shape.points=[0,0],n.bezierFactor=n.bezierFactor??.5;break;case"gridpainter":n.flags={gridPainterHelper:new GridPainterHelper},n.shape.width=0,n.shape.height=0}return n}async deleteAll(){if(!game.user.isGM)throw new Error("You do not have permission to clear all.");return Dialog.confirm({title:game.i18n.localize("DD.ButtonTitleClearAll"),content:`<p>${game.i18n.localize("DD.ClearAllDialogContent")}</p>`,yes:()=>this.dungeon?.deleteAll()})}async generate(e){this.dungeon?await this.dungeon.deleteAll():await this.createNewDungeon(),await(async(e,t={})=>{try{switch(t.algorithm){case"2d-dungeon":await Xn(e,t);break;case"rot-js-cellular":await jn(e,t);break;case"dungeoneer":await Jn(e,t)}}catch(e){console.error(e),ui.notifications.error("Error generating dungeon... please try again.")}})(this.dungeon,e)}async loadDungeon(){const{journalEntry:t,note:n}=await function(){for(const t of canvas.scene.notes){const n=game.journal.get(t.entryId);if(n&&n.getFlag(e,"dungeonVersion"))return{journalEntry:n,note:t}}return{journalEntry:null,note:null}}();t?(this.dungeon=new $e(t,n),await this.dungeon.loadFromJournalEntry(),this.addChildAt(this.dungeon,0)):this.dungeon=null}async createNewDungeon(){await ei(),await this.loadDungeon()}_onClickLeft(e){const{preview:t,drawingsState:n,destination:i}=e.interactionData;if(n>=1&&t.isPolygon)return t._addPoint(i,{snap:!e.shiftKey,round:!0}),t._chain=!0,t.refresh();super._onClickLeft(e)}_onClickLeft2(e){const{drawingsState:t,preview:n}=e.interactionData;t>=1&&n.isPolygon?e.interactionData.drawingsState=2:super._onClickLeft2(e)}async _onDragLeftStart(e){await super._onDragLeftStart(e);const t=e.interactionData;Settings.snapToGrid()&&!e.shiftKey&&(t.origin=this.getSnappedPoint(t.origin));const n=getDocumentClass("Drawing");let i;try{i=new n(this._getNewDrawingData(t.origin),{parent:canvas.scene})}catch(e){throw e instanceof foundry.data.validation.DataModelValidationError&&ui.notifications.error("DRAWING.JointValidationErrorUI",{localize:!0}),e}const r=new this.constructor.placeableClass(i);t.preview=this.preview.addChild(r),t.drawingsState=1,r.draw()}_onDragLeftMove(e){const{preview:t,drawingsState:n}=e.interactionData;if(t&&!t._destroyed&&(null===t.parent&&this.preview.addChild(t),n>=1)){Qn()?function(e,t){const{destination:n}=t.interactionData,i=n,r=Date.now()-e._drawTime<e.constructor.FREEHAND_SAMPLE_RATE;e._addPoint(i,{snap:!1,temporary:r}),e.refresh()}(t,e):$n()?function(e,t){const{destination:n}=t.interactionData,{i:i,j:r}=canvas.grid.getOffset(n);e.document.flags.gridPainterHelper.onGridPainterMouseDraw(i,r)}(t,e):t._onMouseDraw(e);const n=game.activeDungeonDrawMode+game.activeDungeonDrawTool;t.isPolygon&&!Qn()&&"adddoor"!==n&&"addinteriorwall"!==n&&"addsecretdoor"!==n&&"addinvisiblewall"!==n&&"addgridpainter"!==n||(e.interactionData.drawingsState=2)}}_maybeSnappedRect(e,t){if(Settings.snapToGrid()&&!t){const t={x:e.x+e.shape.width,y:e.y+e.shape.height},n=this.getSnappedPoint(t);e.shape.height=n.y-e.y,e.shape.width=n.x-e.x}return{x:e.x,y:e.y,height:e.shape.height,width:e.shape.width}}_maybeSnapLastPoint(e,t){const n=e.shape.points.length;if(0!==n&&Settings.snapToGrid()&&!t){const t={x:e.shape.points[n-2],y:e.shape.points[n-1]},i=this.getSnappedPoint(t);e.shape.points[n-2]=i.x,e.shape.points[n-1]=i.y}}_autoClosePolygon(e){const t=e.shape.points.length;t>4&&(e.shape.points[0]!==e.shape.points[t-2]||e.shape.points[1]!==e.shape.points[t-1])&&e.shape.points.push(e.shape.points[0],e.shape.points[1])}async _onDragLeftDrop(e){const t=e.interactionData;Settings.snapToGrid()&&!e.shiftKey&&(t.destination=this.getSnappedPoint(t.destination));const{destination:n,origin:i,preview:r}=e.interactionData;let o=e.interactionData.drawingsState;if("polygon"===game.activeDungeonDrawTool||"themepainter"===game.activeDungeonDrawTool){const e=r.document.shape.points.length;r.isPolygon&&e>4&&r.document.shape.points[0]==r.document.shape.points[e-2]&&r.document.shape.points[1]==r.document.shape.points[e-1]&&(o=2)}const a=game.activeDungeonDrawMode+game.activeDungeonDrawTool;if(2===o||"freehand"===game.activeDungeonDrawTool){this.dungeon||await this.createNewDungeon();const t=Math.hypot(n.x-i.x,n.y-i.y)>=canvas.dimensions.size/8,o=r.isPolygon&&r.document.shape.points.length>4;if("adddoor"===a){e.interactionData.drawingsState=0;const t=r.document.toObject(!1);r._chain=!1,this._maybeSnapLastPoint(t,e.shiftKey),await this.dungeon.addDoor(t.x,t.y,t.x+t.shape.points[2],t.y+t.shape.points[3])}else if("addsecretdoor"===a){e.interactionData.drawingsState=0;const t=r.document.toObject(!1);r._chain=!1,this._maybeSnapLastPoint(t,e.shiftKey),await this.dungeon.addSecretDoor(t.x,t.y,t.x+t.shape.points[2],t.y+t.shape.points[3])}else if("addinteriorwall"===a){e.interactionData.drawingsState=0;const t=r.document.toObject(!1);r._chain=!1,this._maybeSnapLastPoint(t,e.shiftKey),await this.dungeon.addInteriorWall(t.x,t.y,t.x+t.shape.points[2],t.y+t.shape.points[3])}else if("addinvisiblewall"===a){e.interactionData.drawingsState=0;const t=r.document.toObject(!1);r._chain=!1,this._maybeSnapLastPoint(t,e.shiftKey),await this.dungeon.addInvisibleWall(t.x,t.y,t.x+t.shape.points[2],t.y+t.shape.points[3])}else if(t||o){e.interactionData.drawingsState=0;const t=r.document.toObject(!1);r._chain=!1;const n=this.constructor.placeableClass.normalizeShape(t);if("addellipse"===a){const e=n.x+n.shape.width/2,t=n.y+n.shape.height/2;await this.dungeon.addEllipse(e,t,n.shape.width,n.shape.height)}else if("addfreehand"===a){this._maybeSnapLastPoint(n,e.shiftKey),this._autoClosePolygon(n);const t=ti(n);await this.dungeon.addPolygon(t)}else if("addpolygon"===a){this._maybeSnapLastPoint(n,e.shiftKey),this._autoClosePolygon(n);const t=ti(n);await this.dungeon.addPolygon(t)}else if("addrectangle"===a){const t=this._maybeSnappedRect(n,e.shiftKey);await this.dungeon.addRectangle(t)}else if("addthemepainter"===a){this._maybeSnapLastPoint(n,e.shiftKey),this._autoClosePolygon(n);const t=ti(n);await this.dungeon.addThemeArea(t)}else if("addgridpainter"===a)await this.dungeon.addGridPaintedArea(n.flags.gridPainterHelper.paintedGeometry);else if("removedoor"===a){const t=this._maybeSnappedRect(n,e.shiftKey);await this.dungeon.removeDoors(t)}else if("removeellipse"===a){const e=n.x+n.shape.width/2,t=n.y+n.shape.height/2;await this.dungeon.removeEllipse(e,t,n.shape.width,n.shape.height)}else if("removefreehand"===a){this._maybeSnapLastPoint(n,e.shiftKey),this._autoClosePolygon(n);const t=ti(n);await this.dungeon.removePolygon(t)}else if("removesecretdoor"===a){const t=this._maybeSnappedRect(n,e.shiftKey);await this.dungeon.removeSecretDoors(t)}else if("removeinteriorwall"===a){const t=this._maybeSnappedRect(n,e.shiftKey);await this.dungeon.removeInteriorWalls(t)}else if("removeinvisiblewall"===a){const t=this._maybeSnappedRect(n,e.shiftKey);await this.dungeon.removeInvisibleWalls(t)}else if("removepolygon"===a){this._maybeSnapLastPoint(n,e.shiftKey),this._autoClosePolygon(n);const t=ti(n);await this.dungeon.removePolygon(t)}else if("removerectangle"===a){const t=this._maybeSnappedRect(n,e.shiftKey);await this.dungeon.removeRectangle(t)}else if("removethemepainter"===a){const t=this._maybeSnappedRect(n,e.shiftKey);await this.dungeon.removeThemeAreas(t)}else"removegridpainter"===a&&await this.dungeon.removeGridPaintedArea(n.flags.gridPainterHelper.paintedGeometry)}if($n()){const e=(await Promise.all(r.document.flags.gridPainterHelper.gridDrawings)).map((e=>e.id));game.scenes.current.deleteEmbeddedDocuments("Drawing",e)}return this._onDragLeftCancel(e)}if(1===o&&r.isPolygon){if(e.preventDefault(),r._chain)return;return this._onClickLeft(e)}return this._onDragLeftCancel(e)}}class GeneratorSheet extends FormApplication{constructor(e="settings"){super(),this._tabs[0].active=e}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"dd-generator-sheet",classes:["sheet"],template:"modules/dungeon-draw/templates/generator-sheet.html",width:480,height:800,tabs:[{navSelector:".tabs",contentSelector:"form",initial:"position"}]})}get title(){return game.i18n.localize("DD.GeneratorSheetTitle")}getData(){return{height:30,width:30,centerExits:!1,circularPaths:!1,generate2DDungeonDoors:!0,maxRoomSize:7,minRoomSize:3,roomCount:15,generateDungeoneerDoors:!0,connectCaves:!0,smoothing:0}}activateListeners(e){super.activateListeners(e),e.find('button[name="generate"]').click(this.generate.bind(this)),e.find('select[name="algorithm"]').change(this.changeAlgorithm.bind(this)),this.changeAlgorithm()}async changeAlgorithm(e){e?.preventDefault();const t=`.${this._getSubmitData().algorithm}`;$(".alg-fields").filter(t).show(),$(".alg-fields").not(t).hide()}async generate(e){e.preventDefault();const t=this._getSubmitData();await canvas.dungeon.generate(t)}}class Keybindings{static register(){game.keybindings.register(e,"redo",{name:"DD.ButtonTitleRedo",uneditable:[{key:"KeyY",modifiers:[KeyboardManager.MODIFIER_KEYS.CONTROL]}],onDown:Keybindings.onRedo}),game.keybindings.register(e,"undo",{name:"DD.ButtonTitleUndo",uneditable:[{key:"KeyZ",modifiers:[KeyboardManager.MODIFIER_KEYS.CONTROL]}],onDown:Keybindings.onUndo})}static onRedo(){if(!canvas.ready)return!1;const e=canvas.activeLayer;return e instanceof DungeonLayer&&(e.dungeon?.redo(),!0)}static onUndo(){if(!canvas.ready)return!1;const e=canvas.activeLayer;return e instanceof DungeonLayer&&(e.dungeon?.undo(),!0)}}class DungeonDrawToolbar extends Application{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"dd-toolbar",popOut:!1,template:"modules/dungeon-draw/templates/toolbar.html"})}constructor(){super()}activateListeners(e){super.activateListeners(e),e.find(".addremove-toggle").click(this.addRemoveClick.bind(this)),e.find('select[name="themePainterThemeKey"]').change(this.themeSelectChange.bind(this)),e.find(".control-tool").click(this.controlToolClick.bind(this)),e.find('select[name="themePainterThemeKey"]').change(this.themeSelectChange.bind(this))}getData(){const e=s(),t=Object.keys(e).sort(),n=Object.keys(u).sort(),i=c(),r="add"===game.activeDungeonDrawMode?"toggle-on":"",o="remove"===game.activeDungeonDrawMode?"toggle-on":"";return{customThemes:e,customThemeKeys:t,row1:[{name:"rectangle",title:"DD.ButtonTitleRectangle",icon:"fas fa-square",class:"add",isActive:"rectangle"===game.activeDungeonDrawTool},{name:"polygon",title:"DD.ButtonTitlePolygon",icon:"fas fa-draw-polygon",isActive:"polygon"===game.activeDungeonDrawTool},{name:"ellipse",title:"DD.ButtonTitleEllipse",icon:"fas fa-circle",isActive:"ellipse"===game.activeDungeonDrawTool},{name:"freehand",title:"DD.ButtonTitleFreehand",icon:"fas fa-signature",isActive:"freehand"===game.activeDungeonDrawTool},{name:"gridpainter",title:"DD.ButtonTitleGridPainter",icon:"fas fa-grid-3",isActive:"gridpainter"===game.activeDungeonDrawTool}],row2:[{name:"interiorwall",title:"DD.ButtonTitleInteriorWall",icon:"fas fa-bars",isActive:"interiorwall"===game.activeDungeonDrawTool},{name:"door",title:"DD.ButtonTitleDoor",icon:"fas fa-door-open",isActive:"door"===game.activeDungeonDrawTool},{name:"secretdoor",title:"DD.ButtonTitleSecretDoor",icon:"fas fa-user-secret",isActive:"secretdoor"===game.activeDungeonDrawTool},{name:"invisiblewall",title:"DD.ButtonTitleInvisibleWall",icon:"fas fa-eye-slash",isActive:"invisiblewall"===game.activeDungeonDrawTool}],row3:[{name:"themepainter",title:"DD.ButtonTitleThemePainter",icon:"fas fa-brush",isActive:"themepainter"===game.activeDungeonDrawTool}],themeKeys:n,themePainterThemeKey:i,themes:u,toggleAddClass:r,toggleRemoveClass:o}}render(e=!1,t={}){super.render(e,t)}updateActiveCss(){this._element.find(".control-tool").removeClass("active"),this._element.find(`[data-tool='${game.activeDungeonDrawTool}']`).addClass("active")}addRemoveClick(e){game.activeDungeonDrawMode=$(e.target).data("addremove"),this._element.find(".addremove-toggle").removeClass("toggle-on"),$(e.currentTarget).addClass("toggle-on")}controlToolClick(e){const t=$(e.currentTarget).data("tool");game.activeDungeonDrawTool=t,this.updateActiveCss()}themeSelectChange(e){const t=$(e.currentTarget).val();h(t)}}const ni=new DungeonDrawToolbar;class DungeonDraw{static init(){Settings.register(),Keybindings.register(),game.activeDungeonDrawTool="rectangle",game.activeDungeonDrawMode="add"}static ready(){}static controlsVisible(){if(game.user.isGM)return!0;return game.settings.get(e,n)&&game.user.isTrusted}static getSceneControlButtons(e){CONFIG.Canvas.layers[DungeonLayer.LAYER_NAME]={layerClass:DungeonLayer,group:"primary"},CONFIG.Dungeon={layerClass:DungeonLayer},e.push({name:"dungeondraw",title:"DD.SceneControlTitle",layer:DungeonLayer.LAYER_NAME,icon:"fas fa-dungeon",visible:DungeonDraw.controlsVisible(),tools:[{name:"drawmap",title:"DD.ButtonTitleDrawMap",icon:"fas fa-dungeon"},{name:"undo",title:"DD.ButtonTitleUndo",icon:"fas fa-undo",onClick:async()=>{await canvas.dungeon.dungeon.undo()},button:!0},{name:"redo",title:"DD.ButtonTitleRedo",icon:"fas fa-redo",onClick:async()=>{await canvas.dungeon.dungeon.redo()},button:!0},{name:"generate",title:"DD.ButtonTitleGenerate",icon:"fas fa-magic",onClick:async()=>(new GeneratorSheet).render(!0),button:!0},{name:"config",title:"DD.ButtonTitleConfig",icon:"fas fa-cog",onClick:()=>(new ConfigSheet).render(!0),button:!0},{name:"savetoscene",title:"DD.ButtonTitleSaveToSceneBackground",icon:"fas fa-sign-out-alt",visible:game.user.isGM,onClick:async()=>{await canvas.dungeon.dungeon.saveToSceneBackground()},button:!0},{name:"clear",title:"DD.ButtonTitleClearAll",icon:"fas fa-trash",visible:game.user.isGM,onClick:()=>canvas.dungeon.deleteAll(),button:!0}],activeTool:"drawmap"})}static async canvasReady(e){await e.dungeon.loadDungeon()}static async updateJournalEntry(e,t,n,i){game.user.id!==i&&await(canvas.dungeon.dungeon?.maybeRefresh(e))}static async renderSceneControls(e){"dungeondraw"===e.activeControl?ni.render(!0):await ni.close()}static async activateSceneControls(){$("#controls").append(ni.element),ni.element.addClass("active")}}Hooks.on("init",DungeonDraw.init),Hooks.on("ready",DungeonDraw.ready),Hooks.on("getSceneControlButtons",DungeonDraw.getSceneControlButtons),Hooks.on("canvasReady",DungeonDraw.canvasReady),Hooks.on("updateJournalEntry",DungeonDraw.updateJournalEntry),Hooks.on("renderSceneControls",DungeonDraw.renderSceneControls),Hooks.on("renderDungeonDrawToolbar",DungeonDraw.activateSceneControls);export{DungeonDraw};
//# sourceMappingURL=dungeondraw-bundle.min.js.map
